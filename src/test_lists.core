module 'test_lists' ['all'/2,
		     'any'/2,
		     'append'/1,
		     'append'/2,
		     'concat'/1,
		     'delete'/2,
		     'droplast'/1,
		     'dropwhile'/2,
		     'duplicate'/2,
		     'filter'/2,
		     'filtermap'/2,
		     'flatlength'/1,
		     'flatmap'/2,
		     'flatten'/1,
		     'flatten'/2,
		     'foldl'/3,
		     'foldr'/3,
		     'foreach'/2,
		     'keydelete'/3,
		     'keymap'/3,
		     'keymerge'/3,
		     'keyreplace'/4,
		     'keysort'/2,
		     'keystore'/4,
		     'keytake'/3,
		     'last'/1,
		     'map'/2,
		     'mapfoldl'/3,
		     'mapfoldr'/3,
		     'max'/1,
		     'merge'/1,
		     'merge'/2,
		     'merge'/3,
		     'merge3'/3,
		     'min'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'nth'/2,
		     'nthtail'/2,
		     'partition'/2,
		     'prefix'/2,
		     'reverse'/1,
		     'rkeymerge'/3,
		     'rmerge'/2,
		     'rmerge'/3,
		     'rmerge3'/3,
		     'rukeymerge'/3,
		     'rumerge'/2,
		     'rumerge'/3,
		     'rumerge3'/3,
		     'seq'/2,
		     'seq'/3,
		     'sort'/1,
		     'sort'/2,
		     'split'/2,
		     'splitwith'/2,
		     'sublist'/2,
		     'sublist'/3,
		     'subtract'/2,
		     'suffix'/2,
		     'sum'/1,
		     'takewhile'/2,
		     'ukeymerge'/3,
		     'ukeysort'/2,
		     'umerge'/1,
		     'umerge'/2,
		     'umerge'/3,
		     'umerge3'/3,
		     'unzip'/1,
		     'unzip3'/1,
		     'usort'/1,
		     'usort'/2,
		     'zf'/2,
		     'zip'/2,
		     'zip3'/3,
		     'zipwith'/3,
		     'zipwith3'/4]
    attributes [%% Line 58
		'spec' =
		    %% Line 58
		    [{{'append',2},[{'type',58,'bounded_fun',[{'type',58,'fun',[{'type',58,'product',[{'var',58,'List1'}|[{'var',58,'List2'}]]}|[{'var',58,'List3'}]]}|[[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'List1'}|[{'type',59,'list',[{'var',59,'T'}]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'List2'}|[{'type',60,'list',[{'var',60,'T'}]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'List3'}|[{'type',61,'list',[{'var',61,'T'}]}]]]]}|[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'T'}|[{'type',62,'term',[]}]]]]}]]]]]]}]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'append',1},[{'type',68,'bounded_fun',[{'type',68,'fun',[{'type',68,'product',[{'var',68,'ListOfLists'}]}|[{'var',68,'List1'}]]}|[[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'ListOfLists'}|[{'type',69,'list',[{'var',69,'List'}]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'List'}|[{'type',70,'list',[{'var',70,'T'}]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'List1'}|[{'type',71,'list',[{'var',71,'T'}]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'T'}|[{'type',72,'term',[]}]]]]}]]]]]]}]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'subtract',2},[{'type',80,'bounded_fun',[{'type',80,'fun',[{'type',80,'product',[{'var',80,'List1'}|[{'var',80,'List2'}]]}|[{'var',80,'List3'}]]}|[[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'List1'}|[{'type',81,'list',[{'var',81,'T'}]}]]]]}|[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'List2'}|[{'type',82,'list',[{'var',82,'T'}]}]]]]}|[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'List3'}|[{'type',83,'list',[{'var',83,'T'}]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'T'}|[{'type',84,'term',[]}]]]]}]]]]]]}]}],
		%% Line 90
		'spec' =
		    %% Line 90
		    [{{'reverse',1},[{'type',90,'bounded_fun',[{'type',90,'fun',[{'type',90,'product',[{'var',90,'List1'}]}|[{'var',90,'List2'}]]}|[[{'type',91,'constraint',[{'atom',91,'is_subtype'}|[[{'var',91,'List1'}|[{'type',91,'list',[{'var',91,'T'}]}]]]]}|[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'List2'}|[{'type',92,'list',[{'var',92,'T'}]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'T'}|[{'type',93,'term',[]}]]]]}]]]]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'nth',2},[{'type',112,'bounded_fun',[{'type',112,'fun',[{'type',112,'product',[{'var',112,'N'}|[{'var',112,'List'}]]}|[{'var',112,'Elem'}]]}|[[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'N'}|[{'type',113,'pos_integer',[]}]]]]}|[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'List'}|[{'type',114,'nonempty_list',[{'var',114,'T'}]}]]]]}|[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Elem'}|[{'var',115,'T'}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'T'}|[{'type',116,'term',[]}]]]]}]]]]]]}]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'nthtail',2},[{'type',122,'bounded_fun',[{'type',122,'fun',[{'type',122,'product',[{'var',122,'N'}|[{'var',122,'List'}]]}|[{'var',122,'Tail'}]]}|[[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'N'}|[{'type',123,'non_neg_integer',[]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'List'}|[{'type',124,'nonempty_list',[{'var',124,'T'}]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'Tail'}|[{'type',125,'list',[{'var',125,'T'}]}]]]]}|[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'T'}|[{'type',126,'term',[]}]]]]}]]]]]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'prefix',2},[{'type',135,'bounded_fun',[{'type',135,'fun',[{'type',135,'product',[{'var',135,'List1'}|[{'var',135,'List2'}]]}|[{'type',135,'boolean',[]}]]}|[[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'List1'}|[{'type',136,'list',[{'var',136,'T'}]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'List2'}|[{'type',137,'list',[{'var',137,'T'}]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'T'}|[{'type',138,'term',[]}]]]]}]]]]]}]}],
		%% Line 147
		'spec' =
		    %% Line 147
		    [{{'suffix',2},[{'type',147,'bounded_fun',[{'type',147,'fun',[{'type',147,'product',[{'var',147,'List1'}|[{'var',147,'List2'}]]}|[{'type',147,'boolean',[]}]]}|[[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'List1'}|[{'type',148,'list',[{'var',148,'T'}]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'List2'}|[{'type',149,'list',[{'var',149,'T'}]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'T'}|[{'type',150,'term',[]}]]]]}]]]]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'droplast',1},[{'type',158,'bounded_fun',[{'type',158,'fun',[{'type',158,'product',[{'var',158,'List'}]}|[{'var',158,'InitList'}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'List'}|[{'type',159,'nonempty_list',[{'var',159,'T'}]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'InitList'}|[{'type',160,'list',[{'var',160,'T'}]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'T'}|[{'type',161,'term',[]}]]]]}]]]]]}]}],
		%% Line 171
		'spec' =
		    %% Line 171
		    [{{'last',1},[{'type',171,'bounded_fun',[{'type',171,'fun',[{'type',171,'product',[{'var',171,'List'}]}|[{'var',171,'Last'}]]}|[[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'List'}|[{'type',172,'nonempty_list',[{'var',172,'T'}]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Last'}|[{'var',173,'T'}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'T'}|[{'type',174,'term',[]}]]]]}]]]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'seq',2},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'From'}|[{'var',186,'To'}]]}|[{'var',186,'Seq'}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'From'}|[{'type',187,'integer',[]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'To'}|[{'type',188,'integer',[]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'Seq'}|[{'type',189,'list',[{'type',189,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 204
		'spec' =
		    %% Line 204
		    [{{'seq',3},[{'type',204,'bounded_fun',[{'type',204,'fun',[{'type',204,'product',[{'var',204,'From'}|[{'var',204,'To'}|[{'var',204,'Incr'}]]]}|[{'var',204,'Seq'}]]}|[[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'From'}|[{'type',205,'integer',[]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'To'}|[{'type',206,'integer',[]}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Incr'}|[{'type',207,'integer',[]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Seq'}|[{'type',208,'list',[{'type',208,'integer',[]}]}]]]]}]]]]]]}]}],
		%% Line 234
		'spec' =
		    %% Line 234
		    [{{'sum',1},[{'type',234,'bounded_fun',[{'type',234,'fun',[{'type',234,'product',[{'var',234,'List'}]}|[{'type',234,'number',[]}]]}|[[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'List'}|[{'type',235,'list',[{'type',235,'number',[]}]}]]]]}]]]}]}],
		%% Line 245
		'spec' =
		    %% Line 245
		    [{{'duplicate',2},[{'type',245,'bounded_fun',[{'type',245,'fun',[{'type',245,'product',[{'var',245,'N'}|[{'var',245,'Elem'}]]}|[{'var',245,'List'}]]}|[[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'N'}|[{'type',246,'non_neg_integer',[]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Elem'}|[{'var',247,'T'}]]]]}|[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'List'}|[{'type',248,'list',[{'var',248,'T'}]}]]]]}|[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'T'}|[{'type',249,'term',[]}]]]]}]]]]]]}]}],
		%% Line 258
		'spec' =
		    %% Line 258
		    [{{'min',1},[{'type',258,'bounded_fun',[{'type',258,'fun',[{'type',258,'product',[{'var',258,'List'}]}|[{'var',258,'Min'}]]}|[[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'List'}|[{'type',259,'nonempty_list',[{'var',259,'T'}]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Min'}|[{'var',260,'T'}]]]]}|[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'T'}|[{'type',261,'term',[]}]]]]}]]]]]}]}],
		%% Line 271
		'spec' =
		    %% Line 271
		    [{{'max',1},[{'type',271,'bounded_fun',[{'type',271,'fun',[{'type',271,'product',[{'var',271,'List'}]}|[{'var',271,'Max'}]]}|[[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'List'}|[{'type',272,'nonempty_list',[{'var',272,'T'}]}]]]]}|[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'Max'}|[{'var',273,'T'}]]]]}|[{'type',274,'constraint',[{'atom',274,'is_subtype'}|[[{'var',274,'T'}|[{'type',274,'term',[]}]]]]}]]]]]}]}],
		%% Line 285
		'spec' =
		    %% Line 285
		    [{{'sublist',3},[{'type',285,'bounded_fun',[{'type',285,'fun',[{'type',285,'product',[{'var',285,'List1'}|[{'var',285,'Start'}|[{'var',285,'Len'}]]]}|[{'var',285,'List2'}]]}|[[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'List1'}|[{'type',286,'list',[{'var',286,'T'}]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'List2'}|[{'type',287,'list',[{'var',287,'T'}]}]]]]}|[{'type',288,'constraint',[{'atom',288,'is_subtype'}|[[{'var',288,'Start'}|[{'type',288,'pos_integer',[]}]]]]}|[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'Len'}|[{'type',289,'non_neg_integer',[]}]]]]}|[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'T'}|[{'type',290,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 295
		'spec' =
		    %% Line 295
		    [{{'sublist',2},[{'type',295,'bounded_fun',[{'type',295,'fun',[{'type',295,'product',[{'var',295,'List1'}|[{'var',295,'Len'}]]}|[{'var',295,'List2'}]]}|[[{'type',296,'constraint',[{'atom',296,'is_subtype'}|[[{'var',296,'List1'}|[{'type',296,'list',[{'var',296,'T'}]}]]]]}|[{'type',297,'constraint',[{'atom',297,'is_subtype'}|[[{'var',297,'List2'}|[{'type',297,'list',[{'var',297,'T'}]}]]]]}|[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'Len'}|[{'type',298,'non_neg_integer',[]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'T'}|[{'type',299,'term',[]}]]]]}]]]]]]}]}],
		%% Line 314
		'spec' =
		    %% Line 314
		    [{{'delete',2},[{'type',314,'bounded_fun',[{'type',314,'fun',[{'type',314,'product',[{'var',314,'Elem'}|[{'var',314,'List1'}]]}|[{'var',314,'List2'}]]}|[[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'Elem'}|[{'var',315,'T'}]]]]}|[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'List1'}|[{'type',316,'list',[{'var',316,'T'}]}]]]]}|[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'List2'}|[{'type',317,'list',[{'var',317,'T'}]}]]]]}|[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'T'}|[{'type',318,'term',[]}]]]]}]]]]]]}]}],
		%% Line 328
		'spec' =
		    %% Line 328
		    [{{'zip',2},[{'type',328,'bounded_fun',[{'type',328,'fun',[{'type',328,'product',[{'var',328,'List1'}|[{'var',328,'List2'}]]}|[{'var',328,'List3'}]]}|[[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'List1'}|[{'type',329,'list',[{'var',329,'A'}]}]]]]}|[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'List2'}|[{'type',330,'list',[{'var',330,'B'}]}]]]]}|[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'List3'}|[{'type',331,'list',[{'type',331,'tuple',[{'var',331,'A'}|[{'var',331,'B'}]]}]}]]]]}|[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'A'}|[{'type',332,'term',[]}]]]]}|[{'type',333,'constraint',[{'atom',333,'is_subtype'}|[[{'var',333,'B'}|[{'type',333,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 341
		'spec' =
		    %% Line 341
		    [{{'unzip',1},[{'type',341,'bounded_fun',[{'type',341,'fun',[{'type',341,'product',[{'var',341,'List1'}]}|[{'type',341,'tuple',[{'var',341,'List2'}|[{'var',341,'List3'}]]}]]}|[[{'type',342,'constraint',[{'atom',342,'is_subtype'}|[[{'var',342,'List1'}|[{'type',342,'list',[{'type',342,'tuple',[{'var',342,'A'}|[{'var',342,'B'}]]}]}]]]]}|[{'type',343,'constraint',[{'atom',343,'is_subtype'}|[[{'var',343,'List2'}|[{'type',343,'list',[{'var',343,'A'}]}]]]]}|[{'type',344,'constraint',[{'atom',344,'is_subtype'}|[[{'var',344,'List3'}|[{'type',344,'list',[{'var',344,'B'}]}]]]]}|[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'A'}|[{'type',345,'term',[]}]]]]}|[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'B'}|[{'type',346,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 356
		'spec' =
		    %% Line 356
		    [{{'zip3',3},[{'type',356,'bounded_fun',[{'type',356,'fun',[{'type',356,'product',[{'var',356,'List1'}|[{'var',356,'List2'}|[{'var',356,'List3'}]]]}|[{'var',356,'List4'}]]}|[[{'type',357,'constraint',[{'atom',357,'is_subtype'}|[[{'var',357,'List1'}|[{'type',357,'list',[{'var',357,'A'}]}]]]]}|[{'type',358,'constraint',[{'atom',358,'is_subtype'}|[[{'var',358,'List2'}|[{'type',358,'list',[{'var',358,'B'}]}]]]]}|[{'type',359,'constraint',[{'atom',359,'is_subtype'}|[[{'var',359,'List3'}|[{'type',359,'list',[{'var',359,'C'}]}]]]]}|[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'List4'}|[{'type',360,'list',[{'type',360,'tuple',[{'var',360,'A'}|[{'var',360,'B'}|[{'var',360,'C'}]]]}]}]]]]}|[{'type',361,'constraint',[{'atom',361,'is_subtype'}|[[{'var',361,'A'}|[{'type',361,'term',[]}]]]]}|[{'type',362,'constraint',[{'atom',362,'is_subtype'}|[[{'var',362,'B'}|[{'type',362,'term',[]}]]]]}|[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'C'}|[{'type',363,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 371
		'spec' =
		    %% Line 371
		    [{{'unzip3',1},[{'type',371,'bounded_fun',[{'type',371,'fun',[{'type',371,'product',[{'var',371,'List1'}]}|[{'type',371,'tuple',[{'var',371,'List2'}|[{'var',371,'List3'}|[{'var',371,'List4'}]]]}]]}|[[{'type',372,'constraint',[{'atom',372,'is_subtype'}|[[{'var',372,'List1'}|[{'type',372,'list',[{'type',372,'tuple',[{'var',372,'A'}|[{'var',372,'B'}|[{'var',372,'C'}]]]}]}]]]]}|[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'List2'}|[{'type',373,'list',[{'var',373,'A'}]}]]]]}|[{'type',374,'constraint',[{'atom',374,'is_subtype'}|[[{'var',374,'List3'}|[{'type',374,'list',[{'var',374,'B'}]}]]]]}|[{'type',375,'constraint',[{'atom',375,'is_subtype'}|[[{'var',375,'List4'}|[{'type',375,'list',[{'var',375,'C'}]}]]]]}|[{'type',376,'constraint',[{'atom',376,'is_subtype'}|[[{'var',376,'A'}|[{'type',376,'term',[]}]]]]}|[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'B'}|[{'type',377,'term',[]}]]]]}|[{'type',378,'constraint',[{'atom',378,'is_subtype'}|[[{'var',378,'C'}|[{'type',378,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 390
		'spec' =
		    %% Line 390
		    [{{'zipwith',3},[{'type',390,'bounded_fun',[{'type',390,'fun',[{'type',390,'product',[{'var',390,'Combine'}|[{'var',390,'List1'}|[{'var',390,'List2'}]]]}|[{'var',390,'List3'}]]}|[[{'type',391,'constraint',[{'atom',391,'is_subtype'}|[[{'var',391,'Combine'}|[{'type',391,'fun',[{'type',391,'product',[{'var',391,'X'}|[{'var',391,'Y'}]]}|[{'var',391,'T'}]]}]]]]}|[{'type',392,'constraint',[{'atom',392,'is_subtype'}|[[{'var',392,'List1'}|[{'type',392,'list',[{'var',392,'X'}]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'List2'}|[{'type',393,'list',[{'var',393,'Y'}]}]]]]}|[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'List3'}|[{'type',394,'list',[{'var',394,'T'}]}]]]]}|[{'type',395,'constraint',[{'atom',395,'is_subtype'}|[[{'var',395,'X'}|[{'type',395,'term',[]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'Y'}|[{'type',396,'term',[]}]]]]}|[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'T'}|[{'type',397,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 405
		'spec' =
		    %% Line 405
		    [{{'zipwith3',4},[{'type',405,'bounded_fun',[{'type',405,'fun',[{'type',405,'product',[{'var',405,'Combine'}|[{'var',405,'List1'}|[{'var',405,'List2'}|[{'var',405,'List3'}]]]]}|[{'var',405,'List4'}]]}|[[{'type',406,'constraint',[{'atom',406,'is_subtype'}|[[{'var',406,'Combine'}|[{'type',406,'fun',[{'type',406,'product',[{'var',406,'X'}|[{'var',406,'Y'}|[{'var',406,'Z'}]]]}|[{'var',406,'T'}]]}]]]]}|[{'type',407,'constraint',[{'atom',407,'is_subtype'}|[[{'var',407,'List1'}|[{'type',407,'list',[{'var',407,'X'}]}]]]]}|[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'List2'}|[{'type',408,'list',[{'var',408,'Y'}]}]]]]}|[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'List3'}|[{'type',409,'list',[{'var',409,'Z'}]}]]]]}|[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'List4'}|[{'type',410,'list',[{'var',410,'T'}]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'X'}|[{'type',411,'term',[]}]]]]}|[{'type',412,'constraint',[{'atom',412,'is_subtype'}|[[{'var',412,'Y'}|[{'type',412,'term',[]}]]]]}|[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'Z'}|[{'type',413,'term',[]}]]]]}|[{'type',414,'constraint',[{'atom',414,'is_subtype'}|[[{'var',414,'T'}|[{'type',414,'term',[]}]]]]}]]]]]]]]]]]}]}],
		%% Line 423
		'spec' =
		    %% Line 423
		    [{{'sort',1},[{'type',423,'bounded_fun',[{'type',423,'fun',[{'type',423,'product',[{'var',423,'List1'}]}|[{'var',423,'List2'}]]}|[[{'type',424,'constraint',[{'atom',424,'is_subtype'}|[[{'var',424,'List1'}|[{'type',424,'list',[{'var',424,'T'}]}]]]]}|[{'type',425,'constraint',[{'atom',425,'is_subtype'}|[[{'var',425,'List2'}|[{'type',425,'list',[{'var',425,'T'}]}]]]]}|[{'type',426,'constraint',[{'atom',426,'is_subtype'}|[[{'var',426,'T'}|[{'type',426,'term',[]}]]]]}]]]]]}]}],
		%% Line 473
		'spec' =
		    %% Line 473
		    [{{'merge',1},[{'type',473,'bounded_fun',[{'type',473,'fun',[{'type',473,'product',[{'var',473,'ListOfLists'}]}|[{'var',473,'List1'}]]}|[[{'type',474,'constraint',[{'atom',474,'is_subtype'}|[[{'var',474,'ListOfLists'}|[{'type',474,'list',[{'var',474,'List'}]}]]]]}|[{'type',475,'constraint',[{'atom',475,'is_subtype'}|[[{'var',475,'List'}|[{'type',475,'list',[{'var',475,'T'}]}]]]]}|[{'type',476,'constraint',[{'atom',476,'is_subtype'}|[[{'var',476,'List1'}|[{'type',476,'list',[{'var',476,'T'}]}]]]]}|[{'type',477,'constraint',[{'atom',477,'is_subtype'}|[[{'var',477,'T'}|[{'type',477,'term',[]}]]]]}]]]]]]}]}],
		%% Line 485
		'spec' =
		    %% Line 485
		    [{{'merge3',3},[{'type',485,'bounded_fun',[{'type',485,'fun',[{'type',485,'product',[{'var',485,'List1'}|[{'var',485,'List2'}|[{'var',485,'List3'}]]]}|[{'var',485,'List4'}]]}|[[{'type',486,'constraint',[{'atom',486,'is_subtype'}|[[{'var',486,'List1'}|[{'type',486,'list',[{'var',486,'X'}]}]]]]}|[{'type',487,'constraint',[{'atom',487,'is_subtype'}|[[{'var',487,'List2'}|[{'type',487,'list',[{'var',487,'Y'}]}]]]]}|[{'type',488,'constraint',[{'atom',488,'is_subtype'}|[[{'var',488,'List3'}|[{'type',488,'list',[{'var',488,'Z'}]}]]]]}|[{'type',489,'constraint',[{'atom',489,'is_subtype'}|[[{'var',489,'List4'}|[{'type',489,'list',[{'paren_type',489,[{'type',489,'union',[{'var',489,'X'}|[{'var',489,'Y'}|[{'var',489,'Z'}]]]}]}]}]]]]}|[{'type',490,'constraint',[{'atom',490,'is_subtype'}|[[{'var',490,'X'}|[{'type',490,'term',[]}]]]]}|[{'type',491,'constraint',[{'atom',491,'is_subtype'}|[[{'var',491,'Y'}|[{'type',491,'term',[]}]]]]}|[{'type',492,'constraint',[{'atom',492,'is_subtype'}|[[{'var',492,'Z'}|[{'type',492,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 504
		'spec' =
		    %% Line 504
		    [{{'rmerge3',3},[{'type',504,'fun',[{'type',504,'product',[{'type',504,'list',[{'var',504,'X'}]}|[{'type',504,'list',[{'var',504,'Y'}]}|[{'type',504,'list',[{'var',504,'Z'}]}]]]}|[{'type',504,'list',[{'paren_type',504,[{'type',504,'union',[{'var',504,'X'}|[{'var',504,'Y'}|[{'var',504,'Z'}]]]}]}]}]]}]}],
		%% Line 516
		'spec' =
		    %% Line 516
		    [{{'merge',2},[{'type',516,'bounded_fun',[{'type',516,'fun',[{'type',516,'product',[{'var',516,'List1'}|[{'var',516,'List2'}]]}|[{'var',516,'List3'}]]}|[[{'type',517,'constraint',[{'atom',517,'is_subtype'}|[[{'var',517,'List1'}|[{'type',517,'list',[{'var',517,'X'}]}]]]]}|[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'List2'}|[{'type',518,'list',[{'var',518,'Y'}]}]]]]}|[{'type',519,'constraint',[{'atom',519,'is_subtype'}|[[{'var',519,'List3'}|[{'type',519,'list',[{'paren_type',519,[{'type',519,'union',[{'var',519,'X'}|[{'var',519,'Y'}]]}]}]}]]]]}|[{'type',520,'constraint',[{'atom',520,'is_subtype'}|[[{'var',520,'X'}|[{'type',520,'term',[]}]]]]}|[{'type',521,'constraint',[{'atom',521,'is_subtype'}|[[{'var',521,'Y'}|[{'type',521,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 533
		'spec' =
		    %% Line 533
		    [{{'rmerge',2},[{'type',533,'fun',[{'type',533,'product',[{'type',533,'list',[{'var',533,'X'}]}|[{'type',533,'list',[{'var',533,'Y'}]}]]}|[{'type',533,'list',[{'paren_type',533,[{'type',533,'union',[{'var',533,'X'}|[{'var',533,'Y'}]]}]}]}]]}]}],
		%% Line 544
		'spec' =
		    %% Line 544
		    [{{'concat',1},[{'type',544,'bounded_fun',[{'type',544,'fun',[{'type',544,'product',[{'var',544,'Things'}]}|[{'type',544,'string',[]}]]}|[[{'type',545,'constraint',[{'atom',545,'is_subtype'}|[[{'var',545,'Things'}|[{'type',545,'list',[{'var',545,'Thing'}]}]]]]}|[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'Thing'}|[{'type',546,'union',[{'type',546,'atom',[]}|[{'type',546,'integer',[]}|[{'type',546,'float',[]}|[{'type',546,'string',[]}]]]]}]]]]}]]]]}]}],
		%% Line 560
		'spec' =
		    %% Line 560
		    [{{'flatten',1},[{'type',560,'bounded_fun',[{'type',560,'fun',[{'type',560,'product',[{'var',560,'DeepList'}]}|[{'var',560,'List'}]]}|[[{'type',561,'constraint',[{'atom',561,'is_subtype'}|[[{'var',561,'DeepList'}|[{'type',561,'list',[{'type',561,'union',[{'type',561,'term',[]}|[{'var',561,'DeepList'}]]}]}]]]]}|[{'type',562,'constraint',[{'atom',562,'is_subtype'}|[[{'var',562,'List'}|[{'type',562,'list',[{'type',562,'term',[]}]}]]]]}]]]]}]}],
		%% Line 567
		'spec' =
		    %% Line 567
		    [{{'flatten',2},[{'type',567,'bounded_fun',[{'type',567,'fun',[{'type',567,'product',[{'var',567,'DeepList'}|[{'var',567,'Tail'}]]}|[{'var',567,'List'}]]}|[[{'type',568,'constraint',[{'atom',568,'is_subtype'}|[[{'var',568,'DeepList'}|[{'type',568,'list',[{'type',568,'union',[{'type',568,'term',[]}|[{'var',568,'DeepList'}]]}]}]]]]}|[{'type',569,'constraint',[{'atom',569,'is_subtype'}|[[{'var',569,'Tail'}|[{'type',569,'list',[{'type',569,'term',[]}]}]]]]}|[{'type',570,'constraint',[{'atom',570,'is_subtype'}|[[{'var',570,'List'}|[{'type',570,'list',[{'type',570,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 585
		'spec' =
		    %% Line 585
		    [{{'flatlength',1},[{'type',585,'bounded_fun',[{'type',585,'fun',[{'type',585,'product',[{'var',585,'DeepList'}]}|[{'type',585,'non_neg_integer',[]}]]}|[[{'type',586,'constraint',[{'atom',586,'is_subtype'}|[[{'var',586,'DeepList'}|[{'type',586,'list',[{'type',586,'union',[{'type',586,'term',[]}|[{'var',586,'DeepList'}]]}]}]]]]}]]]}]}],
		%% Line 628
		'spec' =
		    %% Line 628
		    [{{'keydelete',3},[{'type',628,'bounded_fun',[{'type',628,'fun',[{'type',628,'product',[{'var',628,'Key'}|[{'var',628,'N'}|[{'var',628,'TupleList1'}]]]}|[{'var',628,'TupleList2'}]]}|[[{'type',629,'constraint',[{'atom',629,'is_subtype'}|[[{'var',629,'Key'}|[{'type',629,'term',[]}]]]]}|[{'type',630,'constraint',[{'atom',630,'is_subtype'}|[[{'var',630,'N'}|[{'type',630,'pos_integer',[]}]]]]}|[{'type',631,'constraint',[{'atom',631,'is_subtype'}|[[{'var',631,'TupleList1'}|[{'type',631,'list',[{'var',631,'Tuple'}]}]]]]}|[{'type',632,'constraint',[{'atom',632,'is_subtype'}|[[{'var',632,'TupleList2'}|[{'type',632,'list',[{'var',632,'Tuple'}]}]]]]}|[{'type',633,'constraint',[{'atom',633,'is_subtype'}|[[{'var',633,'Tuple'}|[{'type',633,'tuple','any'}]]]]}]]]]]]]}]}],
		%% Line 643
		'spec' =
		    %% Line 643
		    [{{'keyreplace',4},[{'type',643,'bounded_fun',[{'type',643,'fun',[{'type',643,'product',[{'var',643,'Key'}|[{'var',643,'N'}|[{'var',643,'TupleList1'}|[{'var',643,'NewTuple'}]]]]}|[{'var',643,'TupleList2'}]]}|[[{'type',644,'constraint',[{'atom',644,'is_subtype'}|[[{'var',644,'Key'}|[{'type',644,'term',[]}]]]]}|[{'type',645,'constraint',[{'atom',645,'is_subtype'}|[[{'var',645,'N'}|[{'type',645,'pos_integer',[]}]]]]}|[{'type',646,'constraint',[{'atom',646,'is_subtype'}|[[{'var',646,'TupleList1'}|[{'type',646,'list',[{'var',646,'Tuple'}]}]]]]}|[{'type',647,'constraint',[{'atom',647,'is_subtype'}|[[{'var',647,'TupleList2'}|[{'type',647,'list',[{'var',647,'Tuple'}]}]]]]}|[{'type',648,'constraint',[{'atom',648,'is_subtype'}|[[{'var',648,'NewTuple'}|[{'var',648,'Tuple'}]]]]}|[{'type',649,'constraint',[{'atom',649,'is_subtype'}|[[{'var',649,'Tuple'}|[{'type',649,'tuple','any'}]]]]}]]]]]]]]}]}],
		%% Line 660
		'spec' =
		    %% Line 660
		    [{{'keytake',3},[{'type',660,'bounded_fun',[{'type',660,'fun',[{'type',660,'product',[{'var',660,'Key'}|[{'var',660,'N'}|[{'var',660,'TupleList1'}]]]}|[{'type',660,'union',[{'type',660,'tuple',[{'atom',660,'value'}|[{'var',660,'Tuple'}|[{'var',660,'TupleList2'}]]]}|[{'atom',660,'false'}]]}]]}|[[{'type',661,'constraint',[{'atom',661,'is_subtype'}|[[{'var',661,'Key'}|[{'type',661,'term',[]}]]]]}|[{'type',662,'constraint',[{'atom',662,'is_subtype'}|[[{'var',662,'N'}|[{'type',662,'pos_integer',[]}]]]]}|[{'type',663,'constraint',[{'atom',663,'is_subtype'}|[[{'var',663,'TupleList1'}|[{'type',663,'list',[{'type',663,'tuple','any'}]}]]]]}|[{'type',664,'constraint',[{'atom',664,'is_subtype'}|[[{'var',664,'TupleList2'}|[{'type',664,'list',[{'type',664,'tuple','any'}]}]]]]}|[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'Tuple'}|[{'type',665,'tuple','any'}]]]]}]]]]]]]}]}],
		%% Line 676
		'spec' =
		    %% Line 676
		    [{{'keystore',4},[{'type',676,'bounded_fun',[{'type',676,'fun',[{'type',676,'product',[{'var',676,'Key'}|[{'var',676,'N'}|[{'var',676,'TupleList1'}|[{'var',676,'NewTuple'}]]]]}|[{'var',676,'TupleList2'}]]}|[[{'type',677,'constraint',[{'atom',677,'is_subtype'}|[[{'var',677,'Key'}|[{'type',677,'term',[]}]]]]}|[{'type',678,'constraint',[{'atom',678,'is_subtype'}|[[{'var',678,'N'}|[{'type',678,'pos_integer',[]}]]]]}|[{'type',679,'constraint',[{'atom',679,'is_subtype'}|[[{'var',679,'TupleList1'}|[{'type',679,'list',[{'var',679,'Tuple'}]}]]]]}|[{'type',680,'constraint',[{'atom',680,'is_subtype'}|[[{'var',680,'TupleList2'}|[{'type',680,'nonempty_list',[{'var',680,'Tuple'}]}]]]]}|[{'type',681,'constraint',[{'atom',681,'is_subtype'}|[[{'var',681,'NewTuple'}|[{'var',681,'Tuple'}]]]]}|[{'type',682,'constraint',[{'atom',682,'is_subtype'}|[[{'var',682,'Tuple'}|[{'type',682,'tuple','any'}]]]]}]]]]]]]]}]}],
		%% Line 694
		'spec' =
		    %% Line 694
		    [{{'keysort',2},[{'type',694,'bounded_fun',[{'type',694,'fun',[{'type',694,'product',[{'var',694,'N'}|[{'var',694,'TupleList1'}]]}|[{'var',694,'TupleList2'}]]}|[[{'type',695,'constraint',[{'atom',695,'is_subtype'}|[[{'var',695,'N'}|[{'type',695,'pos_integer',[]}]]]]}|[{'type',696,'constraint',[{'atom',696,'is_subtype'}|[[{'var',696,'TupleList1'}|[{'type',696,'list',[{'var',696,'Tuple'}]}]]]]}|[{'type',697,'constraint',[{'atom',697,'is_subtype'}|[[{'var',697,'TupleList2'}|[{'type',697,'list',[{'var',697,'Tuple'}]}]]]]}|[{'type',698,'constraint',[{'atom',698,'is_subtype'}|[[{'var',698,'Tuple'}|[{'type',698,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 755
		'spec' =
		    %% Line 755
		    [{{'keymerge',3},[{'type',755,'bounded_fun',[{'type',755,'fun',[{'type',755,'product',[{'var',755,'N'}|[{'var',755,'TupleList1'}|[{'var',755,'TupleList2'}]]]}|[{'var',755,'TupleList3'}]]}|[[{'type',756,'constraint',[{'atom',756,'is_subtype'}|[[{'var',756,'N'}|[{'type',756,'pos_integer',[]}]]]]}|[{'type',757,'constraint',[{'atom',757,'is_subtype'}|[[{'var',757,'TupleList1'}|[{'type',757,'list',[{'var',757,'T1'}]}]]]]}|[{'type',758,'constraint',[{'atom',758,'is_subtype'}|[[{'var',758,'TupleList2'}|[{'type',758,'list',[{'var',758,'T2'}]}]]]]}|[{'type',759,'constraint',[{'atom',759,'is_subtype'}|[[{'var',759,'TupleList3'}|[{'type',759,'list',[{'paren_type',759,[{'type',759,'union',[{'var',759,'T1'}|[{'var',759,'T2'}]]}]}]}]]]]}|[{'type',760,'constraint',[{'atom',760,'is_subtype'}|[[{'var',760,'T1'}|[{'var',760,'Tuple'}]]]]}|[{'type',761,'constraint',[{'atom',761,'is_subtype'}|[[{'var',761,'T2'}|[{'var',761,'Tuple'}]]]]}|[{'type',762,'constraint',[{'atom',762,'is_subtype'}|[[{'var',762,'Tuple'}|[{'type',762,'tuple','any'}]]]]}]]]]]]]]]}]}],
		%% Line 776
		'spec' =
		    %% Line 776
		    [{{'rkeymerge',3},[{'type',776,'bounded_fun',[{'type',776,'fun',[{'type',776,'product',[{'type',776,'pos_integer',[]}|[{'type',776,'list',[{'var',776,'X'}]}|[{'type',776,'list',[{'var',776,'Y'}]}]]]}|[{'type',777,'list',[{'var',777,'R'}]}]]}|[[{'type',777,'constraint',[{'atom',777,'is_subtype'}|[[{'var',777,'X'}|[{'type',777,'tuple','any'}]]]]}|[{'type',777,'constraint',[{'atom',777,'is_subtype'}|[[{'var',777,'Y'}|[{'type',777,'tuple','any'}]]]]}|[{'type',777,'constraint',[{'atom',777,'is_subtype'}|[[{'var',777,'R'}|[{'type',777,'tuple','any'}]]]]}]]]]]}]}],
		%% Line 789
		'spec' =
		    %% Line 789
		    [{{'ukeysort',2},[{'type',789,'bounded_fun',[{'type',789,'fun',[{'type',789,'product',[{'var',789,'N'}|[{'var',789,'TupleList1'}]]}|[{'var',789,'TupleList2'}]]}|[[{'type',790,'constraint',[{'atom',790,'is_subtype'}|[[{'var',790,'N'}|[{'type',790,'pos_integer',[]}]]]]}|[{'type',791,'constraint',[{'atom',791,'is_subtype'}|[[{'var',791,'TupleList1'}|[{'type',791,'list',[{'var',791,'Tuple'}]}]]]]}|[{'type',792,'constraint',[{'atom',792,'is_subtype'}|[[{'var',792,'TupleList2'}|[{'type',792,'list',[{'var',792,'Tuple'}]}]]]]}|[{'type',793,'constraint',[{'atom',793,'is_subtype'}|[[{'var',793,'Tuple'}|[{'type',793,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 858
		'spec' =
		    %% Line 858
		    [{{'ukeymerge',3},[{'type',858,'bounded_fun',[{'type',858,'fun',[{'type',858,'product',[{'var',858,'N'}|[{'var',858,'TupleList1'}|[{'var',858,'TupleList2'}]]]}|[{'var',858,'TupleList3'}]]}|[[{'type',859,'constraint',[{'atom',859,'is_subtype'}|[[{'var',859,'N'}|[{'type',859,'pos_integer',[]}]]]]}|[{'type',860,'constraint',[{'atom',860,'is_subtype'}|[[{'var',860,'TupleList1'}|[{'type',860,'list',[{'var',860,'T1'}]}]]]]}|[{'type',861,'constraint',[{'atom',861,'is_subtype'}|[[{'var',861,'TupleList2'}|[{'type',861,'list',[{'var',861,'T2'}]}]]]]}|[{'type',862,'constraint',[{'atom',862,'is_subtype'}|[[{'var',862,'TupleList3'}|[{'type',862,'list',[{'paren_type',862,[{'type',862,'union',[{'var',862,'T1'}|[{'var',862,'T2'}]]}]}]}]]]]}|[{'type',863,'constraint',[{'atom',863,'is_subtype'}|[[{'var',863,'T1'}|[{'var',863,'Tuple'}]]]]}|[{'type',864,'constraint',[{'atom',864,'is_subtype'}|[[{'var',864,'T2'}|[{'var',864,'Tuple'}]]]]}|[{'type',865,'constraint',[{'atom',865,'is_subtype'}|[[{'var',865,'Tuple'}|[{'type',865,'tuple','any'}]]]]}]]]]]]]]]}]}],
		%% Line 879
		'spec' =
		    %% Line 879
		    [{{'rukeymerge',3},[{'type',879,'bounded_fun',[{'type',879,'fun',[{'type',879,'product',[{'type',879,'pos_integer',[]}|[{'type',879,'list',[{'var',879,'X'}]}|[{'type',879,'list',[{'var',879,'Y'}]}]]]}|[{'type',880,'list',[{'paren_type',880,[{'type',880,'union',[{'var',880,'X'}|[{'var',880,'Y'}]]}]}]}]]}|[[{'type',880,'constraint',[{'atom',880,'is_subtype'}|[[{'var',880,'X'}|[{'type',880,'tuple','any'}]]]]}|[{'type',880,'constraint',[{'atom',880,'is_subtype'}|[[{'var',880,'Y'}|[{'type',880,'tuple','any'}]]]]}]]]]}]}],
		%% Line 892
		'spec' =
		    %% Line 892
		    [{{'keymap',3},[{'type',892,'bounded_fun',[{'type',892,'fun',[{'type',892,'product',[{'var',892,'Fun'}|[{'var',892,'N'}|[{'var',892,'TupleList1'}]]]}|[{'var',892,'TupleList2'}]]}|[[{'type',893,'constraint',[{'atom',893,'is_subtype'}|[[{'var',893,'Fun'}|[{'type',893,'fun',[{'type',893,'product',[{'ann_type',893,[{'var',893,'Term1'}|[{'type',893,'term',[]}]]}]}|[{'ann_type',893,[{'var',893,'Term2'}|[{'type',893,'term',[]}]]}]]}]]]]}|[{'type',894,'constraint',[{'atom',894,'is_subtype'}|[[{'var',894,'N'}|[{'type',894,'pos_integer',[]}]]]]}|[{'type',895,'constraint',[{'atom',895,'is_subtype'}|[[{'var',895,'TupleList1'}|[{'type',895,'list',[{'var',895,'Tuple'}]}]]]]}|[{'type',896,'constraint',[{'atom',896,'is_subtype'}|[[{'var',896,'TupleList2'}|[{'type',896,'list',[{'var',896,'Tuple'}]}]]]]}|[{'type',897,'constraint',[{'atom',897,'is_subtype'}|[[{'var',897,'Tuple'}|[{'type',897,'tuple','any'}]]]]}]]]]]]]}]}],
		%% Line 906
		'spec' =
		    %% Line 906
		    [{{'sort',2},[{'type',906,'bounded_fun',[{'type',906,'fun',[{'type',906,'product',[{'var',906,'Fun'}|[{'var',906,'List1'}]]}|[{'var',906,'List2'}]]}|[[{'type',907,'constraint',[{'atom',907,'is_subtype'}|[[{'var',907,'Fun'}|[{'type',907,'fun',[{'type',907,'product',[{'ann_type',907,[{'var',907,'A'}|[{'var',907,'T'}]]}|[{'ann_type',907,[{'var',907,'B'}|[{'var',907,'T'}]]}]]}|[{'type',907,'boolean',[]}]]}]]]]}|[{'type',908,'constraint',[{'atom',908,'is_subtype'}|[[{'var',908,'List1'}|[{'type',908,'list',[{'var',908,'T'}]}]]]]}|[{'type',909,'constraint',[{'atom',909,'is_subtype'}|[[{'var',909,'List2'}|[{'type',909,'list',[{'var',909,'T'}]}]]]]}|[{'type',910,'constraint',[{'atom',910,'is_subtype'}|[[{'var',910,'T'}|[{'type',910,'term',[]}]]]]}]]]]]]}]}],
		%% Line 924
		'spec' =
		    %% Line 924
		    [{{'merge',3},[{'type',924,'bounded_fun',[{'type',924,'fun',[{'type',924,'product',[{'var',924,'Fun'}|[{'var',924,'List1'}|[{'var',924,'List2'}]]]}|[{'var',924,'List3'}]]}|[[{'type',925,'constraint',[{'atom',925,'is_subtype'}|[[{'var',925,'Fun'}|[{'type',925,'fun',[{'type',925,'product',[{'var',925,'A'}|[{'var',925,'B'}]]}|[{'type',925,'boolean',[]}]]}]]]]}|[{'type',926,'constraint',[{'atom',926,'is_subtype'}|[[{'var',926,'List1'}|[{'type',926,'list',[{'var',926,'A'}]}]]]]}|[{'type',927,'constraint',[{'atom',927,'is_subtype'}|[[{'var',927,'List2'}|[{'type',927,'list',[{'var',927,'B'}]}]]]]}|[{'type',928,'constraint',[{'atom',928,'is_subtype'}|[[{'var',928,'List3'}|[{'type',928,'list',[{'paren_type',928,[{'type',928,'union',[{'var',928,'A'}|[{'var',928,'B'}]]}]}]}]]]]}|[{'type',929,'constraint',[{'atom',929,'is_subtype'}|[[{'var',929,'A'}|[{'type',929,'term',[]}]]]]}|[{'type',930,'constraint',[{'atom',930,'is_subtype'}|[[{'var',930,'B'}|[{'type',930,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 939
		'spec' =
		    %% Line 939
		    [{{'rmerge',3},[{'type',939,'fun',[{'type',939,'product',[{'type',939,'fun',[{'type',939,'product',[{'var',939,'X'}|[{'var',939,'Y'}]]}|[{'type',939,'boolean',[]}]]}|[{'type',939,'list',[{'var',939,'X'}]}|[{'type',939,'list',[{'var',939,'Y'}]}]]]}|[{'type',939,'list',[{'paren_type',939,[{'type',939,'union',[{'var',939,'X'}|[{'var',939,'Y'}]]}]}]}]]}]}],
		%% Line 946
		'spec' =
		    %% Line 946
		    [{{'usort',2},[{'type',946,'bounded_fun',[{'type',946,'fun',[{'type',946,'product',[{'var',946,'Fun'}|[{'var',946,'List1'}]]}|[{'var',946,'List2'}]]}|[[{'type',947,'constraint',[{'atom',947,'is_subtype'}|[[{'var',947,'Fun'}|[{'type',947,'fun',[{'type',947,'product',[{'var',947,'T'}|[{'var',947,'T'}]]}|[{'type',947,'boolean',[]}]]}]]]]}|[{'type',948,'constraint',[{'atom',948,'is_subtype'}|[[{'var',948,'List1'}|[{'type',948,'list',[{'var',948,'T'}]}]]]]}|[{'type',949,'constraint',[{'atom',949,'is_subtype'}|[[{'var',949,'List2'}|[{'type',949,'list',[{'var',949,'T'}]}]]]]}|[{'type',950,'constraint',[{'atom',950,'is_subtype'}|[[{'var',950,'T'}|[{'type',950,'term',[]}]]]]}]]]]]]}]}],
		%% Line 977
		'spec' =
		    %% Line 977
		    [{{'umerge',3},[{'type',977,'bounded_fun',[{'type',977,'fun',[{'type',977,'product',[{'var',977,'Fun'}|[{'var',977,'List1'}|[{'var',977,'List2'}]]]}|[{'var',977,'List3'}]]}|[[{'type',978,'constraint',[{'atom',978,'is_subtype'}|[[{'var',978,'Fun'}|[{'type',978,'fun',[{'type',978,'product',[{'var',978,'A'}|[{'var',978,'B'}]]}|[{'type',978,'boolean',[]}]]}]]]]}|[{'type',979,'constraint',[{'atom',979,'is_subtype'}|[[{'var',979,'List1'}|[{'type',979,'list',[{'var',979,'A'}]}]]]]}|[{'type',980,'constraint',[{'atom',980,'is_subtype'}|[[{'var',980,'List2'}|[{'type',980,'list',[{'var',980,'B'}]}]]]]}|[{'type',981,'constraint',[{'atom',981,'is_subtype'}|[[{'var',981,'List3'}|[{'type',981,'list',[{'paren_type',981,[{'type',981,'union',[{'var',981,'A'}|[{'var',981,'B'}]]}]}]}]]]]}|[{'type',982,'constraint',[{'atom',982,'is_subtype'}|[[{'var',982,'A'}|[{'type',982,'term',[]}]]]]}|[{'type',983,'constraint',[{'atom',983,'is_subtype'}|[[{'var',983,'B'}|[{'type',983,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 992
		'spec' =
		    %% Line 992
		    [{{'rumerge',3},[{'type',992,'fun',[{'type',992,'product',[{'type',992,'fun',[{'type',992,'product',[{'var',992,'X'}|[{'var',992,'Y'}]]}|[{'type',992,'boolean',[]}]]}|[{'type',992,'list',[{'var',992,'X'}]}|[{'type',992,'list',[{'var',992,'Y'}]}]]]}|[{'type',992,'list',[{'paren_type',992,[{'type',992,'union',[{'var',992,'X'}|[{'var',992,'Y'}]]}]}]}]]}]}],
		%% Line 1002
		'spec' =
		    %% Line 1002
		    [{{'usort',1},[{'type',1002,'bounded_fun',[{'type',1002,'fun',[{'type',1002,'product',[{'var',1002,'List1'}]}|[{'var',1002,'List2'}]]}|[[{'type',1003,'constraint',[{'atom',1003,'is_subtype'}|[[{'var',1003,'List1'}|[{'type',1003,'list',[{'var',1003,'T'}]}]]]]}|[{'type',1004,'constraint',[{'atom',1004,'is_subtype'}|[[{'var',1004,'List2'}|[{'type',1004,'list',[{'var',1004,'T'}]}]]]]}|[{'type',1005,'constraint',[{'atom',1005,'is_subtype'}|[[{'var',1005,'T'}|[{'type',1005,'term',[]}]]]]}]]]]]}]}],
		%% Line 1060
		'spec' =
		    %% Line 1060
		    [{{'umerge',1},[{'type',1060,'bounded_fun',[{'type',1060,'fun',[{'type',1060,'product',[{'var',1060,'ListOfLists'}]}|[{'var',1060,'List1'}]]}|[[{'type',1061,'constraint',[{'atom',1061,'is_subtype'}|[[{'var',1061,'ListOfLists'}|[{'type',1061,'list',[{'var',1061,'List'}]}]]]]}|[{'type',1062,'constraint',[{'atom',1062,'is_subtype'}|[[{'var',1062,'List'}|[{'type',1062,'list',[{'var',1062,'T'}]}]]]]}|[{'type',1063,'constraint',[{'atom',1063,'is_subtype'}|[[{'var',1063,'List1'}|[{'type',1063,'list',[{'var',1063,'T'}]}]]]]}|[{'type',1064,'constraint',[{'atom',1064,'is_subtype'}|[[{'var',1064,'T'}|[{'type',1064,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1073
		'spec' =
		    %% Line 1073
		    [{{'umerge3',3},[{'type',1073,'bounded_fun',[{'type',1073,'fun',[{'type',1073,'product',[{'var',1073,'List1'}|[{'var',1073,'List2'}|[{'var',1073,'List3'}]]]}|[{'var',1073,'List4'}]]}|[[{'type',1074,'constraint',[{'atom',1074,'is_subtype'}|[[{'var',1074,'List1'}|[{'type',1074,'list',[{'var',1074,'X'}]}]]]]}|[{'type',1075,'constraint',[{'atom',1075,'is_subtype'}|[[{'var',1075,'List2'}|[{'type',1075,'list',[{'var',1075,'Y'}]}]]]]}|[{'type',1076,'constraint',[{'atom',1076,'is_subtype'}|[[{'var',1076,'List3'}|[{'type',1076,'list',[{'var',1076,'Z'}]}]]]]}|[{'type',1077,'constraint',[{'atom',1077,'is_subtype'}|[[{'var',1077,'List4'}|[{'type',1077,'list',[{'paren_type',1077,[{'type',1077,'union',[{'var',1077,'X'}|[{'var',1077,'Y'}|[{'var',1077,'Z'}]]]}]}]}]]]]}|[{'type',1078,'constraint',[{'atom',1078,'is_subtype'}|[[{'var',1078,'X'}|[{'type',1078,'term',[]}]]]]}|[{'type',1079,'constraint',[{'atom',1079,'is_subtype'}|[[{'var',1079,'Y'}|[{'type',1079,'term',[]}]]]]}|[{'type',1080,'constraint',[{'atom',1080,'is_subtype'}|[[{'var',1080,'Z'}|[{'type',1080,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1093
		'spec' =
		    %% Line 1093
		    [{{'rumerge3',3},[{'type',1093,'fun',[{'type',1093,'product',[{'type',1093,'list',[{'var',1093,'X'}]}|[{'type',1093,'list',[{'var',1093,'Y'}]}|[{'type',1093,'list',[{'var',1093,'Z'}]}]]]}|[{'type',1093,'list',[{'paren_type',1093,[{'type',1093,'union',[{'var',1093,'X'}|[{'var',1093,'Y'}|[{'var',1093,'Z'}]]]}]}]}]]}]}],
		%% Line 1105
		'spec' =
		    %% Line 1105
		    [{{'umerge',2},[{'type',1105,'bounded_fun',[{'type',1105,'fun',[{'type',1105,'product',[{'var',1105,'List1'}|[{'var',1105,'List2'}]]}|[{'var',1105,'List3'}]]}|[[{'type',1106,'constraint',[{'atom',1106,'is_subtype'}|[[{'var',1106,'List1'}|[{'type',1106,'list',[{'var',1106,'X'}]}]]]]}|[{'type',1107,'constraint',[{'atom',1107,'is_subtype'}|[[{'var',1107,'List2'}|[{'type',1107,'list',[{'var',1107,'Y'}]}]]]]}|[{'type',1108,'constraint',[{'atom',1108,'is_subtype'}|[[{'var',1108,'List3'}|[{'type',1108,'list',[{'paren_type',1108,[{'type',1108,'union',[{'var',1108,'X'}|[{'var',1108,'Y'}]]}]}]}]]]]}|[{'type',1109,'constraint',[{'atom',1109,'is_subtype'}|[[{'var',1109,'X'}|[{'type',1109,'term',[]}]]]]}|[{'type',1110,'constraint',[{'atom',1110,'is_subtype'}|[[{'var',1110,'Y'}|[{'type',1110,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1123
		'spec' =
		    %% Line 1123
		    [{{'rumerge',2},[{'type',1123,'fun',[{'type',1123,'product',[{'type',1123,'list',[{'var',1123,'X'}]}|[{'type',1123,'list',[{'var',1123,'Y'}]}]]}|[{'type',1123,'list',[{'paren_type',1123,[{'type',1123,'union',[{'var',1123,'X'}|[{'var',1123,'Y'}]]}]}]}]]}]}],
		%% Line 1155
		'spec' =
		    %% Line 1155
		    [{{'all',2},[{'type',1155,'bounded_fun',[{'type',1155,'fun',[{'type',1155,'product',[{'var',1155,'Pred'}|[{'var',1155,'List'}]]}|[{'type',1155,'boolean',[]}]]}|[[{'type',1156,'constraint',[{'atom',1156,'is_subtype'}|[[{'var',1156,'Pred'}|[{'type',1156,'fun',[{'type',1156,'product',[{'ann_type',1156,[{'var',1156,'Elem'}|[{'var',1156,'T'}]]}]}|[{'type',1156,'boolean',[]}]]}]]]]}|[{'type',1157,'constraint',[{'atom',1157,'is_subtype'}|[[{'var',1157,'List'}|[{'type',1157,'list',[{'var',1157,'T'}]}]]]]}|[{'type',1158,'constraint',[{'atom',1158,'is_subtype'}|[[{'var',1158,'T'}|[{'type',1158,'term',[]}]]]]}]]]]]}]}],
		%% Line 1167
		'spec' =
		    %% Line 1167
		    [{{'any',2},[{'type',1167,'bounded_fun',[{'type',1167,'fun',[{'type',1167,'product',[{'var',1167,'Pred'}|[{'var',1167,'List'}]]}|[{'type',1167,'boolean',[]}]]}|[[{'type',1168,'constraint',[{'atom',1168,'is_subtype'}|[[{'var',1168,'Pred'}|[{'type',1168,'fun',[{'type',1168,'product',[{'ann_type',1168,[{'var',1168,'Elem'}|[{'var',1168,'T'}]]}]}|[{'type',1168,'boolean',[]}]]}]]]]}|[{'type',1169,'constraint',[{'atom',1169,'is_subtype'}|[[{'var',1169,'List'}|[{'type',1169,'list',[{'var',1169,'T'}]}]]]]}|[{'type',1170,'constraint',[{'atom',1170,'is_subtype'}|[[{'var',1170,'T'}|[{'type',1170,'term',[]}]]]]}]]]]]}]}],
		%% Line 1179
		'spec' =
		    %% Line 1179
		    [{{'map',2},[{'type',1179,'bounded_fun',[{'type',1179,'fun',[{'type',1179,'product',[{'var',1179,'Fun'}|[{'var',1179,'List1'}]]}|[{'var',1179,'List2'}]]}|[[{'type',1180,'constraint',[{'atom',1180,'is_subtype'}|[[{'var',1180,'Fun'}|[{'type',1180,'fun',[{'type',1180,'product',[{'var',1180,'A'}]}|[{'var',1180,'B'}]]}]]]]}|[{'type',1181,'constraint',[{'atom',1181,'is_subtype'}|[[{'var',1181,'List1'}|[{'type',1181,'list',[{'var',1181,'A'}]}]]]]}|[{'type',1182,'constraint',[{'atom',1182,'is_subtype'}|[[{'var',1182,'List2'}|[{'type',1182,'list',[{'var',1182,'B'}]}]]]]}|[{'type',1183,'constraint',[{'atom',1183,'is_subtype'}|[[{'var',1183,'A'}|[{'type',1183,'term',[]}]]]]}|[{'type',1184,'constraint',[{'atom',1184,'is_subtype'}|[[{'var',1184,'B'}|[{'type',1184,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1190
		'spec' =
		    %% Line 1190
		    [{{'flatmap',2},[{'type',1190,'bounded_fun',[{'type',1190,'fun',[{'type',1190,'product',[{'var',1190,'Fun'}|[{'var',1190,'List1'}]]}|[{'var',1190,'List2'}]]}|[[{'type',1191,'constraint',[{'atom',1191,'is_subtype'}|[[{'var',1191,'Fun'}|[{'type',1191,'fun',[{'type',1191,'product',[{'var',1191,'A'}]}|[{'type',1191,'list',[{'var',1191,'B'}]}]]}]]]]}|[{'type',1192,'constraint',[{'atom',1192,'is_subtype'}|[[{'var',1192,'List1'}|[{'type',1192,'list',[{'var',1192,'A'}]}]]]]}|[{'type',1193,'constraint',[{'atom',1193,'is_subtype'}|[[{'var',1193,'List2'}|[{'type',1193,'list',[{'var',1193,'B'}]}]]]]}|[{'type',1194,'constraint',[{'atom',1194,'is_subtype'}|[[{'var',1194,'A'}|[{'type',1194,'term',[]}]]]]}|[{'type',1195,'constraint',[{'atom',1195,'is_subtype'}|[[{'var',1195,'B'}|[{'type',1195,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1201
		'spec' =
		    %% Line 1201
		    [{{'foldl',3},[{'type',1201,'bounded_fun',[{'type',1201,'fun',[{'type',1201,'product',[{'var',1201,'Fun'}|[{'var',1201,'Acc0'}|[{'var',1201,'List'}]]]}|[{'var',1201,'Acc1'}]]}|[[{'type',1202,'constraint',[{'atom',1202,'is_subtype'}|[[{'var',1202,'Fun'}|[{'type',1202,'fun',[{'type',1202,'product',[{'ann_type',1202,[{'var',1202,'Elem'}|[{'var',1202,'T'}]]}|[{'var',1202,'AccIn'}]]}|[{'var',1202,'AccOut'}]]}]]]]}|[{'type',1203,'constraint',[{'atom',1203,'is_subtype'}|[[{'var',1203,'Acc0'}|[{'type',1203,'term',[]}]]]]}|[{'type',1204,'constraint',[{'atom',1204,'is_subtype'}|[[{'var',1204,'Acc1'}|[{'type',1204,'term',[]}]]]]}|[{'type',1205,'constraint',[{'atom',1205,'is_subtype'}|[[{'var',1205,'AccIn'}|[{'type',1205,'term',[]}]]]]}|[{'type',1206,'constraint',[{'atom',1206,'is_subtype'}|[[{'var',1206,'AccOut'}|[{'type',1206,'term',[]}]]]]}|[{'type',1207,'constraint',[{'atom',1207,'is_subtype'}|[[{'var',1207,'List'}|[{'type',1207,'list',[{'var',1207,'T'}]}]]]]}|[{'type',1208,'constraint',[{'atom',1208,'is_subtype'}|[[{'var',1208,'T'}|[{'type',1208,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1214
		'spec' =
		    %% Line 1214
		    [{{'foldr',3},[{'type',1214,'bounded_fun',[{'type',1214,'fun',[{'type',1214,'product',[{'var',1214,'Fun'}|[{'var',1214,'Acc0'}|[{'var',1214,'List'}]]]}|[{'var',1214,'Acc1'}]]}|[[{'type',1215,'constraint',[{'atom',1215,'is_subtype'}|[[{'var',1215,'Fun'}|[{'type',1215,'fun',[{'type',1215,'product',[{'ann_type',1215,[{'var',1215,'Elem'}|[{'var',1215,'T'}]]}|[{'var',1215,'AccIn'}]]}|[{'var',1215,'AccOut'}]]}]]]]}|[{'type',1216,'constraint',[{'atom',1216,'is_subtype'}|[[{'var',1216,'Acc0'}|[{'type',1216,'term',[]}]]]]}|[{'type',1217,'constraint',[{'atom',1217,'is_subtype'}|[[{'var',1217,'Acc1'}|[{'type',1217,'term',[]}]]]]}|[{'type',1218,'constraint',[{'atom',1218,'is_subtype'}|[[{'var',1218,'AccIn'}|[{'type',1218,'term',[]}]]]]}|[{'type',1219,'constraint',[{'atom',1219,'is_subtype'}|[[{'var',1219,'AccOut'}|[{'type',1219,'term',[]}]]]]}|[{'type',1220,'constraint',[{'atom',1220,'is_subtype'}|[[{'var',1220,'List'}|[{'type',1220,'list',[{'var',1220,'T'}]}]]]]}|[{'type',1221,'constraint',[{'atom',1221,'is_subtype'}|[[{'var',1221,'T'}|[{'type',1221,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1227
		'spec' =
		    %% Line 1227
		    [{{'filter',2},[{'type',1227,'bounded_fun',[{'type',1227,'fun',[{'type',1227,'product',[{'var',1227,'Pred'}|[{'var',1227,'List1'}]]}|[{'var',1227,'List2'}]]}|[[{'type',1228,'constraint',[{'atom',1228,'is_subtype'}|[[{'var',1228,'Pred'}|[{'type',1228,'fun',[{'type',1228,'product',[{'ann_type',1228,[{'var',1228,'Elem'}|[{'var',1228,'T'}]]}]}|[{'type',1228,'boolean',[]}]]}]]]]}|[{'type',1229,'constraint',[{'atom',1229,'is_subtype'}|[[{'var',1229,'List1'}|[{'type',1229,'list',[{'var',1229,'T'}]}]]]]}|[{'type',1230,'constraint',[{'atom',1230,'is_subtype'}|[[{'var',1230,'List2'}|[{'type',1230,'list',[{'var',1230,'T'}]}]]]]}|[{'type',1231,'constraint',[{'atom',1231,'is_subtype'}|[[{'var',1231,'T'}|[{'type',1231,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1239
		'spec' =
		    %% Line 1239
		    [{{'partition',2},[{'type',1239,'bounded_fun',[{'type',1239,'fun',[{'type',1239,'product',[{'var',1239,'Pred'}|[{'var',1239,'List'}]]}|[{'type',1239,'tuple',[{'var',1239,'Satisfying'}|[{'var',1239,'NotSatisfying'}]]}]]}|[[{'type',1240,'constraint',[{'atom',1240,'is_subtype'}|[[{'var',1240,'Pred'}|[{'type',1240,'fun',[{'type',1240,'product',[{'ann_type',1240,[{'var',1240,'Elem'}|[{'var',1240,'T'}]]}]}|[{'type',1240,'boolean',[]}]]}]]]]}|[{'type',1241,'constraint',[{'atom',1241,'is_subtype'}|[[{'var',1241,'List'}|[{'type',1241,'list',[{'var',1241,'T'}]}]]]]}|[{'type',1242,'constraint',[{'atom',1242,'is_subtype'}|[[{'var',1242,'Satisfying'}|[{'type',1242,'list',[{'var',1242,'T'}]}]]]]}|[{'type',1243,'constraint',[{'atom',1243,'is_subtype'}|[[{'var',1243,'NotSatisfying'}|[{'type',1243,'list',[{'var',1243,'T'}]}]]]]}|[{'type',1244,'constraint',[{'atom',1244,'is_subtype'}|[[{'var',1244,'T'}|[{'type',1244,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1257
		'spec' =
		    %% Line 1257
		    [{{'filtermap',2},[{'type',1257,'bounded_fun',[{'type',1257,'fun',[{'type',1257,'product',[{'var',1257,'Fun'}|[{'var',1257,'List1'}]]}|[{'var',1257,'List2'}]]}|[[{'type',1258,'constraint',[{'atom',1258,'is_subtype'}|[[{'var',1258,'Fun'}|[{'type',1258,'fun',[{'type',1258,'product',[{'var',1258,'Elem'}]}|[{'type',1258,'union',[{'type',1258,'boolean',[]}|[{'type',1258,'tuple',[{'atom',1258,'true'}|[{'var',1258,'Value'}]]}]]}]]}]]]]}|[{'type',1259,'constraint',[{'atom',1259,'is_subtype'}|[[{'var',1259,'List1'}|[{'type',1259,'list',[{'var',1259,'Elem'}]}]]]]}|[{'type',1260,'constraint',[{'atom',1260,'is_subtype'}|[[{'var',1260,'List2'}|[{'type',1260,'list',[{'type',1260,'union',[{'var',1260,'Elem'}|[{'var',1260,'Value'}]]}]}]]]]}|[{'type',1261,'constraint',[{'atom',1261,'is_subtype'}|[[{'var',1261,'Elem'}|[{'type',1261,'term',[]}]]]]}|[{'type',1262,'constraint',[{'atom',1262,'is_subtype'}|[[{'var',1262,'Value'}|[{'type',1262,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1275
		'spec' =
		    %% Line 1275
		    [{{'zf',2},[{'type',1275,'fun',[{'type',1275,'product',[{'type',1275,'fun',[{'type',1275,'product',[{'var',1275,'T'}]}|[{'type',1275,'union',[{'type',1275,'boolean',[]}|[{'type',1275,'tuple',[{'atom',1275,'true'}|[{'var',1275,'X'}]]}]]}]]}|[{'type',1275,'list',[{'var',1275,'T'}]}]]}|[{'type',1275,'list',[{'paren_type',1275,[{'type',1275,'union',[{'var',1275,'T'}|[{'var',1275,'X'}]]}]}]}]]}]}],
		%% Line 1280
		'spec' =
		    %% Line 1280
		    [{{'foreach',2},[{'type',1280,'bounded_fun',[{'type',1280,'fun',[{'type',1280,'product',[{'var',1280,'Fun'}|[{'var',1280,'List'}]]}|[{'atom',1280,'ok'}]]}|[[{'type',1281,'constraint',[{'atom',1281,'is_subtype'}|[[{'var',1281,'Fun'}|[{'type',1281,'fun',[{'type',1281,'product',[{'ann_type',1281,[{'var',1281,'Elem'}|[{'var',1281,'T'}]]}]}|[{'type',1281,'term',[]}]]}]]]]}|[{'type',1282,'constraint',[{'atom',1282,'is_subtype'}|[[{'var',1282,'List'}|[{'type',1282,'list',[{'var',1282,'T'}]}]]]]}|[{'type',1283,'constraint',[{'atom',1283,'is_subtype'}|[[{'var',1283,'T'}|[{'type',1283,'term',[]}]]]]}]]]]]}]}],
		%% Line 1290
		'spec' =
		    %% Line 1290
		    [{{'mapfoldl',3},[{'type',1290,'bounded_fun',[{'type',1290,'fun',[{'type',1290,'product',[{'var',1290,'Fun'}|[{'var',1290,'Acc0'}|[{'var',1290,'List1'}]]]}|[{'type',1290,'tuple',[{'var',1290,'List2'}|[{'var',1290,'Acc1'}]]}]]}|[[{'type',1291,'constraint',[{'atom',1291,'is_subtype'}|[[{'var',1291,'Fun'}|[{'type',1291,'fun',[{'type',1291,'product',[{'var',1291,'A'}|[{'var',1291,'AccIn'}]]}|[{'type',1291,'tuple',[{'var',1291,'B'}|[{'var',1291,'AccOut'}]]}]]}]]]]}|[{'type',1292,'constraint',[{'atom',1292,'is_subtype'}|[[{'var',1292,'Acc0'}|[{'type',1292,'term',[]}]]]]}|[{'type',1293,'constraint',[{'atom',1293,'is_subtype'}|[[{'var',1293,'Acc1'}|[{'type',1293,'term',[]}]]]]}|[{'type',1294,'constraint',[{'atom',1294,'is_subtype'}|[[{'var',1294,'AccIn'}|[{'type',1294,'term',[]}]]]]}|[{'type',1295,'constraint',[{'atom',1295,'is_subtype'}|[[{'var',1295,'AccOut'}|[{'type',1295,'term',[]}]]]]}|[{'type',1296,'constraint',[{'atom',1296,'is_subtype'}|[[{'var',1296,'List1'}|[{'type',1296,'list',[{'var',1296,'A'}]}]]]]}|[{'type',1297,'constraint',[{'atom',1297,'is_subtype'}|[[{'var',1297,'List2'}|[{'type',1297,'list',[{'var',1297,'B'}]}]]]]}|[{'type',1298,'constraint',[{'atom',1298,'is_subtype'}|[[{'var',1298,'A'}|[{'type',1298,'term',[]}]]]]}|[{'type',1299,'constraint',[{'atom',1299,'is_subtype'}|[[{'var',1299,'B'}|[{'type',1299,'term',[]}]]]]}]]]]]]]]]]]}]}],
		%% Line 1307
		'spec' =
		    %% Line 1307
		    [{{'mapfoldr',3},[{'type',1307,'bounded_fun',[{'type',1307,'fun',[{'type',1307,'product',[{'var',1307,'Fun'}|[{'var',1307,'Acc0'}|[{'var',1307,'List1'}]]]}|[{'type',1307,'tuple',[{'var',1307,'List2'}|[{'var',1307,'Acc1'}]]}]]}|[[{'type',1308,'constraint',[{'atom',1308,'is_subtype'}|[[{'var',1308,'Fun'}|[{'type',1308,'fun',[{'type',1308,'product',[{'var',1308,'A'}|[{'var',1308,'AccIn'}]]}|[{'type',1308,'tuple',[{'var',1308,'B'}|[{'var',1308,'AccOut'}]]}]]}]]]]}|[{'type',1309,'constraint',[{'atom',1309,'is_subtype'}|[[{'var',1309,'Acc0'}|[{'type',1309,'term',[]}]]]]}|[{'type',1310,'constraint',[{'atom',1310,'is_subtype'}|[[{'var',1310,'Acc1'}|[{'type',1310,'term',[]}]]]]}|[{'type',1311,'constraint',[{'atom',1311,'is_subtype'}|[[{'var',1311,'AccIn'}|[{'type',1311,'term',[]}]]]]}|[{'type',1312,'constraint',[{'atom',1312,'is_subtype'}|[[{'var',1312,'AccOut'}|[{'type',1312,'term',[]}]]]]}|[{'type',1313,'constraint',[{'atom',1313,'is_subtype'}|[[{'var',1313,'List1'}|[{'type',1313,'list',[{'var',1313,'A'}]}]]]]}|[{'type',1314,'constraint',[{'atom',1314,'is_subtype'}|[[{'var',1314,'List2'}|[{'type',1314,'list',[{'var',1314,'B'}]}]]]]}|[{'type',1315,'constraint',[{'atom',1315,'is_subtype'}|[[{'var',1315,'A'}|[{'type',1315,'term',[]}]]]]}|[{'type',1316,'constraint',[{'atom',1316,'is_subtype'}|[[{'var',1316,'B'}|[{'type',1316,'term',[]}]]]]}]]]]]]]]]]]}]}],
		%% Line 1324
		'spec' =
		    %% Line 1324
		    [{{'takewhile',2},[{'type',1324,'bounded_fun',[{'type',1324,'fun',[{'type',1324,'product',[{'var',1324,'Pred'}|[{'var',1324,'List1'}]]}|[{'var',1324,'List2'}]]}|[[{'type',1325,'constraint',[{'atom',1325,'is_subtype'}|[[{'var',1325,'Pred'}|[{'type',1325,'fun',[{'type',1325,'product',[{'ann_type',1325,[{'var',1325,'Elem'}|[{'var',1325,'T'}]]}]}|[{'type',1325,'boolean',[]}]]}]]]]}|[{'type',1326,'constraint',[{'atom',1326,'is_subtype'}|[[{'var',1326,'List1'}|[{'type',1326,'list',[{'var',1326,'T'}]}]]]]}|[{'type',1327,'constraint',[{'atom',1327,'is_subtype'}|[[{'var',1327,'List2'}|[{'type',1327,'list',[{'var',1327,'T'}]}]]]]}|[{'type',1328,'constraint',[{'atom',1328,'is_subtype'}|[[{'var',1328,'T'}|[{'type',1328,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1337
		'spec' =
		    %% Line 1337
		    [{{'dropwhile',2},[{'type',1337,'bounded_fun',[{'type',1337,'fun',[{'type',1337,'product',[{'var',1337,'Pred'}|[{'var',1337,'List1'}]]}|[{'var',1337,'List2'}]]}|[[{'type',1338,'constraint',[{'atom',1338,'is_subtype'}|[[{'var',1338,'Pred'}|[{'type',1338,'fun',[{'type',1338,'product',[{'ann_type',1338,[{'var',1338,'Elem'}|[{'var',1338,'T'}]]}]}|[{'type',1338,'boolean',[]}]]}]]]]}|[{'type',1339,'constraint',[{'atom',1339,'is_subtype'}|[[{'var',1339,'List1'}|[{'type',1339,'list',[{'var',1339,'T'}]}]]]]}|[{'type',1340,'constraint',[{'atom',1340,'is_subtype'}|[[{'var',1340,'List2'}|[{'type',1340,'list',[{'var',1340,'T'}]}]]]]}|[{'type',1341,'constraint',[{'atom',1341,'is_subtype'}|[[{'var',1341,'T'}|[{'type',1341,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1350
		'spec' =
		    %% Line 1350
		    [{{'splitwith',2},[{'type',1350,'bounded_fun',[{'type',1350,'fun',[{'type',1350,'product',[{'var',1350,'Pred'}|[{'var',1350,'List'}]]}|[{'type',1350,'tuple',[{'var',1350,'List1'}|[{'var',1350,'List2'}]]}]]}|[[{'type',1351,'constraint',[{'atom',1351,'is_subtype'}|[[{'var',1351,'Pred'}|[{'type',1351,'fun',[{'type',1351,'product',[{'var',1351,'T'}]}|[{'type',1351,'boolean',[]}]]}]]]]}|[{'type',1352,'constraint',[{'atom',1352,'is_subtype'}|[[{'var',1352,'List'}|[{'type',1352,'list',[{'var',1352,'T'}]}]]]]}|[{'type',1353,'constraint',[{'atom',1353,'is_subtype'}|[[{'var',1353,'List1'}|[{'type',1353,'list',[{'var',1353,'T'}]}]]]]}|[{'type',1354,'constraint',[{'atom',1354,'is_subtype'}|[[{'var',1354,'List2'}|[{'type',1354,'list',[{'var',1354,'T'}]}]]]]}|[{'type',1355,'constraint',[{'atom',1355,'is_subtype'}|[[{'var',1355,'T'}|[{'type',1355,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1368
		'spec' =
		    %% Line 1368
		    [{{'split',2},[{'type',1368,'bounded_fun',[{'type',1368,'fun',[{'type',1368,'product',[{'var',1368,'N'}|[{'var',1368,'List1'}]]}|[{'type',1368,'tuple',[{'var',1368,'List2'}|[{'var',1368,'List3'}]]}]]}|[[{'type',1369,'constraint',[{'atom',1369,'is_subtype'}|[[{'var',1369,'N'}|[{'type',1369,'non_neg_integer',[]}]]]]}|[{'type',1370,'constraint',[{'atom',1370,'is_subtype'}|[[{'var',1370,'List1'}|[{'type',1370,'list',[{'var',1370,'T'}]}]]]]}|[{'type',1371,'constraint',[{'atom',1371,'is_subtype'}|[[{'var',1371,'List2'}|[{'type',1371,'list',[{'var',1371,'T'}]}]]]]}|[{'type',1372,'constraint',[{'atom',1372,'is_subtype'}|[[{'var',1372,'List3'}|[{'type',1372,'list',[{'var',1372,'T'}]}]]]]}|[{'type',1373,'constraint',[{'atom',1373,'is_subtype'}|[[{'var',1373,'T'}|[{'type',1373,'term',[]}]]]]}]]]]]]]}]}]]
'member'/2 =
    %% Line 51
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,[_cor4|_cor5]>
	      when call 'erlang':'=:='
		    (_cor4,
		     X) ->
	      'true'
	  %% Line 52
	  <X,[_cor6|Y]> when 'true' ->
	      %% Line 53
	      apply 'member'/2
		  (X, Y)
	  %% Line 54
	  <X,[]> when 'true' ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'member',2}}] )
	    -| ['compiler_generated'] )
	end
'append'/2 =
    %% Line 64
    fun (_cor1,_cor0) ->
	call 'erlang':'++'
	    (_cor1, _cor0)
'append'/1 =
    %% Line 74
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      E
	  %% Line 75
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  apply 'append'/1
		      (T)
	      in  call 'erlang':'++'
		      (H, _cor1)
	  %% Line 76
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'append',1}}] )
	    -| ['compiler_generated'] )
	end
'subtract'/2 =
    %% Line 86
    fun (_cor1,_cor0) ->
	call 'erlang':'--'
	    (_cor1, _cor0)
'reverse'/1 =
    %% Line 95
    fun (_cor0) ->
	case _cor0 of
	  <L = []> when 'true' ->
	      %% Line 96
	      L
	  %% Line 97
	  <L = [_cor2|[]]> when 'true' ->
	      %% Line 98
	      L
	  %% Line 99
	  <[A|[B|[]]]> when 'true' ->
	      %% Line 100
	      [B|[A|[]]]
	  %% Line 101
	  <[A|[B|L]]> when 'true' ->
	      %% Line 102
	      call 'lists':'reverse'
		  (L, [B|[A|[]]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'reverse',1}}] )
	    -| ['compiler_generated'] )
	end
'nth'/2 =
    %% Line 118
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <1,[H|_cor5]> when 'true' ->
	      H
	  %% Line 119
	  <N,[_cor6|T]>
	      when call 'erlang':'>'
		    (N,
		     1) ->
	      let <_cor2> =
		  %% Line 120
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 120
		  apply 'nth'/2
		      (_cor2, T)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'nth',2}}] )
	    -| ['compiler_generated'] )
	end
'nthtail'/2 =
    %% Line 128
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <1,[_cor5|T]> when 'true' ->
	      T
	  %% Line 129
	  <N,[_cor6|T]>
	      when call 'erlang':'>'
		    (N,
		     1) ->
	      let <_cor2> =
		  %% Line 130
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 130
		  apply 'nthtail'/2
		      (_cor2, T)
	  %% Line 131
	  <0,L>
	      when call 'erlang':'is_list'
		    (L) ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'nthtail',2}}] )
	    -| ['compiler_generated'] )
	end
'prefix'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|PreTail],[_cor4|Tail]>
	      when call 'erlang':'=:='
		    (_cor4,
		     X) ->
	      %% Line 141
	      apply 'prefix'/2
		  (PreTail, Tail)
	  %% Line 142
	  <[],List>
	      when call 'erlang':'is_list'
		    (List) ->
	      'true'
	  %% Line 143
	  <[_cor5|_cor6],List>
	      when call 'erlang':'is_list'
		    (List) ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'prefix',2}}] )
	    -| ['compiler_generated'] )
	end
'suffix'/2 =
    %% Line 152
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 153
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		%% Line 153
		call 'erlang':'length'
		    (_cor1)
	    in  let <Delta> =
		    %% Line 153
		    call 'erlang':'-'
			(_cor3, _cor2)
		in  %% Line 154
		    ( case <> of
			( <>
			      when call 'erlang':'>='
				    (Delta,
				     0) ->
			      let <_cor6> =
				  apply 'nthtail'/2
				      (Delta, _cor0)
			      in  call 'erlang':'=:='
				      (_cor6, _cor1)
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'droplast'/1 =
    %% Line 166
    fun (_cor0) ->
	case _cor0 of
	  <[_X_T|[]]> when 'true' ->
	      []
	  %% Line 167
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  apply 'droplast'/1
		      (T)
	      in  [H|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'droplast',1}}] )
	    -| ['compiler_generated'] )
	end
'last'/1 =
    %% Line 176
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      apply 'last'/2
		  (E, Es)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'last',1}}] )
	    -| ['compiler_generated'] )
	end
'last'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,[E|Es]> when 'true' ->
	      apply 'last'/2
		  (E, Es)
	  %% Line 179
	  <E,[]> when 'true' ->
	      E
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'last',2}}] )
	    -| ['compiler_generated'] )
	end
'seq'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <First,Last>
	      when %% Line 192
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (First)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(Last)
			in  let <_cor4> =
				call 'erlang':'-'
				    (First, 1)
			    in  let <_cor5> =
				    call 'erlang':'=<'
					(_cor4, Last)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor3, _cor5)
				    in  call 'erlang':'and'
					    (_cor2, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 193
		  call 'erlang':'-'
		      (Last, First)
	      in  let <_cor8> =
		      %% Line 193
		      call 'erlang':'+'
			  (_cor7, 1)
		  in  %% Line 193
		      apply 'seq_loop'/3
			  (_cor8, Last, [])
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'seq',2}}] )
	    -| ['compiler_generated'] )
	end
'seq_loop'/3 =
    %% Line 195
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,X,L>
	      when call 'erlang':'>='
		    (N,
		     4) ->
	      let <_cor7> =
		  %% Line 196
		  call 'erlang':'-'
		      (N, 4)
	      in  let <_cor6> =
		      %% Line 196
		      call 'erlang':'-'
			  (X, 4)
		  in  let <_cor3> =
			  %% Line 196
			  call 'erlang':'-'
			      (X, 3)
		      in  let <_cor4> =
			      %% Line 196
			      call 'erlang':'-'
				  (X, 2)
			  in  let <_cor5> =
				  %% Line 196
				  call 'erlang':'-'
				      (X, 1)
			      in  %% Line 196
				  apply 'seq_loop'/3
				      (_cor7, _cor6, [_cor3|[_cor4|[_cor5|[X|L]]]])
	  %% Line 197
	  <N,X,L>
	      when call 'erlang':'>='
		    (N,
		     2) ->
	      let <_cor10> =
		  %% Line 198
		  call 'erlang':'-'
		      (N, 2)
	      in  let <_cor9> =
		      %% Line 198
		      call 'erlang':'-'
			  (X, 2)
		  in  let <_cor8> =
			  %% Line 198
			  call 'erlang':'-'
			      (X, 1)
		      in  %% Line 198
			  apply 'seq_loop'/3
			      (_cor10, _cor9, [_cor8|[X|L]])
	  %% Line 199
	  <1,X,L> when 'true' ->
	      %% Line 200
	      [X|L]
	  %% Line 201
	  <0,_cor14,L> when 'true' ->
	      %% Line 202
	      L
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'seq_loop',3}}] )
	    -| ['compiler_generated'] )
	end
'seq'/3 =
    %% Line 210
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <First,Last,Inc>
	      when %% Line 211
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (First)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Last)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Inc)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 212
	      case <> of
		%% Line 213
		<>
		    when let <_cor10> =
			  try
			      let <_cor7> =
				  call 'erlang':'>'
				      (Inc, 0)
			      in  let <_cor8> =
				      call 'erlang':'-'
					  (First, Inc)
				  in  let <_cor9> =
					  call 'erlang':'=<'
					      (_cor8, Last)
				      in  call 'erlang':'and'
					      (_cor7, _cor9)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
		      in  let <_cor14> =
			      %% Line 214
			      try
				  let <_cor11> =
				      call 'erlang':'<'
					  (Inc, 0)
				  in  let <_cor12> =
					  call 'erlang':'-'
					      (First, Inc)
				      in  let <_cor13> =
					      call 'erlang':'>='
						  (_cor12, Last)
					  in  call 'erlang':'and'
						  (_cor11, _cor13)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false'
			  in  call 'erlang':'or'
				  (_cor10, _cor14) ->
		    let <_cor15> =
			%% Line 215
			call 'erlang':'-'
			    (Last, First)
		    in  let <_cor16> =
			    %% Line 215
			    call 'erlang':'+'
				(_cor15, Inc)
			in  let <N> =
				%% Line 215
				call 'erlang':'div'
				    (_cor16, Inc)
			    in  let <_cor18> =
				    %% Line 216
				    call 'erlang':'-'
					(N, 1)
				in  let <_cor19> =
					%% Line 216
					call 'erlang':'*'
					    (Inc, _cor18)
				    in  let <_cor20> =
					    %% Line 216
					    call 'erlang':'+'
						(_cor19, First)
					in  %% Line 216
					    apply 'seq_loop'/4
						(N, _cor20, Inc, [])
		%% Line 217
		<>
		    when let <_cor21> =
			  call 'erlang':'=:='
			      (Inc, 0)
		      in  let <_cor22> =
			      call 'erlang':'=:='
				  (First, Last)
			  in  call 'erlang':'and'
				  (_cor21, _cor22) ->
		    %% Line 218
		    apply 'seq_loop'/4
			(1, First, Inc, [])
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'seq',3}}] )
	    -| ['compiler_generated'] )
	end
'seq_loop'/4 =
    %% Line 221
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <N,X,D,L>
	      when call 'erlang':'>='
		    (N,
		     4) ->
	      let <Y> =
		  %% Line 222
		  call 'erlang':'-'
		      (X, D)
	      in  let <Z> =
		      %% Line 222
		      call 'erlang':'-'
			  (Y, D)
		  in  let <W> =
			  %% Line 222
			  call 'erlang':'-'
			      (Z, D)
		      in  let <_cor8> =
			      %% Line 223
			      call 'erlang':'-'
				  (N, 4)
			  in  let <_cor7> =
				  %% Line 223
				  call 'erlang':'-'
				      (W, D)
			      in  %% Line 223
				  apply 'seq_loop'/4
				      (_cor8, _cor7, D, [W|[Z|[Y|[X|L]]]])
	  %% Line 224
	  <N,X,D,L>
	      when call 'erlang':'>='
		    (N,
		     2) ->
	      let <Y> =
		  %% Line 225
		  call 'erlang':'-'
		      (X, D)
	      in  let <_cor11> =
		      %% Line 226
		      call 'erlang':'-'
			  (N, 2)
		  in  let <_cor10> =
			  %% Line 226
			  call 'erlang':'-'
			      (Y, D)
		      in  %% Line 226
			  apply 'seq_loop'/4
			      (_cor11, _cor10, D, [Y|[X|L]])
	  %% Line 227
	  <1,X,_cor16,L> when 'true' ->
	      %% Line 228
	      [X|L]
	  %% Line 229
	  <0,_cor17,_cor18,L> when 'true' ->
	      %% Line 230
	      L
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'seq_loop',4}}] )
	    -| ['compiler_generated'] )
	end
'sum'/1 =
    %% Line 237
    fun (_cor0) ->
	apply 'sum'/2
	    (_cor0, 0)
'sum'/2 =
    %% Line 239
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Sum> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'+'
		      (Sum, H)
	      in  apply 'sum'/2
		      (T, _cor2)
	  %% Line 240
	  <[],Sum> when 'true' ->
	      Sum
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'sum',2}}] )
	    -| ['compiler_generated'] )
	end
'duplicate'/2 =
    %% Line 251
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,X>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor3> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      apply 'duplicate'/3
		  (N, X, [])
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'duplicate',2}}] )
	    -| ['compiler_generated'] )
	end
'duplicate'/3 =
    %% Line 253
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_cor7,L> when 'true' ->
	      L
	  %% Line 254
	  <N,X,L> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'duplicate'/3
		      (_cor3, X, [X|L])
	end
'min'/1 =
    %% Line 263
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      apply 'min'/2
		  (T, H)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'min',1}}] )
	    -| ['compiler_generated'] )
	end
'min'/2 =
    %% Line 265
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Min>
	      when call 'erlang':'<'
		    (H,
		     Min) ->
	      apply 'min'/2
		  (T, H)
	  %% Line 266
	  <[_cor4|T],Min> when 'true' ->
	      apply 'min'/2
		  (T, Min)
	  %% Line 267
	  <[],Min> when 'true' ->
	      Min
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'min',2}}] )
	    -| ['compiler_generated'] )
	end
'max'/1 =
    %% Line 276
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      apply 'max'/2
		  (T, H)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'max',1}}] )
	    -| ['compiler_generated'] )
	end
'max'/2 =
    %% Line 278
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Max>
	      when call 'erlang':'>'
		    (H,
		     Max) ->
	      apply 'max'/2
		  (T, H)
	  %% Line 279
	  <[_cor4|T],Max> when 'true' ->
	      apply 'max'/2
		  (T, Max)
	  %% Line 280
	  <[],Max> when 'true' ->
	      Max
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'max',2}}] )
	    -| ['compiler_generated'] )
	end
'sublist'/3 =
    %% Line 292
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <List,S,L>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_cor4> =
			call 'erlang':'>='
			    (L, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 293
		  call 'erlang':'-'
		      (S, 1)
	      in  let <_cor6> =
		      %% Line 293
		      apply 'nthtail'/2
			  (_cor5, List)
		  in  %% Line 293
		      apply 'sublist'/2
			  (_cor6, L)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'sublist',3}}] )
	    -| ['compiler_generated'] )
	end
'sublist'/2 =
    %% Line 301
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <List,L>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (List)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 302
	      apply 'sublist_2'/2
		  (List, L)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'sublist',2}}] )
	    -| ['compiler_generated'] )
	end
'sublist_2'/2 =
    %% Line 304
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],L>
	      when call 'erlang':'>'
		    (L,
		     0) ->
	      let <_cor2> =
		  %% Line 305
		  call 'erlang':'-'
		      (L, 1)
	      in  let <_cor3> =
		      %% Line 305
		      apply 'sublist_2'/2
			  (T, _cor2)
		  in  %% Line 305
		      [H|_cor3]
	  %% Line 306
	  <_cor8,0> when 'true' ->
	      %% Line 307
	      []
	  %% Line 308
	  <List,L>
	      when let <_cor4> =
		    call 'erlang':'is_list'
			(List)
		in  let <_cor5> =
			call 'erlang':'>'
			    (L, 0)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 309
	      []
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'sublist_2',2}}] )
	    -| ['compiler_generated'] )
	end
'delete'/2 =
    %% Line 320
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Item,[_cor5|Rest]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Item) ->
	      Rest
	  %% Line 321
	  <Item,[H|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 322
		  apply 'delete'/2
		      (Item, Rest)
	      in  %% Line 322
		  [H|_cor2]
	  %% Line 323
	  <_cor6,[]> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'zip'/2 =
    %% Line 335
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|Xs],[Y|Ys]> when 'true' ->
	      let <_cor2> =
		  apply 'zip'/2
		      (Xs, Ys)
	      in  [{X,Y}|_cor2]
	  %% Line 336
	  <[],[]> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'zip',2}}] )
	    -| ['compiler_generated'] )
	end
'unzip'/1 =
    %% Line 348
    fun (_cor0) ->
	apply 'unzip'/3
	    (_cor0, [], [])
'unzip'/3 =
    %% Line 350
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{X,Y}|Ts],Xs,Ys> when 'true' ->
	      apply 'unzip'/3
		  (Ts, [X|Xs], [Y|Ys])
	  %% Line 351
	  <[],Xs,Ys> when 'true' ->
	      let <_cor4> =
		  apply 'reverse'/1
		      (Xs)
	      in  let <_cor3> =
		      apply 'reverse'/1
			  (Ys)
		  in  {_cor4,_cor3}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'unzip',3}}] )
	    -| ['compiler_generated'] )
	end
'zip3'/3 =
    %% Line 365
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[X|Xs],[Y|Ys],[Z|Zs]> when 'true' ->
	      let <_cor3> =
		  apply 'zip3'/3
		      (Xs, Ys, Zs)
	      in  [{X,Y,Z}|_cor3]
	  %% Line 366
	  <[],[],[]> when 'true' ->
	      []
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'zip3',3}}] )
	    -| ['compiler_generated'] )
	end
'unzip3'/1 =
    %% Line 380
    fun (_cor0) ->
	apply 'unzip3'/4
	    (_cor0, [], [], [])
'unzip3'/4 =
    %% Line 382
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{X,Y,Z}|Ts],Xs,Ys,Zs> when 'true' ->
	      %% Line 383
	      apply 'unzip3'/4
		  (Ts, [X|Xs], [Y|Ys], [Z|Zs])
	  %% Line 384
	  <[],Xs,Ys,Zs> when 'true' ->
	      let <_cor6> =
		  %% Line 385
		  apply 'reverse'/1
		      (Xs)
	      in  let <_cor5> =
		      %% Line 385
		      apply 'reverse'/1
			  (Ys)
		  in  let <_cor4> =
			  %% Line 385
			  apply 'reverse'/1
			      (Zs)
		      in  %% Line 385
			  {_cor6,_cor5,_cor4}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'unzip3',4}}] )
	    -| ['compiler_generated'] )
	end
'zipwith'/3 =
    %% Line 399
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,[X|Xs],[Y|Ys]> when 'true' ->
	      let <_cor3> =
		  apply F
		      (X, Y)
	      in  let <_cor4> =
		      apply 'zipwith'/3
			  (F, Xs, Ys)
		  in  [_cor3|_cor4]
	  %% Line 400
	  <F,[],[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      []
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'zipwith',3}}] )
	    -| ['compiler_generated'] )
	end
'zipwith3'/4 =
    %% Line 416
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,[X|Xs],[Y|Ys],[Z|Zs]> when 'true' ->
	      let <_cor4> =
		  %% Line 417
		  apply F
		      (X, Y, Z)
	      in  let <_cor5> =
		      %% Line 417
		      apply 'zipwith3'/4
			  (F, Xs, Ys, Zs)
		  in  %% Line 417
		      [_cor4|_cor5]
	  %% Line 418
	  <F,[],[],[]>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      []
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'zipwith3',4}}] )
	    -| ['compiler_generated'] )
	end
'sort'/1 =
    %% Line 428
    fun (_cor0) ->
	case _cor0 of
	  <L0 = [X|[Y|L]]>
	      when call 'erlang':'=<'
		    (X,
		     Y) ->
	      %% Line 429
	      case L of
		%% Line 430
		<[]> when 'true' ->
		    %% Line 431
		    L0
		%% Line 432
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (Y,
			   Z) ->
		    %% Line 433
		    L0
		%% Line 434
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (X,
			   Z) ->
		    %% Line 435
		    [X|[Z|[Y|[]]]]
		%% Line 436
		<[Z|[]]> when 'true' ->
		    %% Line 437
		    [Z|[X|[Y|[]]]]
		%% Line 438
		<_cor4>
		    when call 'erlang':'=='
			  (X,
			   Y) ->
		    %% Line 439
		    apply 'sort_1'/3
			(Y, L, [X|[]])
		%% Line 440
		<_cor5> when 'true' ->
		    %% Line 441
		    apply 'split_1'/5
			(X, Y, L, [], [])
	      end
	  %% Line 443
	  <[X|[Y|L]]> when 'true' ->
	      %% Line 444
	      case L of
		%% Line 445
		<[]> when 'true' ->
		    %% Line 446
		    [Y|[X|[]]]
		%% Line 447
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (X,
			   Z) ->
		    %% Line 448
		    [Y|[X|L]]
		%% Line 449
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (Y,
			   Z) ->
		    %% Line 450
		    [Y|[Z|[X|[]]]]
		%% Line 451
		<[Z|[]]> when 'true' ->
		    %% Line 452
		    [Z|[Y|[X|[]]]]
		%% Line 453
		<_cor6> when 'true' ->
		    %% Line 454
		    apply 'split_2'/5
			(X, Y, L, [], [])
	      end
	  %% Line 456
	  <L = [_cor7|[]]> when 'true' ->
	      %% Line 457
	      L
	  %% Line 458
	  <L = []> when 'true' ->
	      %% Line 459
	      L
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'sort',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_1'/3 =
    %% Line 461
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,[Y|L],R>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 462
	      apply 'sort_1'/3
		  (Y, L, [X|R])
	  %% Line 463
	  <X,[Y|L],R>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 464
	      apply 'split_1'/5
		  (X, Y, L, R, [])
	  %% Line 465
	  <X,[Y|L],R> when 'true' ->
	      %% Line 466
	      apply 'split_2'/5
		  (X, Y, L, R, [])
	  %% Line 467
	  <X,[],R> when 'true' ->
	      %% Line 468
	      call 'lists':'reverse'
		  (R, [X|[]])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'sort_1',3}}] )
	    -| ['compiler_generated'] )
	end
'merge'/1 =
    %% Line 479
    fun (_cor0) ->
	%% Line 480
	apply 'mergel'/2
	    (_cor0, [])
'merge3'/3 =
    %% Line 494
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L1,[],L3> when 'true' ->
	      %% Line 495
	      apply 'merge'/2
		  (L1, L3)
	  %% Line 496
	  <L1,L2,[]> when 'true' ->
	      %% Line 497
	      apply 'merge'/2
		  (L1, L2)
	  %% Line 498
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_cor3> =
		  %% Line 499
		  apply 'merge3_1'/6
		      (L1, [], H2, T2, H3, T3)
	      in  %% Line 499
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'merge3',3}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3'/3 =
    %% Line 506
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L1,[],L3> when 'true' ->
	      %% Line 507
	      apply 'rmerge'/2
		  (L1, L3)
	  %% Line 508
	  <L1,L2,[]> when 'true' ->
	      %% Line 509
	      apply 'rmerge'/2
		  (L1, L2)
	  %% Line 510
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_cor3> =
		  %% Line 511
		  apply 'rmerge3_1'/6
		      (L1, [], H2, T2, H3, T3)
	      in  %% Line 511
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rmerge3',3}}] )
	    -| ['compiler_generated'] )
	end
'merge'/2 =
    %% Line 523
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T1,[]> when 'true' ->
	      %% Line 524
	      T1
	  %% Line 525
	  <T1,[H2|T2]> when 'true' ->
	      let <_cor2> =
		  %% Line 526
		  apply 'merge2_1'/4
		      (T1, H2, T2, [])
	      in  %% Line 526
		  call 'lists':'reverse'
		      (_cor2, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'merge',2}}] )
	    -| ['compiler_generated'] )
	end
'rmerge'/2 =
    %% Line 535
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T1,[]> when 'true' ->
	      %% Line 536
	      T1
	  %% Line 537
	  <T1,[H2|T2]> when 'true' ->
	      let <_cor2> =
		  %% Line 538
		  apply 'rmerge2_1'/4
		      (T1, H2, T2, [])
	      in  %% Line 538
		  call 'lists':'reverse'
		      (_cor2, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'rmerge',2}}] )
	    -| ['compiler_generated'] )
	end
'concat'/1 =
    %% Line 548
    fun (_cor0) ->
	%% Line 549
	apply 'flatmap'/2
	    (( 'thing_to_list'/1
	       -| [{'id',{0,0,'-concat/1-fun-0-'}}] ), _cor0)
'thing_to_list'/1 =
    %% Line 551
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      call 'erlang':'integer_to_list'
		  (X)
	  %% Line 552
	  <X>
	      when call 'erlang':'is_float'
		    (_cor0) ->
	      call 'erlang':'float_to_list'
		  (X)
	  %% Line 553
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      call 'erlang':'atom_to_list'
		  (X)
	  %% Line 554
	  <X>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      X
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'thing_to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'flatten'/1 =
    %% Line 564
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 565
	      apply 'do_flatten'/2
		  (List, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'flatten',1}}] )
	    -| ['compiler_generated'] )
	end
'flatten'/2 =
    %% Line 572
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <List,Tail>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(List)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Tail)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 573
	      apply 'do_flatten'/2
		  (List, Tail)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'flatten',2}}] )
	    -| ['compiler_generated'] )
	end
'do_flatten'/2 =
    %% Line 575
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Tail>
	      when call 'erlang':'is_list'
		    (H) ->
	      let <_cor2> =
		  %% Line 576
		  apply 'do_flatten'/2
		      (T, Tail)
	      in  %% Line 576
		  apply 'do_flatten'/2
		      (H, _cor2)
	  %% Line 577
	  <[H|T],Tail> when 'true' ->
	      let <_cor3> =
		  %% Line 578
		  apply 'do_flatten'/2
		      (T, Tail)
	      in  %% Line 578
		  [H|_cor3]
	  %% Line 579
	  <[],Tail> when 'true' ->
	      %% Line 580
	      Tail
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'do_flatten',2}}] )
	    -| ['compiler_generated'] )
	end
'flatlength'/1 =
    %% Line 588
    fun (_cor0) ->
	%% Line 589
	apply 'flatlength'/2
	    (_cor0, 0)
'flatlength'/2 =
    %% Line 591
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],L>
	      when call 'erlang':'is_list'
		    (H) ->
	      let <_cor2> =
		  %% Line 592
		  apply 'flatlength'/2
		      (T, L)
	      in  %% Line 592
		  apply 'flatlength'/2
		      (H, _cor2)
	  %% Line 593
	  <[_cor6|T],L> when 'true' ->
	      let <_cor3> =
		  %% Line 594
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 594
		  apply 'flatlength'/2
		      (T, _cor3)
	  %% Line 595
	  <[],L> when 'true' ->
	      L
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'flatlength',2}}] )
	    -| ['compiler_generated'] )
	end
'keydelete'/3 =
    %% Line 635
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <K,N,L>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 636
	      apply 'keydelete3'/3
		  (K, N, L)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'keydelete',3}}] )
	    -| ['compiler_generated'] )
	end
'keydelete3'/3 =
    %% Line 638
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,N,[H|T]>
	      when try
		    let <_cor3> =
			call 'erlang':'element'
			    (N, H)
		    in  call 'erlang':'=='
			    (_cor3, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      T
	  %% Line 639
	  <Key,N,[H|T]> when 'true' ->
	      let <_cor4> =
		  %% Line 640
		  apply 'keydelete3'/3
		      (Key, N, T)
	      in  %% Line 640
		  [H|_cor4]
	  %% Line 641
	  <_cor8,_cor9,[]> when 'true' ->
	      []
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'keydelete3',3}}] )
	    -| ['compiler_generated'] )
	end
'keyreplace'/4 =
    %% Line 651
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <K,N,L,New>
	      when try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor5> =
			    call 'erlang':'>'
				(N, 0)
			in  let <_cor6> =
				call 'erlang':'is_tuple'
				    (New)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 652
	      apply 'keyreplace3'/4
		  (K, N, L, New)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'keyreplace',4}}] )
	    -| ['compiler_generated'] )
	end
'keyreplace3'/4 =
    %% Line 654
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Key,Pos,[Tup|Tail],New>
	      when try
		    let <_cor4> =
			call 'erlang':'element'
			    (Pos, Tup)
		    in  call 'erlang':'=='
			    (_cor4, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 655
	      [New|Tail]
	  %% Line 656
	  <Key,Pos,[H|T],New> when 'true' ->
	      let <_cor5> =
		  %% Line 657
		  apply 'keyreplace3'/4
		      (Key, Pos, T, New)
	      in  %% Line 657
		  [H|_cor5]
	  %% Line 658
	  <_cor10,_cor11,[],_cor12> when 'true' ->
	      []
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'keyreplace3',4}}] )
	    -| ['compiler_generated'] )
	end
'keytake'/3 =
    %% Line 667
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,N,L>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 668
	      apply 'keytake'/4
		  (Key, N, L, [])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'keytake',3}}] )
	    -| ['compiler_generated'] )
	end
'keytake'/4 =
    %% Line 670
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Key,N,[H|T],L>
	      when try
		    let <_cor4> =
			call 'erlang':'element'
			    (N, H)
		    in  call 'erlang':'=='
			    (_cor4, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 671
		  call 'lists':'reverse'
		      (L, T)
	      in  %% Line 671
		  {'value',H,_cor5}
	  %% Line 672
	  <Key,N,[H|T],L> when 'true' ->
	      %% Line 673
	      apply 'keytake'/4
		  (Key, N, T, [H|L])
	  %% Line 674
	  <_X_K,_X_N,[],_X_L> when 'true' ->
	      'false'
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'keytake',4}}] )
	    -| ['compiler_generated'] )
	end
'keystore'/4 =
    %% Line 684
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <K,N,L,New>
	      when try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor5> =
			    call 'erlang':'>'
				(N, 0)
			in  let <_cor6> =
				call 'erlang':'is_tuple'
				    (New)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 685
	      apply 'keystore2'/4
		  (K, N, L, New)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'keystore',4}}] )
	    -| ['compiler_generated'] )
	end
'keystore2'/4 =
    %% Line 687
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Key,N,[H|T],New>
	      when try
		    let <_cor4> =
			call 'erlang':'element'
			    (N, H)
		    in  call 'erlang':'=='
			    (_cor4, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 688
	      [New|T]
	  %% Line 689
	  <Key,N,[H|T],New> when 'true' ->
	      let <_cor5> =
		  %% Line 690
		  apply 'keystore2'/4
		      (Key, N, T, New)
	      in  %% Line 690
		  [H|_cor5]
	  %% Line 691
	  <_X_Key,_X_N,[],New> when 'true' ->
	      %% Line 692
	      [New|[]]
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'keystore2',4}}] )
	    -| ['compiler_generated'] )
	end
'keysort'/2 =
    %% Line 700
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,L>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor3> =
			call 'erlang':'>'
			    (I, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 701
	      case L of
		%% Line 702
		<[]> when 'true' ->
		    L
		%% Line 703
		<[_cor14|[]]> when 'true' ->
		    L
		%% Line 704
		<[X|[Y|T]]> when 'true' ->
		    let <_cor5> =
			%% Line 705
			call 'erlang':'element'
			    (I, X)
		    in  let <_cor4> =
			    %% Line 705
			    call 'erlang':'element'
				(I, Y)
			in  %% Line 705
			    case <_cor5,_cor4> of
			      %% Line 706
			      <EX,EY>
				  when call 'erlang':'=<'
					(EX,
					 EY) ->
				  %% Line 707
				  case T of
				    %% Line 708
				    <[]> when 'true' ->
					%% Line 709
					L
				    %% Line 710
				    <[Z|[]]> when 'true' ->
					%% Line 711
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 712
					  <EZ>
					      when call 'erlang':'=<'
						    (EY,
						     EZ) ->
					      %% Line 713
					      L
					  %% Line 714
					  <EZ>
					      when call 'erlang':'=<'
						    (EX,
						     EZ) ->
					      %% Line 715
					      [X|[Z|[Y|[]]]]
					  %% Line 716
					  <_X_EZ> when 'true' ->
					      %% Line 717
					      [Z|[X|[Y|[]]]]
					end
				    %% Line 719
				    <_cor15>
					when call 'erlang':'=='
					      (X,
					       Y) ->
					%% Line 720
					apply 'keysort_1'/5
					    (I, Y, EY, T, [X|[]])
				    %% Line 721
				    <_cor16> when 'true' ->
					%% Line 722
					apply 'keysplit_1'/8
					    (I, X, EX, Y, EY, T, [], [])
				  end
			      %% Line 724
			      <EX,EY> when 'true' ->
				  %% Line 725
				  case T of
				    %% Line 726
				    <[]> when 'true' ->
					%% Line 727
					[Y|[X|[]]]
				    %% Line 728
				    <[Z|[]]> when 'true' ->
					%% Line 729
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 730
					  <EZ>
					      when call 'erlang':'=<'
						    (EX,
						     EZ) ->
					      %% Line 731
					      [Y|[X|T]]
					  %% Line 732
					  <EZ>
					      when call 'erlang':'=<'
						    (EY,
						     EZ) ->
					      %% Line 733
					      [Y|[Z|[X|[]]]]
					  %% Line 734
					  <_X_EZ> when 'true' ->
					      %% Line 735
					      [Z|[Y|[X|[]]]]
					end
				    %% Line 737
				    <_cor17> when 'true' ->
					%% Line 738
					apply 'keysplit_2'/8
					    (I, X, EX, Y, EY, T, [], [])
				  end
			    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'keysort',2}}] )
	    -| ['compiler_generated'] )
	end
'keysort_1'/5 =
    %% Line 743
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,[Y|L],R>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 744
	      apply 'keysort_1'/5
		  (I, Y, EX, L, [X|R])
	  %% Line 745
	  <I,X,EX,[Y|L],R> when 'true' ->
	      %% Line 746
	      case call 'erlang':'element'
		       (I, Y) of
		%% Line 747
		<EY>
		    when call 'erlang':'=<'
			  (EX,
			   EY) ->
		    %% Line 748
		    apply 'keysplit_1'/8
			(I, X, EX, Y, EY, L, R, [])
		%% Line 749
		<EY> when 'true' ->
		    %% Line 750
		    apply 'keysplit_2'/8
			(I, X, EX, Y, EY, L, R, [])
	      end
	  %% Line 752
	  <_X_I,X,_X_EX,[],R> when 'true' ->
	      %% Line 753
	      call 'lists':'reverse'
		  (R, [X|[]])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'keysort_1',5}}] )
	    -| ['compiler_generated'] )
	end
'keymerge'/3 =
    %% Line 764
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Index,T1,L2>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 765
	      case L2 of
		%% Line 766
		<[]> when 'true' ->
		    %% Line 767
		    T1
		%% Line 768
		<[H2|T2]> when 'true' ->
		    let <E2> =
			%% Line 769
			call 'erlang':'element'
			    (Index, H2)
		    in  let <M> =
			    %% Line 770
			    apply 'keymerge2_1'/6
				(Index, T1, E2, H2, T2, [])
			in  %% Line 771
			    call 'lists':'reverse'
				(M, [])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'keymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge'/3 =
    %% Line 779
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Index,T1,L2>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 780
	      case L2 of
		%% Line 781
		<[]> when 'true' ->
		    %% Line 782
		    T1
		%% Line 783
		<[H2|T2]> when 'true' ->
		    let <E2> =
			%% Line 784
			call 'erlang':'element'
			    (Index, H2)
		    in  let <M> =
			    %% Line 785
			    apply 'rkeymerge2_1'/6
				(Index, T1, E2, H2, T2, [])
			in  %% Line 786
			    call 'lists':'reverse'
				(M, [])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'rkeymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'ukeysort'/2 =
    %% Line 795
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,L>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor3> =
			call 'erlang':'>'
			    (I, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 796
	      case L of
		%% Line 797
		<[]> when 'true' ->
		    L
		%% Line 798
		<[_cor14|[]]> when 'true' ->
		    L
		%% Line 799
		<[X|[Y|T]]> when 'true' ->
		    let <_cor5> =
			%% Line 800
			call 'erlang':'element'
			    (I, X)
		    in  let <_cor4> =
			    %% Line 800
			    call 'erlang':'element'
				(I, Y)
			in  %% Line 800
			    case <_cor5,_cor4> of
			      %% Line 801
			      <EX,EY>
				  when call 'erlang':'=='
					(EX,
					 EY) ->
				  %% Line 802
				  apply 'ukeysort_1'/4
				      (I, X, EX, T)
			      %% Line 803
			      <EX,EY>
				  when call 'erlang':'<'
					(EX,
					 EY) ->
				  %% Line 804
				  case T of
				    %% Line 805
				    <[]> when 'true' ->
					%% Line 806
					L
				    %% Line 807
				    <[Z|[]]> when 'true' ->
					%% Line 808
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 809
					  <EZ>
					      when call 'erlang':'=='
						    (EY,
						     EZ) ->
					      %% Line 810
					      [X|[Y|[]]]
					  %% Line 811
					  <EZ>
					      when call 'erlang':'<'
						    (EY,
						     EZ) ->
					      %% Line 812
					      [X|[Y|[Z|[]]]]
					  %% Line 813
					  <EZ>
					      when call 'erlang':'=='
						    (EZ,
						     EX) ->
					      %% Line 814
					      [X|[Y|[]]]
					  %% Line 815
					  <EZ>
					      when call 'erlang':'=<'
						    (EX,
						     EZ) ->
					      %% Line 816
					      [X|[Z|[Y|[]]]]
					  %% Line 817
					  <_X_EZ> when 'true' ->
					      %% Line 818
					      [Z|[X|[Y|[]]]]
					end
				    %% Line 820
				    <_cor15> when 'true' ->
					%% Line 821
					apply 'ukeysplit_1'/8
					    (I, X, EX, Y, EY, T, [], [])
				  end
			      %% Line 823
			      <EX,EY> when 'true' ->
				  %% Line 824
				  case T of
				    %% Line 825
				    <[]> when 'true' ->
					%% Line 826
					[Y|[X|[]]]
				    %% Line 827
				    <[Z|[]]> when 'true' ->
					%% Line 828
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 829
					  <EZ>
					      when call 'erlang':'=='
						    (EX,
						     EZ) ->
					      %% Line 830
					      [Y|[X|[]]]
					  %% Line 831
					  <EZ>
					      when call 'erlang':'<'
						    (EX,
						     EZ) ->
					      %% Line 832
					      [Y|[X|[Z|[]]]]
					  %% Line 833
					  <EZ>
					      when call 'erlang':'=='
						    (EY,
						     EZ) ->
					      %% Line 834
					      [Y|[X|[]]]
					  %% Line 835
					  <EZ>
					      when call 'erlang':'=<'
						    (EY,
						     EZ) ->
					      %% Line 836
					      [Y|[Z|[X|[]]]]
					  %% Line 837
					  <_X_EZ> when 'true' ->
					      %% Line 838
					      [Z|[Y|[X|[]]]]
					end
				    %% Line 840
				    <_cor16> when 'true' ->
					%% Line 841
					apply 'ukeysplit_2'/5
					    (I, Y, EY, T, [X|[]])
				  end
			    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'ukeysort',2}}] )
	    -| ['compiler_generated'] )
	end
'ukeysort_1'/4 =
    %% Line 846
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,[Y|L]> when 'true' ->
	      %% Line 847
	      case call 'erlang':'element'
		       (I, Y) of
		%% Line 848
		<EY>
		    when call 'erlang':'=='
			  (EX,
			   EY) ->
		    %% Line 849
		    apply 'ukeysort_1'/4
			(I, X, EX, L)
		%% Line 850
		<EY>
		    when call 'erlang':'<'
			  (EX,
			   EY) ->
		    %% Line 851
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, [], [])
		%% Line 852
		<EY> when 'true' ->
		    %% Line 853
		    apply 'ukeysplit_2'/5
			(I, Y, EY, L, [X|[]])
	      end
	  %% Line 855
	  <_X_I,X,_X_EX,[]> when 'true' ->
	      %% Line 856
	      [X|[]]
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'ukeysort_1',4}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge'/3 =
    %% Line 867
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Index,L1,T2>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 868
	      case L1 of
		%% Line 869
		<[]> when 'true' ->
		    %% Line 870
		    T2
		%% Line 871
		<[H1|T1]> when 'true' ->
		    let <E1> =
			%% Line 872
			call 'erlang':'element'
			    (Index, H1)
		    in  let <M> =
			    %% Line 873
			    apply 'ukeymerge2_2'/6
				(Index, T1, E1, H1, T2, [])
			in  %% Line 874
			    call 'lists':'reverse'
				(M, [])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'ukeymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge'/3 =
    %% Line 882
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Index,T1,L2>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 883
	      case L2 of
		%% Line 884
		<[]> when 'true' ->
		    %% Line 885
		    T1
		%% Line 886
		<[H2|T2]> when 'true' ->
		    let <E2> =
			%% Line 887
			call 'erlang':'element'
			    (Index, H2)
		    in  let <M> =
			    %% Line 888
			    apply 'rukeymerge2_1'/6
				(Index, T1, E2, T2, [], H2)
			in  %% Line 889
			    call 'lists':'reverse'
				(M, [])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'rukeymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'keymap'/3 =
    %% Line 899
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,Index,[Tup|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 900
		  call 'erlang':'element'
		      (Index, Tup)
	      in  let <_cor4> =
		      %% Line 900
		      apply Fun
			  (_cor3)
		  in  let <_cor5> =
			  %% Line 900
			  call 'erlang':'setelement'
			      (Index, Tup, _cor4)
		      in  let <_cor6> =
			      %% Line 900
			      apply 'keymap'/3
				  (Fun, Index, Tail)
			  in  %% Line 900
			      [_cor5|_cor6]
	  %% Line 901
	  <Fun,Index,[]>
	      when try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (Index)
		    in  let <_cor8> =
			    call 'erlang':'>='
				(Index, 1)
			in  let <_cor9> =
				%% Line 902
				call 'erlang':'is_function'
				    (Fun, 1)
			    in  let <_cor10> =
				    call 'erlang':'and'
					(_cor8, _cor9)
				in  call 'erlang':'and'
					(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 902
	      []
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'keymap',3}}] )
	    -| ['compiler_generated'] )
	end
'sort'/2 =
    %% Line 912
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 913
	      []
	  %% Line 914
	  <Fun,L = [_cor5|[]]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 915
	      L
	  %% Line 916
	  <Fun,[X|[Y|T]]> when 'true' ->
	      %% Line 917
	      case apply Fun
		       (X, Y) of
		%% Line 918
		<'true'> when 'true' ->
		    %% Line 919
		    apply 'fsplit_1'/6
			(Y, X, Fun, T, [], [])
		%% Line 920
		<'false'> when 'true' ->
		    %% Line 921
		    apply 'fsplit_2'/6
			(Y, X, Fun, T, [], [])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'sort',2}}] )
	    -| ['compiler_generated'] )
	end
'merge'/3 =
    %% Line 932
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,T1,[H2|T2]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_cor3> =
		  %% Line 933
		  apply 'fmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 933
		  call 'lists':'reverse'
		      (_cor3, [])
	  %% Line 934
	  <Fun,T1,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 935
	      T1
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'merge',3}}] )
	    -| ['compiler_generated'] )
	end
'rmerge'/3 =
    %% Line 941
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,T1,[H2|T2]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_cor3> =
		  %% Line 942
		  apply 'rfmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 942
		  call 'lists':'reverse'
		      (_cor3, [])
	  %% Line 943
	  <Fun,T1,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 944
	      T1
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rmerge',3}}] )
	    -| ['compiler_generated'] )
	end
'usort'/2 =
    %% Line 952
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,L = [_cor4|[]]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 953
	      L
	  %% Line 954
	  <Fun,L = []>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 955
	      L
	  %% Line 956
	  <Fun,[X|L]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 957
	      apply 'usort_1'/3
		  (Fun, X, L)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'usort',2}}] )
	    -| ['compiler_generated'] )
	end
'usort_1'/3 =
    %% Line 959
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,X,[Y|L]> when 'true' ->
	      %% Line 960
	      case apply Fun
		       (X, Y) of
		%% Line 961
		<'true'> when 'true' ->
		    %% Line 962
		    case apply Fun
			     (Y, X) of
		      %% Line 963
		      <'true'> when 'true' ->
			  %% Line 964
			  case L of
			    %% Line 965
			    <[]> when 'true' ->
				%% Line 966
				[X|[]]
			    %% Line 967
			    <_cor9> when 'true' ->
				%% Line 968
				apply 'usort_1'/3
				    (Fun, X, L)
			  end
		      %% Line 970
		      <'false'> when 'true' ->
			  %% Line 971
			  apply 'ufsplit_1'/6
			      (Y, X, Fun, L, [], [])
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 973
		<'false'> when 'true' ->
		    %% Line 974
		    apply 'ufsplit_2'/4
			(Y, L, Fun, [X|[]])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'usort_1',3}}] )
	    -| ['compiler_generated'] )
	end
'umerge'/3 =
    %% Line 985
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,[],T2>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 986
	      T2
	  %% Line 987
	  <Fun,[H1|T1],T2>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_cor3> =
		  %% Line 988
		  apply 'ufmerge2_2'/5
		      (H1, T1, Fun, T2, [])
	      in  %% Line 988
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'umerge',3}}] )
	    -| ['compiler_generated'] )
	end
'rumerge'/3 =
    %% Line 994
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,T1,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 995
	      T1
	  %% Line 996
	  <Fun,T1,[H2|T2]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_cor3> =
		  %% Line 997
		  apply 'rufmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 997
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rumerge',3}}] )
	    -| ['compiler_generated'] )
	end
'usort'/1 =
    %% Line 1007
    fun (_cor0) ->
	case _cor0 of
	  <L0 = [X|[Y|L]]>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 1008
	      case L of
		%% Line 1009
		<[]> when 'true' ->
		    %% Line 1010
		    L0
		%% Line 1011
		<[Z|[]]>
		    when call 'erlang':'<'
			  (Y,
			   Z) ->
		    %% Line 1012
		    L0
		%% Line 1013
		<[Z|[]]>
		    when call 'erlang':'=='
			  (Y,
			   Z) ->
		    %% Line 1014
		    [X|[Y|[]]]
		%% Line 1015
		<[Z|[]]>
		    when call 'erlang':'<'
			  (Z,
			   X) ->
		    %% Line 1016
		    [Z|[X|[Y|[]]]]
		%% Line 1017
		<[Z|[]]>
		    when call 'erlang':'=='
			  (Z,
			   X) ->
		    %% Line 1018
		    [X|[Y|[]]]
		%% Line 1019
		<[Z|[]]> when 'true' ->
		    %% Line 1020
		    [X|[Z|[Y|[]]]]
		%% Line 1021
		<_cor4> when 'true' ->
		    %% Line 1022
		    apply 'usplit_1'/5
			(X, Y, L, [], [])
	      end
	  %% Line 1024
	  <[X|[Y|L]]>
	      when call 'erlang':'>'
		    (X,
		     Y) ->
	      %% Line 1025
	      case L of
		%% Line 1026
		<[]> when 'true' ->
		    %% Line 1027
		    [Y|[X|[]]]
		%% Line 1028
		<[Z|[]]>
		    when call 'erlang':'<'
			  (X,
			   Z) ->
		    %% Line 1029
		    [Y|[X|L]]
		%% Line 1030
		<[Z|[]]>
		    when call 'erlang':'=='
			  (X,
			   Z) ->
		    %% Line 1031
		    [Y|[X|[]]]
		%% Line 1032
		<[Z|[]]>
		    when call 'erlang':'<'
			  (Z,
			   Y) ->
		    %% Line 1033
		    [Z|[Y|[X|[]]]]
		%% Line 1034
		<[Z|[]]>
		    when call 'erlang':'=='
			  (Z,
			   Y) ->
		    %% Line 1035
		    [Y|[X|[]]]
		%% Line 1036
		<[Z|[]]> when 'true' ->
		    %% Line 1037
		    [Y|[Z|[X|[]]]]
		%% Line 1038
		<_cor5> when 'true' ->
		    %% Line 1039
		    apply 'usplit_2'/5
			(X, Y, L, [], [])
	      end
	  %% Line 1041
	  <[X|[_X_Y|L]]> when 'true' ->
	      %% Line 1042
	      apply 'usort_1'/2
		  (X, L)
	  %% Line 1043
	  <L = [_cor6|[]]> when 'true' ->
	      %% Line 1044
	      L
	  %% Line 1045
	  <[]> when 'true' ->
	      %% Line 1046
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'usort',1}}] )
	    -| ['compiler_generated'] )
	end
'usort_1'/2 =
    %% Line 1048
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,[Y|L]>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 1049
	      apply 'usort_1'/2
		  (X, L)
	  %% Line 1050
	  <X,[Y|L]>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 1051
	      apply 'usplit_1'/5
		  (X, Y, L, [], [])
	  %% Line 1052
	  <X,[Y|L]> when 'true' ->
	      %% Line 1053
	      apply 'usplit_2'/5
		  (X, Y, L, [], [])
	  %% Line 1054
	  <X,[]> when 'true' ->
	      %% Line 1055
	      [X|[]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'usort_1',2}}] )
	    -| ['compiler_generated'] )
	end
'umerge'/1 =
    %% Line 1066
    fun (_cor0) ->
	%% Line 1067
	apply 'umergel'/1
	    (_cor0)
'umerge3'/3 =
    %% Line 1082
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L1,[],L3> when 'true' ->
	      %% Line 1083
	      apply 'umerge'/2
		  (L1, L3)
	  %% Line 1084
	  <L1,L2,[]> when 'true' ->
	      %% Line 1085
	      apply 'umerge'/2
		  (L1, L2)
	  %% Line 1086
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_cor3> =
		  %% Line 1087
		  apply 'umerge3_1'/7
		      (L1, [H2|H3], T2, H2, [], T3, H3)
	      in  %% Line 1087
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'umerge3',3}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3'/3 =
    %% Line 1095
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L1,[],L3> when 'true' ->
	      %% Line 1096
	      apply 'rumerge'/2
		  (L1, L3)
	  %% Line 1097
	  <L1,L2,[]> when 'true' ->
	      %% Line 1098
	      apply 'rumerge'/2
		  (L1, L2)
	  %% Line 1099
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_cor3> =
		  %% Line 1100
		  apply 'rumerge3_1'/6
		      (L1, T2, H2, [], T3, H3)
	      in  %% Line 1100
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rumerge3',3}}] )
	    -| ['compiler_generated'] )
	end
'umerge'/2 =
    %% Line 1112
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],T2> when 'true' ->
	      %% Line 1113
	      T2
	  %% Line 1114
	  <[H1|T1],T2> when 'true' ->
	      let <_cor2> =
		  %% Line 1115
		  apply 'umerge2_2'/4
		      (T1, T2, [], H1)
	      in  %% Line 1115
		  call 'lists':'reverse'
		      (_cor2, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'umerge',2}}] )
	    -| ['compiler_generated'] )
	end
'rumerge'/2 =
    %% Line 1125
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T1,[]> when 'true' ->
	      %% Line 1126
	      T1
	  %% Line 1127
	  <T1,[H2|T2]> when 'true' ->
	      let <_cor2> =
		  %% Line 1128
		  apply 'rumerge2_1'/4
		      (T1, T2, [], H2)
	      in  %% Line 1128
		  call 'lists':'reverse'
		      (_cor2, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'rumerge',2}}] )
	    -| ['compiler_generated'] )
	end
'all'/2 =
    %% Line 1160
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,[Hd|Tail]> when 'true' ->
	      %% Line 1161
	      case apply Pred
		       (Hd) of
		%% Line 1162
		<'true'> when 'true' ->
		    apply 'all'/2
			(Pred, Tail)
		%% Line 1163
		<'false'> when 'true' ->
		    'false'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1165
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      'true'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'all',2}}] )
	    -| ['compiler_generated'] )
	end
'any'/2 =
    %% Line 1172
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,[Hd|Tail]> when 'true' ->
	      %% Line 1173
	      case apply Pred
		       (Hd) of
		%% Line 1174
		<'true'> when 'true' ->
		    'true'
		%% Line 1175
		<'false'> when 'true' ->
		    apply 'any'/2
			(Pred, Tail)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1177
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      'false'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'any',2}}] )
	    -| ['compiler_generated'] )
	end
'map'/2 =
    %% Line 1186
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[H|T]> when 'true' ->
	      let <_cor2> =
		  %% Line 1187
		  apply F
		      (H)
	      in  let <_cor3> =
		      %% Line 1187
		      apply 'map'/2
			  (F, T)
		  in  %% Line 1187
		      [_cor2|_cor3]
	  %% Line 1188
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'map',2}}] )
	    -| ['compiler_generated'] )
	end
'flatmap'/2 =
    %% Line 1197
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[Hd|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 1198
		  apply F
		      (Hd)
	      in  let <_cor2> =
		      %% Line 1198
		      apply 'flatmap'/2
			  (F, Tail)
		  in  %% Line 1198
		      call 'erlang':'++'
			  (_cor3, _cor2)
	  %% Line 1199
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'flatmap',2}}] )
	    -| ['compiler_generated'] )
	end
'foldl'/3 =
    %% Line 1210
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Accu,[Hd|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 1211
		  apply F
		      (Hd, Accu)
	      in  %% Line 1211
		  apply 'foldl'/3
		      (F, _cor3, Tail)
	  %% Line 1212
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      Accu
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'foldl',3}}] )
	    -| ['compiler_generated'] )
	end
'foldr'/3 =
    %% Line 1223
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Accu,[Hd|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 1224
		  apply 'foldr'/3
		      (F, Accu, Tail)
	      in  %% Line 1224
		  apply F
		      (Hd, _cor3)
	  %% Line 1225
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      Accu
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'foldr',3}}] )
	    -| ['compiler_generated'] )
	end
'filter'/2 =
    %% Line 1233
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,List>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      %% Line 1234
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[E|_cor3]> when 'true' ->
				  ( case apply Pred
					     (E) of
				      <'true'> when 'true' ->
					  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [E|_cor5]
						-| ['compiler_generated'] )
				      ( <'false'> when 'true' ->
					    apply 'lc$^0'/1
						(_cor3)
					-| ['compiler_generated'] )
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor6})
					-| ['compiler_generated'] )
				    end
				    -| ['list_comprehension'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(List)
		-| ['list_comprehension'] )
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'filter',2}}] )
	    -| ['compiler_generated'] )
	end
'partition'/2 =
    %% Line 1246
    fun (_cor1,_cor0) ->
	%% Line 1247
	apply 'partition'/4
	    (_cor1, _cor0, [], [])
'partition'/4 =
    %% Line 1249
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Pred,[H|T],As,Bs> when 'true' ->
	      %% Line 1250
	      case apply Pred
		       (H) of
		%% Line 1251
		<'true'> when 'true' ->
		    apply 'partition'/4
			(Pred, T, [H|As], Bs)
		%% Line 1252
		<'false'> when 'true' ->
		    apply 'partition'/4
			(Pred, T, As, [H|Bs])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1254
	  <Pred,[],As,Bs>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      let <_cor6> =
		  %% Line 1255
		  apply 'reverse'/1
		      (As)
	      in  let <_cor5> =
		      %% Line 1255
		      apply 'reverse'/1
			  (Bs)
		  in  %% Line 1255
		      {_cor6,_cor5}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'partition',4}}] )
	    -| ['compiler_generated'] )
	end
'filtermap'/2 =
    %% Line 1264
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[Hd|Tail]> when 'true' ->
	      %% Line 1265
	      case apply F
		       (Hd) of
		%% Line 1266
		<'true'> when 'true' ->
		    let <_cor2> =
			%% Line 1267
			apply 'filtermap'/2
			    (F, Tail)
		    in  %% Line 1267
			[Hd|_cor2]
		%% Line 1268
		<{'true',Val}> when 'true' ->
		    let <_cor3> =
			%% Line 1269
			apply 'filtermap'/2
			    (F, Tail)
		    in  %% Line 1269
			[Val|_cor3]
		%% Line 1270
		<'false'> when 'true' ->
		    %% Line 1271
		    apply 'filtermap'/2
			(F, Tail)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1273
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'filtermap',2}}] )
	    -| ['compiler_generated'] )
	end
'zf'/2 =
    %% Line 1277
    fun (_cor1,_cor0) ->
	%% Line 1278
	apply 'filtermap'/2
	    (_cor1, _cor0)
'foreach'/2 =
    %% Line 1285
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[Hd|Tail]> when 'true' ->
	      do  %% Line 1286
		  apply F
		      (Hd)
		  %% Line 1287
		  apply 'foreach'/2
		      (F, Tail)
	  %% Line 1288
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'foreach',2}}] )
	    -| ['compiler_generated'] )
	end
'mapfoldl'/3 =
    %% Line 1301
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Accu0,[Hd|Tail]> when 'true' ->
	      %% Line 1302
	      case apply F
		       (Hd, Accu0) of
		<{R,Accu1}> when 'true' ->
		    %% Line 1303
		    case apply 'mapfoldl'/3
			     (F, Accu1, Tail) of
		      <{Rs,Accu2}> when 'true' ->
			  %% Line 1304
			  {[R|Rs],Accu2}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1305
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      {[],Accu}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mapfoldl',3}}] )
	    -| ['compiler_generated'] )
	end
'mapfoldr'/3 =
    %% Line 1318
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Accu0,[Hd|Tail]> when 'true' ->
	      %% Line 1319
	      case apply 'mapfoldr'/3
		       (F, Accu0, Tail) of
		<{Rs,Accu1}> when 'true' ->
		    %% Line 1320
		    case apply F
			     (Hd, Accu1) of
		      <{R,Accu2}> when 'true' ->
			  %% Line 1321
			  {[R|Rs],Accu2}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1322
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      {[],Accu}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mapfoldr',3}}] )
	    -| ['compiler_generated'] )
	end
'takewhile'/2 =
    %% Line 1330
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,[Hd|Tail]> when 'true' ->
	      %% Line 1331
	      case apply Pred
		       (Hd) of
		%% Line 1332
		<'true'> when 'true' ->
		    let <_cor2> =
			apply 'takewhile'/2
			    (Pred, Tail)
		    in  [Hd|_cor2]
		%% Line 1333
		<'false'> when 'true' ->
		    []
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1335
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'takewhile',2}}] )
	    -| ['compiler_generated'] )
	end
'dropwhile'/2 =
    %% Line 1343
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,Rest = [Hd|Tail]> when 'true' ->
	      %% Line 1344
	      case apply Pred
		       (Hd) of
		%% Line 1345
		<'true'> when 'true' ->
		    apply 'dropwhile'/2
			(Pred, Tail)
		%% Line 1346
		<'false'> when 'true' ->
		    Rest
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1348
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'dropwhile',2}}] )
	    -| ['compiler_generated'] )
	end
'splitwith'/2 =
    %% Line 1357
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,List>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      %% Line 1358
	      apply 'splitwith'/3
		  (Pred, List, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'splitwith',2}}] )
	    -| ['compiler_generated'] )
	end
'splitwith'/3 =
    %% Line 1360
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pred,[Hd|Tail],Taken> when 'true' ->
	      %% Line 1361
	      case apply Pred
		       (Hd) of
		%% Line 1362
		<'true'> when 'true' ->
		    apply 'splitwith'/3
			(Pred, Tail, [Hd|Taken])
		%% Line 1363
		<'false'> when 'true' ->
		    let <_cor3> =
			apply 'reverse'/1
			    (Taken)
		    in  {_cor3,[Hd|Tail]}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1365
	  <Pred,[],Taken>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      let <_cor5> =
		  %% Line 1366
		  apply 'reverse'/1
		      (Taken)
	      in  %% Line 1366
		  {_cor5,[]}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'splitwith',3}}] )
	    -| ['compiler_generated'] )
	end
'split'/2 =
    %% Line 1375
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,List>
	      when try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor3> =
			    call 'erlang':'>='
				(N, 0)
			in  let <_cor4> =
				call 'erlang':'is_list'
				    (List)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1376
	      case apply 'split'/3
		       (N, List, []) of
		%% Line 1377
		<Result = {_cor9,_cor10}> when 'true' ->
		    Result
		%% Line 1378
		<Fault>
		    when call 'erlang':'is_atom'
			  (Fault) ->
		    %% Line 1379
		    call 'erlang':'error'
			(Fault, [N|[List|[]]])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1381
	  <N,List> when 'true' ->
	      %% Line 1382
	      call 'erlang':'error'
		  ('badarg', [N|[List|[]]])
	end
'split'/3 =
    %% Line 1384
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,L,R> when 'true' ->
	      let <_cor3> =
		  %% Line 1385
		  call 'lists':'reverse'
		      (R, [])
	      in  %% Line 1385
		  {_cor3,L}
	  %% Line 1386
	  <N,[H|T],R> when 'true' ->
	      let <_cor4> =
		  %% Line 1387
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 1387
		  apply 'split'/3
		      (_cor4, T, [H|R])
	  %% Line 1388
	  <_cor8,[],_cor9> when 'true' ->
	      %% Line 1389
	      'badarg'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'split',3}}] )
	    -| ['compiler_generated'] )
	end
'split_1'/5 =
    %% Line 1418
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>='
		    (Z,
		     Y) ->
	      %% Line 1419
	      apply 'split_1'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1420
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>='
		    (Z,
		     X) ->
	      %% Line 1421
	      apply 'split_1'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1422
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1423
	      apply 'split_1'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1424
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1425
	      apply 'split_1_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1426
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1427
	      apply 'rmergel'/2
		  ([[Y|[X|R]]|Rs], [])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'split_1',5}}] )
	    -| ['compiler_generated'] )
	end
'split_1_1'/6 =
    %% Line 1429
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>='
		    (Z,
		     Y) ->
	      %% Line 1430
	      apply 'split_1_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1431
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>='
		    (Z,
		     X) ->
	      %% Line 1432
	      apply 'split_1_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1433
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=<'
		    (S,
		     Z) ->
	      %% Line 1434
	      apply 'split_1'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1435
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1436
	      apply 'split_1'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1437
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1438
	      apply 'rmergel'/2
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'split_1_1',6}}] )
	    -| ['compiler_generated'] )
	end
'split_2'/5 =
    %% Line 1441
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=<'
		    (Z,
		     Y) ->
	      %% Line 1442
	      apply 'split_2'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1443
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=<'
		    (Z,
		     X) ->
	      %% Line 1444
	      apply 'split_2'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1445
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1446
	      apply 'split_2'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1447
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1448
	      apply 'split_2_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1449
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1450
	      apply 'mergel'/2
		  ([[Y|[X|R]]|Rs], [])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'split_2',5}}] )
	    -| ['compiler_generated'] )
	end
'split_2_1'/6 =
    %% Line 1452
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=<'
		    (Z,
		     Y) ->
	      %% Line 1453
	      apply 'split_2_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1454
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=<'
		    (Z,
		     X) ->
	      %% Line 1455
	      apply 'split_2_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1456
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (S,
		     Z) ->
	      %% Line 1457
	      apply 'split_2'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1458
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1459
	      apply 'split_2'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1460
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1461
	      apply 'mergel'/2
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'split_2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'mergel'/2 =
    %% Line 1465
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[]|L],Acc> when 'true' ->
	      %% Line 1466
	      apply 'mergel'/2
		  (L, Acc)
	  %% Line 1467
	  <[T1|[[H2|T2]|[[H3|T3]|L]]],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1468
		  apply 'merge3_1'/6
		      (T1, [], H2, T2, H3, T3)
	      in  %% Line 1468
		  apply 'mergel'/2
		      (L, [_cor2|Acc])
	  %% Line 1469
	  <[T1|[[H2|T2]|[]]],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1470
		  apply 'merge2_1'/4
		      (T1, H2, T2, [])
	      in  %% Line 1470
		  apply 'rmergel'/2
		      ([_cor3|Acc], [])
	  %% Line 1471
	  <[L|[]],[]> when 'true' ->
	      %% Line 1472
	      L
	  %% Line 1473
	  <[L|[]],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1474
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 1474
		  apply 'rmergel'/2
		      ([_cor4|Acc], [])
	  %% Line 1475
	  <[],[]> when 'true' ->
	      %% Line 1476
	      []
	  %% Line 1477
	  <[],Acc> when 'true' ->
	      %% Line 1478
	      apply 'rmergel'/2
		  (Acc, [])
	  %% Line 1479
	  <[A|[[]|L]],Acc> when 'true' ->
	      %% Line 1480
	      apply 'mergel'/2
		  ([A|L], Acc)
	  %% Line 1481
	  <[A|[B|[[]|L]]],Acc> when 'true' ->
	      %% Line 1482
	      apply 'mergel'/2
		  ([A|[B|L]], Acc)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'mergel',2}}] )
	    -| ['compiler_generated'] )
	end
'rmergel'/2 =
    %% Line 1484
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[H3|T3]|[[H2|T2]|[T1|L]]],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1485
		  apply 'rmerge3_1'/6
		      (T1, [], H2, T2, H3, T3)
	      in  %% Line 1485
		  apply 'rmergel'/2
		      (L, [_cor2|Acc])
	  %% Line 1486
	  <[[H2|T2]|[T1|[]]],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1487
		  apply 'rmerge2_1'/4
		      (T1, H2, T2, [])
	      in  %% Line 1487
		  apply 'mergel'/2
		      ([_cor3|Acc], [])
	  %% Line 1488
	  <[L|[]],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1489
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 1489
		  apply 'mergel'/2
		      ([_cor4|Acc], [])
	  %% Line 1490
	  <[],Acc> when 'true' ->
	      %% Line 1491
	      apply 'mergel'/2
		  (Acc, [])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'rmergel',2}}] )
	    -| ['compiler_generated'] )
	end
'merge3_1'/6 =
    %% Line 1496
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1516
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol21,_fol22,_fol23,_fol24,_fol25,_fol26,_fol27>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol22,
				 _fol25)
			    -| ['compiler_generated'] ) ->
			%% Line 1517
			( apply ( 'merge3_1'/6
				  -| ['compiler_generated'] )
			      (_fol21, ( [_fol22|_fol27]
					 -| ['compiler_generated'] ), _fol23, _fol24, _fol25, _fol26)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1518
		  ( <_fol28,_fol29,_fol30,_fol31,_fol32,_fol33,_fol34> when ( 'true'
									      -| ['compiler_generated'] ) ->
			%% Line 1519
			( apply ( 'merge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol28, _fol29, _fol30, _fol31, ( [_fol32|_fol34]
								 -| ['compiler_generated'] ), _fol33)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1498
	  <[H1|T1],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1530
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol35,_fol36,_fol37,_fol38,_fol39,_fol40,_fol41>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol37,
				 _fol39)
			    -| ['compiler_generated'] ) ->
			%% Line 1531
			( apply ( 'merge3_2'/6
				  -| ['compiler_generated'] )
			      (_fol35, _fol36, ( [_fol37|_fol41]
						 -| ['compiler_generated'] ), _fol38, _fol39, _fol40)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1532
		  ( <_fol42,_fol43,_fol44,_fol45,_fol46,_fol47,_fol48> when ( 'true'
									      -| ['compiler_generated'] ) ->
			%% Line 1533
			( apply ( 'merge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol42, _fol43, _fol44, _fol45, ( [_fol46|_fol48]
								 -| ['compiler_generated'] ), _fol47)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1500
	  <[],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1501
	      apply 'merge2_1'/4
		  (T2, H3, T3, [H2|M])
	  %% Line 1502
	  <[],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1503
	      apply 'merge2_2'/5
		  (T2, H3, T3, M, H2)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge3_1',6}}] )
	    -| ['compiler_generated'] )
	end
'merge3_2'/6 =
    %% Line 1506
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,M,[H2|T2],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1516
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol49,_fol50,_fol51,_fol52,_fol53,_fol54,_fol55>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol50,
				 _fol53)
			    -| ['compiler_generated'] ) ->
			%% Line 1517
			( apply ( 'merge3_1'/6
				  -| ['compiler_generated'] )
			      (_fol49, ( [_fol50|_fol55]
					 -| ['compiler_generated'] ), _fol51, _fol52, _fol53, _fol54)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1518
		  ( <_fol56,_fol57,_fol58,_fol59,_fol60,_fol61,_fol62> when ( 'true'
									      -| ['compiler_generated'] ) ->
			%% Line 1519
			( apply ( 'merge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol56, _fol57, _fol58, _fol59, ( [_fol60|_fol62]
								 -| ['compiler_generated'] ), _fol61)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1508
	  <T1,H1,M,[H2|T2],H3,T3> when 'true' ->
	      %% Line 1530
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol63,_fol64,_fol65,_fol66,_fol67,_fol68,_fol69>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol65,
				 _fol67)
			    -| ['compiler_generated'] ) ->
			%% Line 1531
			( apply ( 'merge3_2'/6
				  -| ['compiler_generated'] )
			      (_fol63, _fol64, ( [_fol65|_fol69]
						 -| ['compiler_generated'] ), _fol66, _fol67, _fol68)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1532
		  ( <_fol70,_fol71,_fol72,_fol73,_fol74,_fol75,_fol76> when ( 'true'
									      -| ['compiler_generated'] ) ->
			%% Line 1533
			( apply ( 'merge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol70, _fol71, _fol72, _fol73, ( [_fol74|_fol76]
								 -| ['compiler_generated'] ), _fol75)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1510
	  <T1,H1,M,[],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1511
	      apply 'merge2_1'/4
		  (T1, H3, T3, [H1|M])
	  %% Line 1512
	  <T1,H1,M,[],H3,T3> when 'true' ->
	      %% Line 1513
	      apply 'merge2_2'/5
		  (T1, H3, T3, M, H1)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge3_2',6}}] )
	    -| ['compiler_generated'] )
	end
'merge3_12'/7 =
    %% Line 1516
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1517
	      apply 'merge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	  %% Line 1518
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1519
	      apply 'merge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	end
'merge3_12_3'/6 =
    %% Line 1522
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1523
	      apply 'merge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	  %% Line 1524
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1525
	      apply 'merge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1526
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1527
	      apply 'merge2_1'/4
		  (T1, H2, T2, [H1|M])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge3_12_3',6}}] )
	    -| ['compiler_generated'] )
	end
'merge3_21'/7 =
    %% Line 1530
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1531
	      apply 'merge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	  %% Line 1532
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1533
	      apply 'merge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	end
'merge3_21_3'/6 =
    %% Line 1536
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1537
	      apply 'merge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	  %% Line 1538
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1539
	      apply 'merge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1540
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1541
	      apply 'merge2_2'/5
		  (T1, H2, T2, M, H1)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge3_21_3',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_1'/6 =
    %% Line 1546
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1566
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol77,_fol78,_fol79,_fol80,_fol81,_fol82,_fol83>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol79,
				 _fol81)
			    -| ['compiler_generated'] ) ->
			%% Line 1567
			( apply ( 'rmerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol77, _fol78, _fol79, _fol80, ( [_fol81|_fol83]
								 -| ['compiler_generated'] ), _fol82)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1568
		  ( <_fol84,_fol85,_fol86,_fol87,_fol88,_fol89,_fol90> when ( 'true'
									      -| ['compiler_generated'] ) ->
			%% Line 1569
			( apply ( 'rmerge3_2'/6
				  -| ['compiler_generated'] )
			      (_fol84, _fol85, ( [_fol86|_fol90]
						 -| ['compiler_generated'] ), _fol87, _fol88, _fol89)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1548
	  <[H1|T1],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1580
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol91,_fol92,_fol93,_fol94,_fol95,_fol96,_fol97>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol92,
				 _fol95)
			    -| ['compiler_generated'] ) ->
			%% Line 1581
			( apply ( 'rmerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol91, _fol92, _fol93, _fol94, ( [_fol95|_fol97]
								 -| ['compiler_generated'] ), _fol96)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1582
		  ( <_fol98,_fol99,_fol100,_fol101,_fol102,_fol103,_fol104> when ( 'true'
										   -| ['compiler_generated'] ) ->
			%% Line 1583
			( apply ( 'rmerge3_1'/6
				  -| ['compiler_generated'] )
			      (_fol98, ( [_fol99|_fol104]
					 -| ['compiler_generated'] ), _fol100, _fol101, _fol102, _fol103)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1550
	  <[],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1551
	      apply 'rmerge2_2'/5
		  (T2, H3, T3, M, H2)
	  %% Line 1552
	  <[],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1553
	      apply 'rmerge2_1'/4
		  (T2, H3, T3, [H2|M])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rmerge3_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_2'/6 =
    %% Line 1556
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,M,[H2|T2],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1566
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol105,_fol106,_fol107,_fol108,_fol109,_fol110,_fol111>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol107,
				 _fol109)
			    -| ['compiler_generated'] ) ->
			%% Line 1567
			( apply ( 'rmerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol105, _fol106, _fol107, _fol108, ( [_fol109|_fol111]
								     -| ['compiler_generated'] ), _fol110)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1568
		  ( <_fol112,_fol113,_fol114,_fol115,_fol116,_fol117,_fol118> when ( 'true'
										     -| ['compiler_generated'] ) ->
			%% Line 1569
			( apply ( 'rmerge3_2'/6
				  -| ['compiler_generated'] )
			      (_fol112, _fol113, ( [_fol114|_fol118]
						   -| ['compiler_generated'] ), _fol115, _fol116, _fol117)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1558
	  <T1,H1,M,[H2|T2],H3,T3> when 'true' ->
	      %% Line 1580
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol119,_fol120,_fol121,_fol122,_fol123,_fol124,_fol125>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol120,
				 _fol123)
			    -| ['compiler_generated'] ) ->
			%% Line 1581
			( apply ( 'rmerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol119, _fol120, _fol121, _fol122, ( [_fol123|_fol125]
								     -| ['compiler_generated'] ), _fol124)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1582
		  ( <_fol126,_fol127,_fol128,_fol129,_fol130,_fol131,_fol132> when ( 'true'
										     -| ['compiler_generated'] ) ->
			%% Line 1583
			( apply ( 'rmerge3_1'/6
				  -| ['compiler_generated'] )
			      (_fol126, ( [_fol127|_fol132]
					  -| ['compiler_generated'] ), _fol128, _fol129, _fol130, _fol131)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1560
	  <T1,H1,M,[],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1561
	      apply 'rmerge2_2'/5
		  (T1, H3, T3, M, H1)
	  %% Line 1562
	  <T1,H1,M,[],H3,T3> when 'true' ->
	      %% Line 1563
	      apply 'rmerge2_1'/4
		  (T1, H3, T3, [H1|M])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rmerge3_2',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_12'/7 =
    %% Line 1566
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1567
	      apply 'rmerge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1568
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1569
	      apply 'rmerge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	end
'rmerge3_12_3'/6 =
    %% Line 1572
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1573
	      apply 'rmerge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1574
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1575
	      apply 'rmerge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	  %% Line 1576
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1577
	      apply 'rmerge2_2'/5
		  (T1, H2, T2, M, H1)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rmerge3_12_3',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_21'/7 =
    %% Line 1580
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1581
	      apply 'rmerge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1582
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1583
	      apply 'rmerge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	end
'rmerge3_21_3'/6 =
    %% Line 1586
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1587
	      apply 'rmerge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1588
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1589
	      apply 'rmerge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	  %% Line 1590
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1591
	      apply 'rmerge2_1'/4
		  (T1, H2, T2, [H1|M])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rmerge3_21_3',6}}] )
	    -| ['compiler_generated'] )
	end
'merge2_1'/4 =
    %% Line 1595
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,T2,M>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1596
	      apply 'merge2_1'/4
		  (T1, H2, T2, [H1|M])
	  %% Line 1597
	  <[H1|T1],H2,T2,M> when 'true' ->
	      %% Line 1598
	      apply 'merge2_2'/5
		  (T1, H2, T2, M, H1)
	  %% Line 1599
	  <[],H2,T2,M> when 'true' ->
	      %% Line 1600
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'merge2_1',4}}] )
	    -| ['compiler_generated'] )
	end
'merge2_2'/5 =
    %% Line 1602
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,HdM,[H2|T2],M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1603
	      apply 'merge2_1'/4
		  (T1, H2, T2, [H1|[HdM|M]])
	  %% Line 1604
	  <T1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 1605
	      apply 'merge2_2'/5
		  (T1, H2, T2, [HdM|M], H1)
	  %% Line 1606
	  <T1,HdM,[],M,H1> when 'true' ->
	      %% Line 1607
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'merge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'rmerge2_1'/4 =
    %% Line 1611
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,T2,M>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1612
	      apply 'rmerge2_2'/5
		  (T1, H2, T2, M, H1)
	  %% Line 1613
	  <[H1|T1],H2,T2,M> when 'true' ->
	      %% Line 1614
	      apply 'rmerge2_1'/4
		  (T1, H2, T2, [H1|M])
	  %% Line 1615
	  <[],H2,T2,M> when 'true' ->
	      %% Line 1616
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rmerge2_1',4}}] )
	    -| ['compiler_generated'] )
	end
'rmerge2_2'/5 =
    %% Line 1618
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,HdM,[H2|T2],M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1619
	      apply 'rmerge2_2'/5
		  (T1, H2, T2, [HdM|M], H1)
	  %% Line 1620
	  <T1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 1621
	      apply 'rmerge2_1'/4
		  (T1, H2, T2, [H1|[HdM|M]])
	  %% Line 1622
	  <T1,HdM,[],M,H1> when 'true' ->
	      %% Line 1623
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'rmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'usplit_1'/5 =
    %% Line 1628
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>'
		    (Z,
		     Y) ->
	      %% Line 1629
	      apply 'usplit_1'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1630
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1631
	      apply 'usplit_1'/5
		  (X, Y, L, R, Rs)
	  %% Line 1632
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>'
		    (Z,
		     X) ->
	      %% Line 1633
	      apply 'usplit_1'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1634
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1635
	      apply 'usplit_1'/5
		  (X, Y, L, R, Rs)
	  %% Line 1636
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1637
	      apply 'usplit_1'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1638
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1639
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1640
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1641
	      apply 'rumergel'/3
		  ([[Y|[X|R]]|Rs], [], 'asc')
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'usplit_1',5}}] )
	    -| ['compiler_generated'] )
	end
'usplit_1_1'/6 =
    %% Line 1643
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (Z,
		     Y) ->
	      %% Line 1644
	      apply 'usplit_1_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1645
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1646
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1647
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (Z,
		     X) ->
	      %% Line 1648
	      apply 'usplit_1_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1649
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1650
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1651
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (Z,
		     S) ->
	      %% Line 1652
	      apply 'usplit_1'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1653
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     S) ->
	      %% Line 1654
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1655
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1656
	      apply 'usplit_1'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1657
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1658
	      apply 'rumergel'/3
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], 'asc')
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'usplit_1_1',6}}] )
	    -| ['compiler_generated'] )
	end
'usplit_2'/5 =
    %% Line 1661
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'<'
		    (Z,
		     Y) ->
	      %% Line 1662
	      apply 'usplit_2'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1663
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1664
	      apply 'usplit_2'/5
		  (X, Y, L, R, Rs)
	  %% Line 1665
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'<'
		    (Z,
		     X) ->
	      %% Line 1666
	      apply 'usplit_2'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1667
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1668
	      apply 'usplit_2'/5
		  (X, Y, L, R, Rs)
	  %% Line 1669
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1670
	      apply 'usplit_2'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1671
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1672
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1673
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1674
	      apply 'umergel'/3
		  ([[Y|[X|R]]|Rs], [], 'desc')
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'usplit_2',5}}] )
	    -| ['compiler_generated'] )
	end
'usplit_2_1'/6 =
    %% Line 1676
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'<'
		    (Z,
		     Y) ->
	      %% Line 1677
	      apply 'usplit_2_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1678
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1679
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1680
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'<'
		    (Z,
		     X) ->
	      %% Line 1681
	      apply 'usplit_2_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1682
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1683
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1684
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'<'
		    (Z,
		     S) ->
	      %% Line 1685
	      apply 'usplit_2'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1686
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     S) ->
	      %% Line 1687
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1688
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1689
	      apply 'usplit_2'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1690
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1691
	      apply 'umergel'/3
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], 'desc')
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'usplit_2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'umergel'/1 =
    %% Line 1695
    fun (_cor0) ->
	%% Line 1696
	apply 'umergel'/3
	    (_cor0, [], 'asc')
'umergel'/3 =
    %% Line 1698
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[]|L],Acc,O> when 'true' ->
	      %% Line 1699
	      apply 'umergel'/3
		  (L, Acc, O)
	  %% Line 1700
	  <[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,'asc'> when 'true' ->
	      let <_cor3> =
		  %% Line 1701
		  apply 'umerge3_1'/7
		      (T1, [H2|H3], T2, H2, [], T3, H3)
	      in  %% Line 1701
		  apply 'umergel'/3
		      (L, [_cor3|Acc], 'asc')
	  %% Line 1702
	  <[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,'desc'> when 'true' ->
	      let <_cor4> =
		  %% Line 1703
		  apply 'umerge3_1'/7
		      (T1, [H2|H3], T2, H2, [], T3, H3)
	      in  %% Line 1703
		  apply 'umergel'/3
		      (L, [_cor4|Acc], 'desc')
	  %% Line 1704
	  <[A|[[]|L]],Acc,O> when 'true' ->
	      %% Line 1705
	      apply 'umergel'/3
		  ([A|L], Acc, O)
	  %% Line 1706
	  <[A|[B|[[]|L]]],Acc,O> when 'true' ->
	      %% Line 1707
	      apply 'umergel'/3
		  ([A|[B|L]], Acc, O)
	  %% Line 1708
	  <[[H1|T1]|[T2|L]],Acc,'asc'> when 'true' ->
	      let <_cor5> =
		  %% Line 1709
		  apply 'umerge2_2'/4
		      (T1, T2, [], H1)
	      in  %% Line 1709
		  apply 'umergel'/3
		      (L, [_cor5|Acc], 'asc')
	  %% Line 1710
	  <[T2|[[H1|T1]|L]],Acc,'desc'> when 'true' ->
	      let <_cor6> =
		  %% Line 1711
		  apply 'umerge2_2'/4
		      (T1, T2, [], H1)
	      in  %% Line 1711
		  apply 'umergel'/3
		      (L, [_cor6|Acc], 'desc')
	  %% Line 1712
	  <[L|[]],[],_X_O> when 'true' ->
	      %% Line 1713
	      L
	  %% Line 1714
	  <[L|[]],Acc,O> when 'true' ->
	      let <_cor7> =
		  %% Line 1715
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 1715
		  apply 'rumergel'/3
		      ([_cor7|Acc], [], O)
	  %% Line 1716
	  <[],[],_X_O> when 'true' ->
	      %% Line 1717
	      []
	  %% Line 1718
	  <[],Acc,O> when 'true' ->
	      %% Line 1719
	      apply 'rumergel'/3
		  (Acc, [], O)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'umergel',3}}] )
	    -| ['compiler_generated'] )
	end
'rumergel'/3 =
    %% Line 1721
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,'asc'> when 'true' ->
	      let <_cor3> =
		  %% Line 1722
		  apply 'rumerge3_1'/6
		      (T1, T2, H2, [], T3, H3)
	      in  %% Line 1722
		  apply 'rumergel'/3
		      (L, [_cor3|Acc], 'asc')
	  %% Line 1723
	  <[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,'desc'> when 'true' ->
	      let <_cor4> =
		  %% Line 1724
		  apply 'rumerge3_1'/6
		      (T1, T2, H2, [], T3, H3)
	      in  %% Line 1724
		  apply 'rumergel'/3
		      (L, [_cor4|Acc], 'desc')
	  %% Line 1725
	  <[[H2|T2]|[T1|L]],Acc,'asc'> when 'true' ->
	      let <_cor5> =
		  %% Line 1726
		  apply 'rumerge2_1'/4
		      (T1, T2, [], H2)
	      in  %% Line 1726
		  apply 'rumergel'/3
		      (L, [_cor5|Acc], 'asc')
	  %% Line 1727
	  <[T1|[[H2|T2]|L]],Acc,'desc'> when 'true' ->
	      let <_cor6> =
		  %% Line 1728
		  apply 'rumerge2_1'/4
		      (T1, T2, [], H2)
	      in  %% Line 1728
		  apply 'rumergel'/3
		      (L, [_cor6|Acc], 'desc')
	  %% Line 1729
	  <[L|[]],Acc,O> when 'true' ->
	      let <_cor7> =
		  %% Line 1730
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 1730
		  apply 'umergel'/3
		      ([_cor7|Acc], [], O)
	  %% Line 1731
	  <[],Acc,O> when 'true' ->
	      %% Line 1732
	      apply 'umergel'/3
		  (Acc, [], O)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'rumergel',3}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_1'/7 =
    %% Line 1737
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1765
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_fol134,_fol135,_fol136,_fol137,_fol138,_fol139,_fol140,( _X_HdM
									       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol135,
				 _fol140)
			    -| ['compiler_generated'] ) ->
			%% Line 1766
			( apply ( 'umerge3_1'/7
				  -| ['compiler_generated'] )
			      (_fol134, _fol135, _fol136, _fol137, ( [_fol135|_fol138]
								     -| ['compiler_generated'] ), _fol139, _fol140)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1767
		  ( <_fol141,_fol142,_fol143,_fol144,_fol145,_fol146,_fol147,_fol148>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_fol147,
				 _fol148)
			    -| ['compiler_generated'] ) ->
			%% Line 1768
			( apply ( 'umerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol141, _fol142, _fol143, _fol144, _fol145, _fol146)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1769
		  ( <_fol149,_fol150,_fol151,_fol152,_fol153,_fol154,_fol155,( _X_HdM
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
			%% Line 1770
			( apply ( 'umerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol149, _fol150, _fol151, _fol152, ( [_fol155|_fol153]
								     -| ['compiler_generated'] ), _fol154)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1739
	  <[H1|T1],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1740
	      apply 'umerge3_2'/7
		  (T1, H1, T2, H2, M, T3, H3)
	  %% Line 1741
	  <[H1|T1],HdM,T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1781
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_fol156,_fol157,_fol158,_fol159,_fol160,_fol161,_fol162,( _X_HdM
									       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol159,
				 _fol162)
			    -| ['compiler_generated'] ) ->
			%% Line 1782
			( apply ( 'umerge3_2'/7
				  -| ['compiler_generated'] )
			      (_fol156, _fol157, _fol158, _fol159, ( [_fol159|_fol160]
								     -| ['compiler_generated'] ), _fol161, _fol162)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1783
		  ( <_fol163,_fol164,_fol165,_fol166,_fol167,_fol168,_fol169,_fol170>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_fol169,
				 _fol170)
			    -| ['compiler_generated'] ) ->
			%% Line 1784
			( apply ( 'umerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol163, _fol164, _fol165, _fol166, _fol167, _fol168)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1785
		  ( <_fol171,_fol172,_fol173,_fol174,_fol175,_fol176,_fol177,( _X_HdM
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
			%% Line 1786
			( apply ( 'umerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol171, _fol172, _fol173, _fol174, ( [_fol177|_fol175]
								     -| ['compiler_generated'] ), _fol176)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1743
	  <[],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1744
	      apply 'umerge2_1'/5
		  (T2, T3, M, HdM, H3)
	  %% Line 1745
	  <[],_X_HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1746
	      apply 'umerge2_1'/5
		  (T2, T3, [H2|M], H2, H3)
	  %% Line 1747
	  <[],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1748
	      apply 'umerge2_2'/4
		  (T2, T3, M, H2)
	  %% Line 1749
	  <[],_X_HdM,T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1750
	      apply 'umerge2_2'/4
		  (T2, T3, [H3|M], H2)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'umerge3_1',7}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_2'/7 =
    %% Line 1753
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,[H2|T2],HdM,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1765
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_fol178,_fol179,_fol180,_fol181,_fol182,_fol183,_fol184,( _X_HdM
									       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol179,
				 _fol184)
			    -| ['compiler_generated'] ) ->
			%% Line 1766
			( apply ( 'umerge3_1'/7
				  -| ['compiler_generated'] )
			      (_fol178, _fol179, _fol180, _fol181, ( [_fol179|_fol182]
								     -| ['compiler_generated'] ), _fol183, _fol184)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1767
		  ( <_fol185,_fol186,_fol187,_fol188,_fol189,_fol190,_fol191,_fol192>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_fol191,
				 _fol192)
			    -| ['compiler_generated'] ) ->
			%% Line 1768
			( apply ( 'umerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol185, _fol186, _fol187, _fol188, _fol189, _fol190)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1769
		  ( <_fol193,_fol194,_fol195,_fol196,_fol197,_fol198,_fol199,( _X_HdM
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
			%% Line 1770
			( apply ( 'umerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol193, _fol194, _fol195, _fol196, ( [_fol199|_fol197]
								     -| ['compiler_generated'] ), _fol198)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1755
	  <T1,H1,[H2|T2],HdM,M,T3,H3> when 'true' ->
	      %% Line 1781
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_fol200,_fol201,_fol202,_fol203,_fol204,_fol205,_fol206,( _X_HdM
									       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol203,
				 _fol206)
			    -| ['compiler_generated'] ) ->
			%% Line 1782
			( apply ( 'umerge3_2'/7
				  -| ['compiler_generated'] )
			      (_fol200, _fol201, _fol202, _fol203, ( [_fol203|_fol204]
								     -| ['compiler_generated'] ), _fol205, _fol206)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1783
		  ( <_fol207,_fol208,_fol209,_fol210,_fol211,_fol212,_fol213,_fol214>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_fol213,
				 _fol214)
			    -| ['compiler_generated'] ) ->
			%% Line 1784
			( apply ( 'umerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol207, _fol208, _fol209, _fol210, _fol211, _fol212)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1785
		  ( <_fol215,_fol216,_fol217,_fol218,_fol219,_fol220,_fol221,( _X_HdM
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
			%% Line 1786
			( apply ( 'umerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol215, _fol216, _fol217, _fol218, ( [_fol221|_fol219]
								     -| ['compiler_generated'] ), _fol220)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1757
	  <T1,H1,[],_X_HdM,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1758
	      apply 'umerge2_1'/5
		  (T1, T3, [H1|M], H1, H3)
	  %% Line 1759
	  <T1,H1,[],HdM,M,T3,H3>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1760
	      apply 'umerge2_2'/4
		  (T1, T3, M, H1)
	  %% Line 1761
	  <T1,H1,[],_X_HdM,M,T3,H3> when 'true' ->
	      %% Line 1762
	      apply 'umerge2_2'/4
		  (T1, T3, [H3|M], H1)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'umerge3_2',7}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_12'/8 =
    %% Line 1765
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1766
	      apply 'umerge3_1'/7
		  (T1, H1, T2, H2, [H1|M], T3, H3)
	  %% Line 1767
	  <T1,H1,T2,H2,M,T3,H3,HdM>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1768
	      apply 'umerge3_12_3'/6
		  (T1, H1, T2, H2, M, T3)
	  %% Line 1769
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM> when 'true' ->
	      %% Line 1770
	      apply 'umerge3_12_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	end
'umerge3_12_3'/6 =
    %% Line 1773
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1774
	      apply 'umerge3_1'/7
		  (T1, H1, T2, H2, [H1|M], T3, H3)
	  %% Line 1775
	  <T1,H1,T2,H2,M,[H3|T3]> when 'true' ->
	      %% Line 1776
	      apply 'umerge3_12_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	  %% Line 1777
	  <T1,H1,T2,H2,M,[]> when 'true' ->
	      %% Line 1778
	      apply 'umerge2_1'/5
		  (T1, T2, [H1|M], H1, H2)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'umerge3_12_3',6}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_21'/8 =
    %% Line 1781
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1782
	      apply 'umerge3_2'/7
		  (T1, H1, T2, H2, [H2|M], T3, H3)
	  %% Line 1783
	  <T1,H1,T2,H2,M,T3,H3,HdM>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1784
	      apply 'umerge3_21_3'/6
		  (T1, H1, T2, H2, M, T3)
	  %% Line 1785
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM> when 'true' ->
	      %% Line 1786
	      apply 'umerge3_21_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	end
'umerge3_21_3'/6 =
    %% Line 1789
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1790
	      apply 'umerge3_2'/7
		  (T1, H1, T2, H2, [H2|M], T3, H3)
	  %% Line 1791
	  <T1,H1,T2,H2,M,[H3|T3]> when 'true' ->
	      %% Line 1792
	      apply 'umerge3_21_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	  %% Line 1793
	  <T1,H1,T2,H2,M,[]> when 'true' ->
	      %% Line 1794
	      apply 'umerge2_2'/4
		  (T1, T2, [H2|M], H1)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'umerge3_21_3',6}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_1'/6 =
    %% Line 1797
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1809
	      ( case <T1,H1,T2,H2,M,T3,H3> of
		  ( <_fol222,_fol223,_fol224,_fol225,_fol226,_fol227,_fol228>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol225,
				 _fol228)
			    -| ['compiler_generated'] ) ->
			%% Line 1810
			( apply ( 'rumerge3_12_3'/7
				  -| ['compiler_generated'] )
			      (_fol222, _fol224, _fol225, _fol226, _fol227, _fol228, _fol223)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1811
		  ( <_fol229,_fol230,_fol231,_fol232,_fol233,_fol234,_fol235> when ( 'true'
										     -| ['compiler_generated'] ) ->
			%% Line 1812
			( apply ( 'rumerge3_2'/7
				  -| ['compiler_generated'] )
			      (_fol229, _fol231, _fol232, _fol233, _fol234, _fol235, _fol230)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1799
	  <[H1|T1],T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1800
	      apply 'rumerge3_21_3'/7
		  (T1, T2, H2, M, T3, H3, H1)
	  %% Line 1801
	  <[H1|T1],T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1802
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|M], T3, H3)
	  %% Line 1803
	  <[],T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1804
	      apply 'rumerge2_2'/5
		  (T2, T3, M, H3, H2)
	  %% Line 1805
	  <[],T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1806
	      apply 'rumerge2_1'/4
		  (T2, T3, [H2|M], H3)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rumerge3_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_12a'/7 =
    %% Line 1809
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1810
	      apply 'rumerge3_12_3'/7
		  (T1, T2, H2, M, T3, H3, H1)
	  %% Line 1811
	  <T1,H1,T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1812
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, M, T3, H3, H1)
	end
'rumerge3_2'/7 =
    %% Line 1815
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,[H2|T2],H2M,M,T3,H3,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1834
	      ( case <T1,H1,T2,H2,M,T3,H3,H2M> of
		  ( <_fol236,_fol237,_fol238,_fol239,_fol240,_fol241,_fol242,_fol243>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol239,
				 _fol242)
			    -| ['compiler_generated'] ) ->
			%% Line 1835
			( apply ( 'rumerge3_12_3'/7
				  -| ['compiler_generated'] )
			      (_fol236, _fol238, _fol239, ( [_fol243|_fol240]
							    -| ['compiler_generated'] ), _fol241, _fol242, _fol237)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1836
		  ( <_fol244,_fol245,_fol246,_fol247,_fol248,_fol249,_fol250,_fol251> when ( 'true'
											     -| ['compiler_generated'] ) ->
			%% Line 1837
			( apply ( 'rumerge3_2'/7
				  -| ['compiler_generated'] )
			      (_fol244, _fol246, _fol247, ( [_fol251|_fol248]
							    -| ['compiler_generated'] ), _fol249, _fol250, _fol245)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1818
	  <T1,[H2|T2],H2M,M,T3,H3,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1819
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|M], T3, H3)
	  %% Line 1820
	  <T1,[H2|T2],H2M,M,T3,H3,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1822
	      apply 'rumerge3_21_3'/7
		  (T1, T2, H2, [H2M|M], T3, H3, H1)
	  %% Line 1823
	  <T1,[H2|T2],H2M,M,T3,H3,H1> when 'true' ->
	      %% Line 1825
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|[H2M|M]], T3, H3)
	  %% Line 1826
	  <T1,[],H2M,M,T3,H3,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1827
	      apply 'rumerge2_1'/4
		  (T1, T3, [H1|M], H3)
	  %% Line 1828
	  <T1,[],H2M,M,T3,H3,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1829
	      apply 'rumerge2_2'/5
		  (T1, T3, [H2M|M], H3, H1)
	  %% Line 1830
	  <T1,[],H2M,M,T3,H3,H1> when 'true' ->
	      %% Line 1831
	      apply 'rumerge2_1'/4
		  (T1, T3, [H1|[H2M|M]], H3)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rumerge3_2',7}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_12b'/8 =
    %% Line 1834
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,T3,H3,H2M>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1835
	      apply 'rumerge3_12_3'/7
		  (T1, T2, H2, [H2M|M], T3, H3, H1)
	  %% Line 1836
	  <T1,H1,T2,H2,M,T3,H3,H2M> when 'true' ->
	      %% Line 1837
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, [H2M|M], T3, H3, H1)
	end
'rumerge3_12_3'/7 =
    %% Line 1840
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1841
	      apply 'rumerge3_12_3'/7
		  (T1, T2, H2, [H3M|M], T3, H3, H1)
	  %% Line 1842
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=='
		    (H2,
		     H3M) ->
	      %% Line 1843
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, M, T3, H3, H1)
	  %% Line 1844
	  <T1,T2,H2,M,[H3|T3],H3M,H1> when 'true' ->
	      %% Line 1845
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, [H3M|M], T3, H3, H1)
	  %% Line 1846
	  <T1,T2,H2,M,[],H3M,H1>
	      when call 'erlang':'=='
		    (H2,
		     H3M) ->
	      %% Line 1847
	      apply 'rumerge2_2'/5
		  (T1, T2, M, H2, H1)
	  %% Line 1848
	  <T1,T2,H2,M,[],H3M,H1> when 'true' ->
	      %% Line 1849
	      apply 'rumerge2_2'/5
		  (T1, T2, [H3M|M], H2, H1)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rumerge3_12_3',7}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_21_3'/7 =
    %% Line 1852
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1853
	      apply 'rumerge3_21_3'/7
		  (T1, T2, H2, [H3M|M], T3, H3, H1)
	  %% Line 1854
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H3M) ->
	      %% Line 1855
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|M], T3, H3)
	  %% Line 1856
	  <T1,T2,H2,M,[H3|T3],H3M,H1> when 'true' ->
	      %% Line 1857
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|[H3M|M]], T3, H3)
	  %% Line 1858
	  <T1,T2,H2,M,[],H3M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H3M) ->
	      %% Line 1859
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|M], H2)
	  %% Line 1860
	  <T1,T2,H2,M,[],H3M,H1> when 'true' ->
	      %% Line 1861
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|[H3M|M]], H2)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rumerge3_21_3',7}}] )
	    -| ['compiler_generated'] )
	end
'umerge2_1'/5 =
    %% Line 1866
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],T2,M,_X_HdM,H2>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1867
	      apply 'umerge2_1'/5
		  (T1, T2, [H1|M], H1, H2)
	  %% Line 1868
	  <[H1|T1],T2,M,HdM,H2>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1869
	      apply 'umerge2_2'/4
		  (T1, T2, M, H1)
	  %% Line 1870
	  <[H1|T1],T2,M,_X_HdM,H2> when 'true' ->
	      %% Line 1871
	      apply 'umerge2_2'/4
		  (T1, T2, [H2|M], H1)
	  %% Line 1872
	  <[],T2,M,HdM,H2>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1873
	      call 'lists':'reverse'
		  (T2, M)
	  %% Line 1874
	  <[],T2,M,_X_HdM,H2> when 'true' ->
	      %% Line 1875
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'umerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'umerge2_2'/4 =
    %% Line 1877
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <T1,[H2|T2],M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1878
	      apply 'umerge2_1'/5
		  (T1, T2, [H1|M], H1, H2)
	  %% Line 1879
	  <T1,[H2|T2],M,H1> when 'true' ->
	      %% Line 1880
	      apply 'umerge2_2'/4
		  (T1, T2, [H2|M], H1)
	  %% Line 1881
	  <T1,[],M,H1> when 'true' ->
	      %% Line 1882
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'umerge2_2',4}}] )
	    -| ['compiler_generated'] )
	end
'rumerge2_1'/4 =
    %% Line 1887
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],T2,M,H2>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1888
	      apply 'rumerge2_2'/5
		  (T1, T2, M, H2, H1)
	  %% Line 1889
	  <[H1|T1],T2,M,H2> when 'true' ->
	      %% Line 1890
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|M], H2)
	  %% Line 1891
	  <[],T2,M,H2> when 'true' ->
	      %% Line 1892
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rumerge2_1',4}}] )
	    -| ['compiler_generated'] )
	end
'rumerge2_2'/5 =
    %% Line 1895
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,[H2|T2],M,H2M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1896
	      apply 'rumerge2_2'/5
		  (T1, T2, [H2M|M], H2, H1)
	  %% Line 1897
	  <T1,[H2|T2],M,H2M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1898
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|M], H2)
	  %% Line 1899
	  <T1,[H2|T2],M,H2M,H1> when 'true' ->
	      %% Line 1900
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|[H2M|M]], H2)
	  %% Line 1901
	  <T1,[],M,H2M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1902
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  %% Line 1903
	  <T1,[],M,H2M,H1> when 'true' ->
	      %% Line 1904
	      call 'lists':'reverse'
		  (T1, [H1|[H2M|M]])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'rumerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_1'/8 =
    %% Line 1909
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs> when 'true' ->
	      %% Line 1910
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 1911
		<EZ>
		    when call 'erlang':'=<'
			  (EY,
			   EZ) ->
		    %% Line 1912
		    apply 'keysplit_1'/8
			(I, Y, EY, Z, EZ, L, [X|R], Rs)
		%% Line 1913
		<EZ>
		    when call 'erlang':'=<'
			  (EX,
			   EZ) ->
		    %% Line 1914
		    apply 'keysplit_1'/8
			(I, Z, EZ, Y, EY, L, [X|R], Rs)
		%% Line 1915
		<_X_EZ>
		    when call 'erlang':'=:='
			  (R,
			   []) ->
		    %% Line 1916
		    apply 'keysplit_1'/8
			(I, X, EX, Y, EY, L, [Z|[]], Rs)
		%% Line 1917
		<EZ> when 'true' ->
		    %% Line 1918
		    apply 'keysplit_1_1'/10
			(I, X, EX, Y, EY, EZ, R, Rs, Z, L)
	      end
	  %% Line 1920
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs> when 'true' ->
	      %% Line 1921
	      apply 'rkeymergel'/4
		  (I, [[Y|[X|R]]|Rs], [], 'asc')
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'keysplit_1',8}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_1_1'/10 =
    %% Line 1923
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,ES,R,Rs,S,[Z|L]> when 'true' ->
	      %% Line 1924
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 1925
		<EZ>
		    when call 'erlang':'=<'
			  (EY,
			   EZ) ->
		    %% Line 1926
		    apply 'keysplit_1_1'/10
			(I, Y, EY, Z, EZ, ES, [X|R], Rs, S, L)
		%% Line 1927
		<EZ>
		    when call 'erlang':'=<'
			  (EX,
			   EZ) ->
		    %% Line 1928
		    apply 'keysplit_1_1'/10
			(I, Z, EZ, Y, EY, ES, [X|R], Rs, S, L)
		%% Line 1929
		<EZ>
		    when call 'erlang':'=<'
			  (ES,
			   EZ) ->
		    %% Line 1930
		    apply 'keysplit_1'/8
			(I, S, ES, Z, EZ, L, [], [[Y|[X|R]]|Rs])
		%% Line 1931
		<EZ> when 'true' ->
		    %% Line 1932
		    apply 'keysplit_1'/8
			(I, Z, EZ, S, ES, L, [], [[Y|[X|R]]|Rs])
	      end
	  %% Line 1934
	  <I,X,_X_EX,Y,_X_EY,_X_ES,R,Rs,S,[]> when 'true' ->
	      %% Line 1935
	      apply 'rkeymergel'/4
		  (I, [[S|[]]|[[Y|[X|R]]|Rs]], [], 'asc')
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'keysplit_1_1',10}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_2'/8 =
    %% Line 1938
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs> when 'true' ->
	      %% Line 1939
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 1940
		<EZ>
		    when call 'erlang':'>'
			  (EY,
			   EZ) ->
		    %% Line 1941
		    apply 'keysplit_2'/8
			(I, Y, EY, Z, EZ, L, [X|R], Rs)
		%% Line 1942
		<EZ>
		    when call 'erlang':'>'
			  (EX,
			   EZ) ->
		    %% Line 1943
		    apply 'keysplit_2'/8
			(I, Z, EZ, Y, EY, L, [X|R], Rs)
		%% Line 1944
		<_X_EZ>
		    when call 'erlang':'=:='
			  (R,
			   []) ->
		    %% Line 1945
		    apply 'keysplit_2'/8
			(I, X, EX, Y, EY, L, [Z|[]], Rs)
		%% Line 1946
		<EZ> when 'true' ->
		    %% Line 1947
		    apply 'keysplit_2_1'/10
			(I, X, EX, Y, EY, EZ, R, Rs, Z, L)
	      end
	  %% Line 1949
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs> when 'true' ->
	      %% Line 1950
	      apply 'keymergel'/4
		  (I, [[Y|[X|R]]|Rs], [], 'desc')
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'keysplit_2',8}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_2_1'/10 =
    %% Line 1952
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,ES,R,Rs,S,[Z|L]> when 'true' ->
	      %% Line 1953
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 1954
		<EZ>
		    when call 'erlang':'>'
			  (EY,
			   EZ) ->
		    %% Line 1955
		    apply 'keysplit_2_1'/10
			(I, Y, EY, Z, EZ, ES, [X|R], Rs, S, L)
		%% Line 1956
		<EZ>
		    when call 'erlang':'>'
			  (EX,
			   EZ) ->
		    %% Line 1957
		    apply 'keysplit_2_1'/10
			(I, Z, EZ, Y, EY, ES, [X|R], Rs, S, L)
		%% Line 1958
		<EZ>
		    when call 'erlang':'>'
			  (ES,
			   EZ) ->
		    %% Line 1959
		    apply 'keysplit_2'/8
			(I, S, ES, Z, EZ, L, [], [[Y|[X|R]]|Rs])
		%% Line 1960
		<EZ> when 'true' ->
		    %% Line 1961
		    apply 'keysplit_2'/8
			(I, Z, EZ, S, ES, L, [], [[Y|[X|R]]|Rs])
	      end
	  %% Line 1963
	  <I,X,_X_EX,Y,_X_EY,_X_ES,R,Rs,S,[]> when 'true' ->
	      %% Line 1964
	      apply 'keymergel'/4
		  (I, [[S|[]]|[[Y|[X|R]]|Rs]], [], 'desc')
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'keysplit_2_1',10}}] )
	    -| ['compiler_generated'] )
	end
'keymergel'/4 =
    %% Line 1966
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <I,[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'asc') ->
	      let <_cor5> =
		  %% Line 1967
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor4> =
		      %% Line 1967
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 1967
			  apply 'keymerge3_1'/10
			      (I, T1, [], O, _cor5, H2, T2, _cor4, H3, T3)
		      in  %% Line 1968
			  apply 'keymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 1969
	  <I,[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'desc') ->
	      let <_cor8> =
		  %% Line 1970
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor7> =
		      %% Line 1970
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 1970
			  apply 'keymerge3_1'/10
			      (I, T1, [], O, _cor8, H2, T2, _cor7, H3, T3)
		      in  %% Line 1971
			  apply 'keymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 1972
	  <I,[T1|[[H2|T2]|L]],Acc,'asc'> when 'true' ->
	      let <_cor10> =
		  %% Line 1973
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor11> =
		      %% Line 1973
		      apply 'keymerge2_1'/6
			  (I, T1, _cor10, H2, T2, [])
		  in  %% Line 1973
		      apply 'keymergel'/4
			  (I, L, [_cor11|Acc], 'asc')
	  %% Line 1974
	  <I,[[H2|T2]|[T1|L]],Acc,'desc'> when 'true' ->
	      let <_cor12> =
		  %% Line 1975
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor13> =
		      %% Line 1975
		      apply 'keymerge2_1'/6
			  (I, T1, _cor12, H2, T2, [])
		  in  %% Line 1975
		      apply 'keymergel'/4
			  (I, L, [_cor13|Acc], 'desc')
	  %% Line 1976
	  <_X_I,[L|[]],[],_X_O> when 'true' ->
	      %% Line 1977
	      L
	  %% Line 1978
	  <I,[L|[]],Acc,O> when 'true' ->
	      let <_cor14> =
		  %% Line 1979
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 1979
		  apply 'rkeymergel'/4
		      (I, [_cor14|Acc], [], O)
	  %% Line 1980
	  <I,[],Acc,O> when 'true' ->
	      %% Line 1981
	      apply 'rkeymergel'/4
		  (I, Acc, [], O)
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'keymergel',4}}] )
	    -| ['compiler_generated'] )
	end
'rkeymergel'/4 =
    %% Line 1983
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <I,[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'asc') ->
	      let <_cor5> =
		  %% Line 1984
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor4> =
		      %% Line 1984
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 1984
			  apply 'rkeymerge3_1'/10
			      (I, T1, [], O, _cor5, H2, T2, _cor4, H3, T3)
		      in  %% Line 1985
			  apply 'rkeymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 1986
	  <I,[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'desc') ->
	      let <_cor8> =
		  %% Line 1987
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor7> =
		      %% Line 1987
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 1987
			  apply 'rkeymerge3_1'/10
			      (I, T1, [], O, _cor8, H2, T2, _cor7, H3, T3)
		      in  %% Line 1988
			  apply 'rkeymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 1989
	  <I,[[H2|T2]|[T1|L]],Acc,'asc'> when 'true' ->
	      let <_cor10> =
		  %% Line 1990
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor11> =
		      %% Line 1990
		      apply 'rkeymerge2_1'/6
			  (I, T1, _cor10, H2, T2, [])
		  in  %% Line 1990
		      apply 'rkeymergel'/4
			  (I, L, [_cor11|Acc], 'asc')
	  %% Line 1991
	  <I,[T1|[[H2|T2]|L]],Acc,'desc'> when 'true' ->
	      let <_cor12> =
		  %% Line 1992
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor13> =
		      %% Line 1992
		      apply 'rkeymerge2_1'/6
			  (I, T1, _cor12, H2, T2, [])
		  in  %% Line 1992
		      apply 'rkeymergel'/4
			  (I, L, [_cor13|Acc], 'desc')
	  %% Line 1993
	  <I,[L|[]],Acc,O> when 'true' ->
	      let <_cor14> =
		  %% Line 1994
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 1994
		  apply 'keymergel'/4
		      (I, [_cor14|Acc], [], O)
	  %% Line 1995
	  <I,[],Acc,O> when 'true' ->
	      %% Line 1996
	      apply 'keymergel'/4
		  (I, Acc, [], O)
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'rkeymergel',4}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_1'/10 =
    %% Line 2001
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],M,D,E2,H2,T2,E3,H3,T3> when 'true' ->
	      %% Line 2002
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2003
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2027
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_fol252,_fol253,_fol254,_fol255,_fol256,_fol257,_fol258,_fol259,_fol260,_fol261,_fol262,_fol263>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol253,
				       _fol259)
				  -| ['compiler_generated'] ) ->
			      %% Line 2028
			      ( apply ( 'keymerge3_1'/10
					-| ['compiler_generated'] )
				    (_fol252, _fol255, ( [_fol254|_fol262]
							 -| ['compiler_generated'] ), _fol263, _fol256, _fol257, _fol258, _fol259, _fol260, _fol261)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2029
			( <_fol264,_fol265,_fol266,_fol267,_fol268,_fol269,_fol270,( _X_E3
										     -| ['compiler_generated'] ),_fol271,_fol272,_fol273,( _X_D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2030
			      ( apply ( 'keymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol264, _fol265, _fol266, _fol267, _fol268, _fol269, _fol270, _fol272, ( [_fol271|_fol273]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2005
		<E1> when 'true' ->
		    %% Line 2044
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T2> of
			( <_fol274,_fol275,_fol276,_fol277,_fol278,_fol279,_fol280,_fol281,_fol282,_fol283,_fol284,( D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol278,
				       _fol281)
				  -| ['compiler_generated'] ) ->
			      %% Line 2045
			      ( apply ( 'keymerge3_2'/10
					-| ['compiler_generated'] )
				    (_fol274, _fol275, _fol276, _fol277, _fol280, ( [_fol279|_fol284]
										    -| ['compiler_generated'] ), ( D
														   -| ['compiler_generated'] ), _fol281, _fol282, _fol283)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2046
			( <_fol285,_fol286,_fol287,_fol288,_fol289,_fol290,_fol291,( _X_E3
										     -| ['compiler_generated'] ),_fol292,_fol293,_fol294,( _X_D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2047
			      ( apply ( 'keymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol285, _fol286, _fol287, _fol288, _fol289, _fol290, _fol291, _fol293, ( [_fol292|_fol294]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2008
	  <I,[],M,_X_D,E2,H2,T2,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2009
	      apply 'keymerge2_1'/6
		  (I, T2, E3, H3, T3, [H2|M])
	  %% Line 2010
	  <I,[],M,_X_D,E2,H2,T2,_X_E3,H3,T3> when 'true' ->
	      %% Line 2011
	      apply 'keymerge2_2'/7
		  (I, T2, E2, H3, T3, M, H2)
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'keymerge3_1',10}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_2'/10 =
    %% Line 2014
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,[H2|T2],M,D,E3,H3,T3> when 'true' ->
	      %% Line 2015
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2016
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2027
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T1> of
			( <_fol295,_fol296,_fol297,_fol298,_fol299,_fol300,_fol301,_fol302,_fol303,_fol304,_fol305,( D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol296,
				       _fol302)
				  -| ['compiler_generated'] ) ->
			      %% Line 2028
			      ( apply ( 'keymerge3_1'/10
					-| ['compiler_generated'] )
				    (_fol295, _fol298, ( [_fol297|_fol305]
							 -| ['compiler_generated'] ), ( D
											-| ['compiler_generated'] ), _fol299, _fol300, _fol301, _fol302, _fol303, _fol304)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2029
			( <_fol306,_fol307,_fol308,_fol309,_fol310,_fol311,_fol312,( _X_E3
										     -| ['compiler_generated'] ),_fol313,_fol314,_fol315,( _X_D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2030
			      ( apply ( 'keymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol306, _fol307, _fol308, _fol309, _fol310, _fol311, _fol312, _fol314, ( [_fol313|_fol315]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2018
		<E2> when 'true' ->
		    %% Line 2044
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_fol316,_fol317,_fol318,_fol319,_fol320,_fol321,_fol322,_fol323,_fol324,_fol325,_fol326,_fol327>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol320,
				       _fol323)
				  -| ['compiler_generated'] ) ->
			      %% Line 2045
			      ( apply ( 'keymerge3_2'/10
					-| ['compiler_generated'] )
				    (_fol316, _fol317, _fol318, _fol319, _fol322, ( [_fol321|_fol326]
										    -| ['compiler_generated'] ), _fol327, _fol323, _fol324, _fol325)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2046
			( <_fol328,_fol329,_fol330,_fol331,_fol332,_fol333,_fol334,( _X_E3
										     -| ['compiler_generated'] ),_fol335,_fol336,_fol337,( _X_D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2047
			      ( apply ( 'keymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol328, _fol329, _fol330, _fol331, _fol332, _fol333, _fol334, _fol336, ( [_fol335|_fol337]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2021
	  <I,E1,H1,T1,[],M,_X_D,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2022
	      apply 'keymerge2_1'/6
		  (I, T1, E3, H3, T3, [H1|M])
	  %% Line 2023
	  <I,E1,H1,T1,[],M,_X_D,_X_E3,H3,T3> when 'true' ->
	      %% Line 2024
	      apply 'keymerge2_2'/7
		  (I, T1, E1, H3, T3, M, H1)
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'keymerge3_2',10}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_12'/12 =
    %% Line 2027
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2028
	      apply 'keymerge3_1'/10
		  (I, T1, [H1|M], D, E2, H2, T2, E3, H3, T3)
	  %% Line 2029
	  <I,E1,H1,T1,E2,H2,T2,_X_E3,H3,T3,M,_X_D> when 'true' ->
	      %% Line 2030
	      apply 'keymerge3_12_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	end
'keymerge3_12_3'/9 =
    %% Line 2033
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2034
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2035
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2036
		    apply 'keymerge3_1'/10
			(I, T1, [H1|M], T1, E2, H2, T2, E3, H3, T3)
		%% Line 2037
		<_X_E3> when 'true' ->
		    %% Line 2038
		    apply 'keymerge3_12_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	      end
	  %% Line 2040
	  <I,_X_E1,H1,T1,E2,H2,T2,[],M> when 'true' ->
	      %% Line 2041
	      apply 'keymerge2_1'/6
		  (I, T1, E2, H2, T2, [H1|M])
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'keymerge3_12_3',9}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_21'/12 =
    %% Line 2044
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2045
	      apply 'keymerge3_2'/10
		  (I, E1, H1, T1, T2, [H2|M], D, E3, H3, T3)
	  %% Line 2046
	  <I,E1,H1,T1,E2,H2,T2,_X_E3,H3,T3,M,_X_D> when 'true' ->
	      %% Line 2047
	      apply 'keymerge3_21_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	end
'keymerge3_21_3'/9 =
    %% Line 2050
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2051
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2052
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2053
		    apply 'keymerge3_2'/10
			(I, E1, H1, T1, T2, [H2|M], T2, E3, H3, T3)
		%% Line 2054
		<_X_E3> when 'true' ->
		    %% Line 2055
		    apply 'keymerge3_21_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	      end
	  %% Line 2057
	  <I,E1,H1,T1,_X_E2,H2,T2,[],M> when 'true' ->
	      %% Line 2058
	      apply 'keymerge2_2'/7
		  (I, T1, E1, H2, T2, M, H1)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'keymerge3_21_3',9}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_1'/10 =
    %% Line 2061
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],M,D,E2,H2,T2,E3,H3,T3> when 'true' ->
	      %% Line 2062
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2063
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2087
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T2> of
			( <_fol338,_fol339,_fol340,_fol341,_fol342,_fol343,_fol344,_fol345,_fol346,_fol347,_fol348,( _X_D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol342,
				       _fol345)
				  -| ['compiler_generated'] ) ->
			      %% Line 2088
			      ( apply ( 'rkeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol338, _fol339, _fol340, _fol341, _fol342, _fol343, _fol344, _fol347, ( [_fol346|_fol348]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2089
			( <_fol349,_fol350,_fol351,_fol352,( _X_E2
							     -| ['compiler_generated'] ),_fol353,_fol354,_fol355,_fol356,_fol357,_fol358,( D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2090
			      ( apply ( 'rkeymerge3_2'/10
					-| ['compiler_generated'] )
				    (_fol349, _fol350, _fol351, _fol352, _fol354, ( [_fol353|_fol358]
										    -| ['compiler_generated'] ), ( D
														   -| ['compiler_generated'] ), _fol355, _fol356, _fol357)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2065
		<E1> when 'true' ->
		    %% Line 2104
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_fol359,_fol360,_fol361,_fol362,_fol363,_fol364,_fol365,_fol366,_fol367,_fol368,_fol369,( _X_D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol360,
				       _fol366)
				  -| ['compiler_generated'] ) ->
			      %% Line 2105
			      ( apply ( 'rkeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol359, _fol360, _fol361, _fol362, _fol363, _fol364, _fol365, _fol368, ( [_fol367|_fol369]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2106
			( <_fol370,( _X_E1
				     -| ['compiler_generated'] ),_fol371,_fol372,_fol373,_fol374,_fol375,_fol376,_fol377,_fol378,_fol379,_fol380> when ( 'true'
																			 -| ['compiler_generated'] ) ->
			      %% Line 2107
			      ( apply ( 'rkeymerge3_1'/10
					-| ['compiler_generated'] )
				    (_fol370, _fol372, ( [_fol371|_fol379]
							 -| ['compiler_generated'] ), _fol380, _fol373, _fol374, _fol375, _fol376, _fol377, _fol378)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2068
	  <I,[],M,_X_D,E2,H2,T2,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2069
	      apply 'rkeymerge2_2'/7
		  (I, E2, T2, H3, T3, M, H2)
	  %% Line 2070
	  <I,[],M,_X_D,_X_E2,H2,T2,E3,H3,T3> when 'true' ->
	      %% Line 2071
	      apply 'rkeymerge2_1'/6
		  (I, T2, E3, H3, T3, [H2|M])
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'rkeymerge3_1',10}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_2'/10 =
    %% Line 2074
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,[H2|T2],M,D,E3,H3,T3> when 'true' ->
	      %% Line 2075
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2076
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2087
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_fol381,_fol382,_fol383,_fol384,_fol385,_fol386,_fol387,_fol388,_fol389,_fol390,_fol391,( _X_D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol385,
				       _fol388)
				  -| ['compiler_generated'] ) ->
			      %% Line 2088
			      ( apply ( 'rkeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol381, _fol382, _fol383, _fol384, _fol385, _fol386, _fol387, _fol390, ( [_fol389|_fol391]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2089
			( <_fol392,_fol393,_fol394,_fol395,( _X_E2
							     -| ['compiler_generated'] ),_fol396,_fol397,_fol398,_fol399,_fol400,_fol401,_fol402> when ( 'true'
																			 -| ['compiler_generated'] ) ->
			      %% Line 2090
			      ( apply ( 'rkeymerge3_2'/10
					-| ['compiler_generated'] )
				    (_fol392, _fol393, _fol394, _fol395, _fol397, ( [_fol396|_fol401]
										    -| ['compiler_generated'] ), _fol402, _fol398, _fol399, _fol400)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2078
		<E2> when 'true' ->
		    %% Line 2104
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T1> of
			( <_fol403,_fol404,_fol405,_fol406,_fol407,_fol408,_fol409,_fol410,_fol411,_fol412,_fol413,( _X_D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol404,
				       _fol410)
				  -| ['compiler_generated'] ) ->
			      %% Line 2105
			      ( apply ( 'rkeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol403, _fol404, _fol405, _fol406, _fol407, _fol408, _fol409, _fol412, ( [_fol411|_fol413]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2106
			( <_fol414,( _X_E1
				     -| ['compiler_generated'] ),_fol415,_fol416,_fol417,_fol418,_fol419,_fol420,_fol421,_fol422,_fol423,( D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2107
			      ( apply ( 'rkeymerge3_1'/10
					-| ['compiler_generated'] )
				    (_fol414, _fol416, ( [_fol415|_fol423]
							 -| ['compiler_generated'] ), ( D
											-| ['compiler_generated'] ), _fol417, _fol418, _fol419, _fol420, _fol421, _fol422)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2081
	  <I,E1,H1,T1,[],M,_X_D,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2082
	      apply 'rkeymerge2_2'/7
		  (I, E1, T1, H3, T3, M, H1)
	  %% Line 2083
	  <I,_X_E1,H1,T1,[],M,_X_D,E3,H3,T3> when 'true' ->
	      %% Line 2084
	      apply 'rkeymerge2_1'/6
		  (I, T1, E3, H3, T3, [H1|M])
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'rkeymerge3_2',10}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_12'/12 =
    %% Line 2087
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,_X_D>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2088
	      apply 'rkeymerge3_12_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	  %% Line 2089
	  <I,E1,H1,T1,_X_E2,H2,T2,E3,H3,T3,M,D> when 'true' ->
	      %% Line 2090
	      apply 'rkeymerge3_2'/10
		  (I, E1, H1, T1, T2, [H2|M], D, E3, H3, T3)
	end
'rkeymerge3_12_3'/9 =
    %% Line 2093
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2094
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2095
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2096
		    apply 'rkeymerge3_12_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
		%% Line 2097
		<E3> when 'true' ->
		    %% Line 2098
		    apply 'rkeymerge3_2'/10
			(I, E1, H1, T1, T2, [H2|M], T2, E3, H3, T3)
	      end
	  %% Line 2100
	  <I,E1,H1,T1,_X_E2,H2,T2,[],M> when 'true' ->
	      %% Line 2101
	      apply 'rkeymerge2_2'/7
		  (I, E1, T1, H2, T2, M, H1)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'rkeymerge3_12_3',9}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_21'/12 =
    %% Line 2104
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,_X_D>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2105
	      apply 'rkeymerge3_21_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	  %% Line 2106
	  <I,_X_E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> when 'true' ->
	      %% Line 2107
	      apply 'rkeymerge3_1'/10
		  (I, T1, [H1|M], D, E2, H2, T2, E3, H3, T3)
	end
'rkeymerge3_21_3'/9 =
    %% Line 2110
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2111
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2112
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2113
		    apply 'rkeymerge3_21_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
		%% Line 2114
		<E3> when 'true' ->
		    %% Line 2115
		    apply 'rkeymerge3_1'/10
			(I, T1, [H1|M], T1, E2, H2, T2, E3, H3, T3)
	      end
	  %% Line 2117
	  <I,_X_E1,H1,T1,E2,H2,T2,[],M> when 'true' ->
	      %% Line 2118
	      apply 'rkeymerge2_1'/6
		  (I, T1, E2, H2, T2, [H1|M])
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'rkeymerge3_21_3',9}}] )
	    -| ['compiler_generated'] )
	end
'keymerge2_1'/6 =
    %% Line 2123
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],E2,H2,T2,M> when 'true' ->
	      %% Line 2124
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2125
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2126
		    apply 'keymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|M])
		%% Line 2127
		<E1> when 'true' ->
		    %% Line 2128
		    apply 'keymerge2_2'/7
			(I, T1, E1, H2, T2, M, H1)
	      end
	  %% Line 2130
	  <_X_I,[],_X_E2,H2,T2,M> when 'true' ->
	      %% Line 2131
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'keymerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'keymerge2_2'/7 =
    %% Line 2133
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,T1,E1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 2134
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2135
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2136
		    apply 'keymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|[HdM|M]])
		%% Line 2137
		<_X_E2> when 'true' ->
		    %% Line 2138
		    apply 'keymerge2_2'/7
			(I, T1, E1, H2, T2, [HdM|M], H1)
	      end
	  %% Line 2140
	  <_X_I,T1,_X_E1,HdM,[],M,H1> when 'true' ->
	      %% Line 2141
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'keymerge2_2',7}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge2_1'/6 =
    %% Line 2145
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],E2,H2,T2,M> when 'true' ->
	      %% Line 2146
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2147
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2148
		    apply 'rkeymerge2_2'/7
			(I, E1, T1, H2, T2, M, H1)
		%% Line 2149
		<_X_E1> when 'true' ->
		    %% Line 2150
		    apply 'rkeymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|M])
	      end
	  %% Line 2152
	  <_X_I,[],_X_E2,H2,T2,M> when 'true' ->
	      %% Line 2153
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rkeymerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge2_2'/7 =
    %% Line 2155
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 2156
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2157
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2158
		    apply 'rkeymerge2_2'/7
			(I, E1, T1, H2, T2, [HdM|M], H1)
		%% Line 2159
		<E2> when 'true' ->
		    %% Line 2160
		    apply 'rkeymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|[HdM|M]])
	      end
	  %% Line 2162
	  <_X_I,_X_E1,T1,HdM,[],M,H1> when 'true' ->
	      %% Line 2163
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'rkeymerge2_2',7}}] )
	    -| ['compiler_generated'] )
	end
'ukeysplit_1'/8 =
    %% Line 2168
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs> when 'true' ->
	      %% Line 2169
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2170
		<EZ>
		    when call 'erlang':'=='
			  (EY,
			   EZ) ->
		    %% Line 2171
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, R, Rs)
		%% Line 2172
		<EZ>
		    when call 'erlang':'<'
			  (EY,
			   EZ) ->
		    %% Line 2173
		    apply 'ukeysplit_1'/8
			(I, Y, EY, Z, EZ, L, [X|R], Rs)
		%% Line 2174
		<EZ>
		    when call 'erlang':'=='
			  (EX,
			   EZ) ->
		    %% Line 2175
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, R, Rs)
		%% Line 2176
		<EZ>
		    when call 'erlang':'<'
			  (EX,
			   EZ) ->
		    %% Line 2177
		    apply 'ukeysplit_1'/8
			(I, Z, EZ, Y, EY, L, [X|R], Rs)
		%% Line 2178
		<_X_EZ>
		    when call 'erlang':'=:='
			  (R,
			   []) ->
		    %% Line 2179
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, [Z|[]], Rs)
		%% Line 2180
		<EZ> when 'true' ->
		    %% Line 2181
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, Z, EZ)
	      end
	  %% Line 2183
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs> when 'true' ->
	      %% Line 2184
	      apply 'rukeymergel'/3
		  (I, [[Y|[X|R]]|Rs], [])
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'ukeysplit_1',8}}] )
	    -| ['compiler_generated'] )
	end
'ukeysplit_1_1'/10 =
    %% Line 2186
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs,S,ES> when 'true' ->
	      %% Line 2187
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2188
		<EZ>
		    when call 'erlang':'=='
			  (EY,
			   EZ) ->
		    %% Line 2189
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, S, ES)
		%% Line 2190
		<EZ>
		    when call 'erlang':'<'
			  (EY,
			   EZ) ->
		    %% Line 2191
		    apply 'ukeysplit_1_1'/10
			(I, Y, EY, Z, EZ, L, [X|R], Rs, S, ES)
		%% Line 2192
		<EZ>
		    when call 'erlang':'=='
			  (EX,
			   EZ) ->
		    %% Line 2193
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, S, ES)
		%% Line 2194
		<EZ>
		    when call 'erlang':'<'
			  (EX,
			   EZ) ->
		    %% Line 2195
		    apply 'ukeysplit_1_1'/10
			(I, Z, EZ, Y, EY, L, [X|R], Rs, S, ES)
		%% Line 2196
		<EZ>
		    when call 'erlang':'=='
			  (ES,
			   EZ) ->
		    %% Line 2197
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, S, ES)
		%% Line 2198
		<EZ>
		    when call 'erlang':'<'
			  (ES,
			   EZ) ->
		    %% Line 2199
		    apply 'ukeysplit_1'/8
			(I, S, ES, Z, EZ, L, [], [[Y|[X|R]]|Rs])
		%% Line 2200
		<EZ> when 'true' ->
		    %% Line 2201
		    apply 'ukeysplit_1'/8
			(I, Z, EZ, S, ES, L, [], [[Y|[X|R]]|Rs])
	      end
	  %% Line 2203
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs,S,_X_ES> when 'true' ->
	      %% Line 2204
	      apply 'rukeymergel'/3
		  (I, [[S|[]]|[[Y|[X|R]]|Rs]], [])
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'ukeysplit_1_1',10}}] )
	    -| ['compiler_generated'] )
	end
'ukeysplit_2'/5 =
    %% Line 2207
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,Y,EY,[Z|L],R> when 'true' ->
	      %% Line 2208
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2209
		<EZ>
		    when call 'erlang':'=='
			  (EY,
			   EZ) ->
		    %% Line 2210
		    apply 'ukeysplit_2'/5
			(I, Y, EY, L, R)
		%% Line 2211
		<EZ>
		    when call 'erlang':'<'
			  (EY,
			   EZ) ->
		    let <_cor5> =
			%% Line 2212
			call 'lists':'reverse'
			    (R, [])
		    in  %% Line 2212
			apply 'ukeysplit_1'/8
			    (I, Y, EY, Z, EZ, L, [], [_cor5|[]])
		%% Line 2213
		<EZ> when 'true' ->
		    %% Line 2214
		    apply 'ukeysplit_2'/5
			(I, Z, EZ, L, [Y|R])
	      end
	  %% Line 2216
	  <_X_I,Y,_X_EY,[],R> when 'true' ->
	      %% Line 2217
	      [Y|R]
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ukeysplit_2',5}}] )
	    -| ['compiler_generated'] )
	end
'ukeymergel'/3 =
    %% Line 2219
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,[T1|[[H2|T2]|[[H3|T3]|L]]],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 2223
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor3> =
		      %% Line 2224
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 2223
			  apply 'ukeymerge3_1'/11
			      (I, T1, Acc, [H2|H3], _cor4, H2, T2, [], _cor3, %% Line 2224
									      H3, %% Line 2224
										  T3)
		      in  %% Line 2225
			  apply 'ukeymergel'/3
			      (I, L, [M|Acc])
	  %% Line 2226
	  <I,[[H1|T1]|[T2|L]],Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 2227
		  call 'erlang':'element'
		      (I, H1)
	      in  let <_cor7> =
		      %% Line 2227
		      apply 'ukeymerge2_2'/6
			  (I, T1, _cor6, H1, T2, [])
		  in  %% Line 2227
		      apply 'ukeymergel'/3
			  (I, L, [_cor7|Acc])
	  %% Line 2228
	  <_X_I,[L|[]],[]> when 'true' ->
	      %% Line 2229
	      L
	  %% Line 2230
	  <I,[L|[]],Acc> when 'true' ->
	      let <_cor8> =
		  %% Line 2231
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2231
		  apply 'rukeymergel'/3
		      (I, [_cor8|Acc], [])
	  %% Line 2232
	  <I,[],Acc> when 'true' ->
	      %% Line 2233
	      apply 'rukeymergel'/3
		  (I, Acc, [])
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'ukeymergel',3}}] )
	    -| ['compiler_generated'] )
	end
'rukeymergel'/3 =
    %% Line 2235
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,[[H3|T3]|[[H2|T2]|[T1|L]]],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 2236
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor3> =
		      %% Line 2237
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 2236
			  apply 'rukeymerge3_1'/11
			      (I, T1, Acc, [], _cor4, H2, T2, [], _cor3, %% Line 2237
									 H3, %% Line 2237
									     T3)
		      in  %% Line 2238
			  apply 'rukeymergel'/3
			      (I, L, [M|Acc])
	  %% Line 2239
	  <I,[[H2|T2]|[T1|L]],Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 2240
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor7> =
		      %% Line 2240
		      apply 'rukeymerge2_1'/6
			  (I, T1, _cor6, T2, [], H2)
		  in  %% Line 2240
		      apply 'rukeymergel'/3
			  (I, L, [_cor7|Acc])
	  %% Line 2241
	  <I,[L|[]],Acc> when 'true' ->
	      let <_cor8> =
		  %% Line 2242
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2242
		  apply 'ukeymergel'/3
		      (I, [_cor8|Acc], [])
	  %% Line 2243
	  <I,[],Acc> when 'true' ->
	      %% Line 2244
	      apply 'ukeymergel'/3
		  (I, Acc, [])
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'rukeymergel',3}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_1'/11 =
    %% Line 2249
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],D,HdM,E2,H2,T2,M,E3,H3,T3> when 'true' ->
	      %% Line 2250
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2251
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2283
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,D> of
			( <_fol424,_fol425,_fol426,_fol427,_fol428,_fol429,_fol430,_fol431,_fol432,_fol433,_fol434,( _X_HdM
														     -| ['compiler_generated'] ),_fol435>
			      when %% Line 2284
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol425,
				       _fol431)
				  -| ['compiler_generated'] ) ->
			      %% Line 2285
			      ( apply ( 'ukeymerge3_1'/11
					-| ['compiler_generated'] )
				    (_fol424, _fol426, _fol435, _fol425, _fol428, _fol429, _fol430, ( [_fol427|_fol434]
												      -| ['compiler_generated'] ), _fol431, _fol432, _fol433)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2286
			( <_fol436,_fol437,_fol438,_fol439,_fol440,_fol441,_fol442,_fol443,( _X_H3
											     -| ['compiler_generated'] ),_fol444,_fol445,_fol446,( _X_D
																		   -| ['compiler_generated'] )>
			      when %% Line 2287
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_fol443,
				       _fol446)
				  -| ['compiler_generated'] ) ->
			      %% Line 2288
			      ( apply ( 'ukeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol436, _fol437, _fol438, _fol439, _fol440, _fol441, _fol442, _fol445, _fol444)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2289
			( <_fol447,_fol448,_fol449,_fol450,_fol451,_fol452,_fol453,( _X_E3
										     -| ['compiler_generated'] ),_fol454,_fol455,_fol456,( _X_HdM
																	   -| ['compiler_generated'] ),( _X_D
																					 -| ['compiler_generated'] )> when ( 'true'
																									     -| ['compiler_generated'] ) ->
			      %% Line 2290
			      ( apply ( 'ukeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol447, _fol448, _fol449, _fol450, _fol451, _fol452, _fol453, ( [_fol454|_fol456]
												      -| ['compiler_generated'] ), _fol455)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2253
		<E1>
		    when call 'erlang':'=='
			  (E2,
			   HdM) ->
		    %% Line 2254
		    apply 'ukeymerge3_2'/11
			(I, E1, T1, H1, T2, HdM, T2, M, E3, H3, T3)
		%% Line 2255
		<E1> when 'true' ->
		    %% Line 2304
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,T2> of
			( <_fol457,_fol458,_fol459,_fol460,_fol461,_fol462,_fol463,_fol464,_fol465,_fol466,_fol467,( _X_HdM
														     -| ['compiler_generated'] ),( D
																		   -| ['compiler_generated'] )>
			      when %% Line 2305
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol461,
				       _fol464)
				  -| ['compiler_generated'] ) ->
			      %% Line 2306
			      ( apply ( 'ukeymerge3_2'/11
					-| ['compiler_generated'] )
				    (_fol457, _fol458, _fol459, _fol460, _fol463, _fol461, ( D
											     -| ['compiler_generated'] ), ( [_fol462|_fol467]
															    -| ['compiler_generated'] ), _fol464, _fol465, _fol466)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2307
			( <_fol468,_fol469,_fol470,_fol471,_fol472,_fol473,_fol474,_fol475,( _X_H3
											     -| ['compiler_generated'] ),_fol476,_fol477,_fol478,( _X_D
																		   -| ['compiler_generated'] )>
			      when %% Line 2308
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_fol475,
				       _fol478)
				  -| ['compiler_generated'] ) ->
			      %% Line 2309
			      ( apply ( 'ukeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol468, _fol469, _fol470, _fol471, _fol472, _fol473, _fol474, _fol477, _fol476)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2310
			( <_fol479,_fol480,_fol481,_fol482,_fol483,_fol484,_fol485,( _X_E3
										     -| ['compiler_generated'] ),_fol486,_fol487,_fol488,( _X_HdM
																	   -| ['compiler_generated'] ),( _X_D
																					 -| ['compiler_generated'] )> when ( 'true'
																									     -| ['compiler_generated'] ) ->
			      %% Line 2311
			      ( apply ( 'ukeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol479, _fol480, _fol481, _fol482, _fol483, _fol484, _fol485, ( [_fol486|_fol488]
												      -| ['compiler_generated'] ), _fol487)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2258
	  <I,[],_X_D,HdM,E2,_X_H2,T2,M,E3,H3,T3>
	      when call 'erlang':'=='
		    (E2,
		     HdM) ->
	      %% Line 2259
	      apply 'ukeymerge2_1'/7
		  (I, T2, E3, HdM, T3, M, H3)
	  %% Line 2260
	  <I,[],_X_D,_X_HdM,E2,H2,T2,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2261
	      apply 'ukeymerge2_1'/7
		  (I, T2, E3, E2, T3, [H2|M], H3)
	  %% Line 2262
	  <I,[],_X_D,HdM,E2,H2,T2,M,E3,_X_H3,T3>
	      when call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2263
	      apply 'ukeymerge2_2'/6
		  (I, T2, E2, H2, T3, M)
	  %% Line 2264
	  <I,[],_X_D,_X_HdM,E2,H2,T2,M,_X_E3,H3,T3> when 'true' ->
	      %% Line 2265
	      apply 'ukeymerge2_2'/6
		  (I, T2, E2, H2, T3, [H3|M])
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'ukeymerge3_1',11}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_2'/11 =
    %% Line 2268
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,H1,[H2|T2],HdM,D,M,E3,H3,T3> when 'true' ->
	      %% Line 2269
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2270
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2283
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,T1> of
			( <_fol489,_fol490,_fol491,_fol492,_fol493,_fol494,_fol495,_fol496,_fol497,_fol498,_fol499,( _X_HdM
														     -| ['compiler_generated'] ),( D
																		   -| ['compiler_generated'] )>
			      when %% Line 2284
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol490,
				       _fol496)
				  -| ['compiler_generated'] ) ->
			      %% Line 2285
			      ( apply ( 'ukeymerge3_1'/11
					-| ['compiler_generated'] )
				    (_fol489, _fol491, ( D
							 -| ['compiler_generated'] ), _fol490, _fol493, _fol494, _fol495, ( [_fol492|_fol499]
															    -| ['compiler_generated'] ), _fol496, _fol497, _fol498)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2286
			( <_fol500,_fol501,_fol502,_fol503,_fol504,_fol505,_fol506,_fol507,( _X_H3
											     -| ['compiler_generated'] ),_fol508,_fol509,_fol510,( _X_D
																		   -| ['compiler_generated'] )>
			      when %% Line 2287
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_fol507,
				       _fol510)
				  -| ['compiler_generated'] ) ->
			      %% Line 2288
			      ( apply ( 'ukeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol500, _fol501, _fol502, _fol503, _fol504, _fol505, _fol506, _fol509, _fol508)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2289
			( <_fol511,_fol512,_fol513,_fol514,_fol515,_fol516,_fol517,( _X_E3
										     -| ['compiler_generated'] ),_fol518,_fol519,_fol520,( _X_HdM
																	   -| ['compiler_generated'] ),( _X_D
																					 -| ['compiler_generated'] )> when ( 'true'
																									     -| ['compiler_generated'] ) ->
			      %% Line 2290
			      ( apply ( 'ukeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol511, _fol512, _fol513, _fol514, _fol515, _fol516, _fol517, ( [_fol518|_fol520]
												      -| ['compiler_generated'] ), _fol519)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2272
		<E2> when 'true' ->
		    %% Line 2304
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,D> of
			( <_fol521,_fol522,_fol523,_fol524,_fol525,_fol526,_fol527,_fol528,_fol529,_fol530,_fol531,( _X_HdM
														     -| ['compiler_generated'] ),_fol532>
			      when %% Line 2305
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol525,
				       _fol528)
				  -| ['compiler_generated'] ) ->
			      %% Line 2306
			      ( apply ( 'ukeymerge3_2'/11
					-| ['compiler_generated'] )
				    (_fol521, _fol522, _fol523, _fol524, _fol527, _fol525, _fol532, ( [_fol526|_fol531]
												      -| ['compiler_generated'] ), _fol528, _fol529, _fol530)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2307
			( <_fol533,_fol534,_fol535,_fol536,_fol537,_fol538,_fol539,_fol540,( _X_H3
											     -| ['compiler_generated'] ),_fol541,_fol542,_fol543,( _X_D
																		   -| ['compiler_generated'] )>
			      when %% Line 2308
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_fol540,
				       _fol543)
				  -| ['compiler_generated'] ) ->
			      %% Line 2309
			      ( apply ( 'ukeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol533, _fol534, _fol535, _fol536, _fol537, _fol538, _fol539, _fol542, _fol541)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2310
			( <_fol544,_fol545,_fol546,_fol547,_fol548,_fol549,_fol550,( _X_E3
										     -| ['compiler_generated'] ),_fol551,_fol552,_fol553,( _X_HdM
																	   -| ['compiler_generated'] ),( _X_D
																					 -| ['compiler_generated'] )> when ( 'true'
																									     -| ['compiler_generated'] ) ->
			      %% Line 2311
			      ( apply ( 'ukeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol544, _fol545, _fol546, _fol547, _fol548, _fol549, _fol550, ( [_fol551|_fol553]
												      -| ['compiler_generated'] ), _fol552)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2275
	  <I,E1,T1,H1,[],_X_HdM,_X_D,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2276
	      apply 'ukeymerge2_1'/7
		  (I, T1, E3, E1, T3, [H1|M], H3)
	  %% Line 2277
	  <I,E1,T1,H1,[],HdM,_X_D,M,E3,_X_H3,T3>
	      when call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2278
	      apply 'ukeymerge2_2'/6
		  (I, T1, E1, H1, T3, M)
	  %% Line 2279
	  <I,E1,T1,H1,[],_X_HdM,_X_D,M,_X_E3,H3,T3> when 'true' ->
	      %% Line 2280
	      apply 'ukeymerge2_2'/6
		  (I, T1, E1, H1, T3, [H3|M])
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'ukeymerge3_2',11}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_12'/13 =
    %% Line 2283
    fun (_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,_X_HdM,D>
	      when %% Line 2284
		call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2285
	      apply 'ukeymerge3_1'/11
		  (I, T1, D, E1, E2, H2, T2, [H1|M], E3, H3, T3)
	  %% Line 2286
	  <I,E1,T1,H1,E2,H2,T2,E3,_X_H3,T3,M,HdM,_X_D>
	      when %% Line 2287
		call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2288
	      apply 'ukeymerge3_12_3'/9
		  (I, E1, T1, H1, E2, H2, T2, M, T3)
	  %% Line 2289
	  <I,E1,T1,H1,E2,H2,T2,_X_E3,H3,T3,M,_X_HdM,_X_D> when 'true' ->
	      %% Line 2290
	      apply 'ukeymerge3_12_3'/9
		  (I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	end
'ukeymerge3_12_3'/9 =
    %% Line 2293
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,H1,E2,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 2294
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2295
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2296
		    apply 'ukeymerge3_1'/11
			(I, T1, T1, E1, E2, H2, T2, [H1|M], E3, H3, T3)
		%% Line 2297
		<_X_E3> when 'true' ->
		    %% Line 2298
		    apply 'ukeymerge3_12_3'/9
			(I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	      end
	  %% Line 2300
	  <I,E1,T1,H1,E2,H2,T2,M,[]> when 'true' ->
	      %% Line 2301
	      apply 'ukeymerge2_1'/7
		  (I, T1, E2, E1, T2, [H1|M], H2)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'ukeymerge3_12_3',9}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_21'/13 =
    %% Line 2304
    fun (_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,_X_HdM,D>
	      when %% Line 2305
		call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2306
	      apply 'ukeymerge3_2'/11
		  (I, E1, T1, H1, T2, E2, D, [H2|M], E3, H3, T3)
	  %% Line 2307
	  <I,E1,T1,H1,E2,H2,T2,E3,_X_H3,T3,M,HdM,_X_D>
	      when %% Line 2308
		call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2309
	      apply 'ukeymerge3_21_3'/9
		  (I, E1, T1, H1, E2, H2, T2, M, T3)
	  %% Line 2310
	  <I,E1,T1,H1,E2,H2,T2,_X_E3,H3,T3,M,_X_HdM,_X_D> when 'true' ->
	      %% Line 2311
	      apply 'ukeymerge3_21_3'/9
		  (I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	end
'ukeymerge3_21_3'/9 =
    %% Line 2314
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,H1,E2,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 2315
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2316
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2317
		    apply 'ukeymerge3_2'/11
			(I, E1, T1, H1, T2, E2, T2, [H2|M], E3, H3, T3)
		%% Line 2318
		<_X_E3> when 'true' ->
		    %% Line 2319
		    apply 'ukeymerge3_21_3'/9
			(I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	      end
	  %% Line 2321
	  <I,E1,T1,H1,_X_E2,H2,T2,M,[]> when 'true' ->
	      %% Line 2322
	      apply 'ukeymerge2_2'/6
		  (I, T1, E1, H1, T2, [H2|M])
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'ukeymerge3_21_3',9}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_1'/11 =
    %% Line 2327
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],D1,D2,E2,H2,T2,M,E3,H3,T3> when 'true' ->
	      %% Line 2328
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2329
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2340
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M> of
			( <_fol554,_fol555,_fol556,_fol557,_fol558,_fol559,_fol560,_fol561,_fol562,_fol563,_fol564>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol558,
				       _fol561)
				  -| ['compiler_generated'] ) ->
			      %% Line 2341
			      ( apply ( 'rukeymerge3_12_3'/11
					-| ['compiler_generated'] )
				    (_fol554, _fol555, _fol556, _fol557, _fol558, _fol559, _fol560, _fol564, _fol561, _fol562, _fol563)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2342
			( <_fol565,_fol566,_fol567,_fol568,_fol569,_fol570,_fol571,_fol572,_fol573,_fol574,_fol575> when ( 'true'
															   -| ['compiler_generated'] ) ->
			      %% Line 2343
			      ( apply ( 'rukeymerge3_2'/11
					-| ['compiler_generated'] )
				    (_fol565, _fol566, _fol567, _fol568, _fol571, _fol570, _fol569, _fol575, _fol572, _fol573, _fol574)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2331
		<E1> when 'true' ->
		    %% Line 2346
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D1,D2> of
			( <_fol576,_fol577,_fol578,_fol579,_fol580,_fol581,_fol582,_fol583,_fol584,_fol585,_fol586,( _X_D1
														     -| ['compiler_generated'] ),( _X_D2
																		   -| ['compiler_generated'] )>
			      when %% Line 2347
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol577,
				       _fol583)
				  -| ['compiler_generated'] ) ->
			      %% Line 2348
			      ( apply ( 'rukeymerge3_21_3'/11
					-| ['compiler_generated'] )
				    (_fol576, _fol577, _fol578, _fol579, _fol580, _fol581, _fol582, _fol586, _fol583, _fol584, _fol585)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2349
			( <_fol587,( _X_E1
				     -| ['compiler_generated'] ),_fol588,_fol589,_fol590,_fol591,_fol592,_fol593,_fol594,_fol595,_fol596,_fol597,_fol598> when ( 'true'
																				 -| ['compiler_generated'] ) ->
			      %% Line 2350
			      ( apply ( 'rukeymerge3_1'/11
					-| ['compiler_generated'] )
				    (_fol587, _fol589, _fol597, _fol598, _fol590, _fol591, _fol592, ( [_fol588|_fol596]
												      -| ['compiler_generated'] ), _fol593, _fol594, _fol595)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2334
	  <I,[],_X_D1,_X_D2,E2,H2,T2,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2335
	      apply 'rukeymerge2_2'/8
		  (I, T2, E2, T3, M, E3, H3, H2)
	  %% Line 2336
	  <I,[],_X_D1,_X_D2,_X_E2,H2,T2,M,E3,H3,T3> when 'true' ->
	      %% Line 2337
	      apply 'rukeymerge2_1'/6
		  (I, T2, E3, T3, [H2|M], H3)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'rukeymerge3_1',11}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_12a'/11 =
    %% Line 2340
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2341
	      apply 'rukeymerge3_12_3'/11
		  (I, E1, H1, T1, E2, H2, T2, M, E3, H3, T3)
	  %% Line 2342
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M> when 'true' ->
	      %% Line 2343
	      apply 'rukeymerge3_2'/11
		  (I, E1, H1, T1, T2, H2, E2, M, E3, H3, T3)
	end
'rukeymerge3_21a'/13 =
    %% Line 2346
    fun (_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,_X_D1,_X_D2>
	      when %% Line 2347
		call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2348
	      apply 'rukeymerge3_21_3'/11
		  (I, E1, H1, T1, E2, H2, T2, M, E3, H3, T3)
	  %% Line 2349
	  <I,_X_E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D1,D2> when 'true' ->
	      %% Line 2350
	      apply 'rukeymerge3_1'/11
		  (I, T1, D1, D2, E2, H2, T2, [H1|M], E3, H3, T3)
	end
'rukeymerge3_2'/11 =
    %% Line 2353
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,[H2|T2],H2M,E2M,M,E3,H3,T3> when 'true' ->
	      %% Line 2354
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2355
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2372
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> of
			( <_fol599,_fol600,_fol601,_fol602,_fol603,_fol604,_fol605,_fol606,_fol607,_fol608,_fol609,_fol610>
			      when %% Line 2373
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol603,
				       _fol606)
				  -| ['compiler_generated'] ) ->
			      %% Line 2374
			      ( apply ( 'rukeymerge3_12_3'/11
					-| ['compiler_generated'] )
				    (_fol599, _fol600, _fol601, _fol602, _fol603, _fol604, _fol605, ( [_fol610|_fol609]
												      -| ['compiler_generated'] ), _fol606, _fol607, _fol608)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2375
			( <_fol611,_fol612,_fol613,_fol614,_fol615,_fol616,_fol617,_fol618,_fol619,_fol620,_fol621,_fol622> when ( 'true'
																   -| ['compiler_generated'] ) ->
			      %% Line 2376
			      ( apply ( 'rukeymerge3_2'/11
					-| ['compiler_generated'] )
				    (_fol611, _fol612, _fol613, _fol614, _fol617, _fol616, _fol615, ( [_fol622|_fol621]
												      -| ['compiler_generated'] ), _fol618, _fol619, _fol620)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2358
		<E2>
		    when call 'erlang':'=='
			  (E1,
			   E2M) ->
		    %% Line 2359
		    apply 'rukeymerge3_1'/11
			(I, T1, H1, T1, E2, H2, T2, [H1|M], E3, H3, T3)
		%% Line 2360
		<E2> when 'true' ->
		    %% Line 2379
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> of
			( <_fol623,_fol624,_fol625,_fol626,_fol627,_fol628,_fol629,_fol630,_fol631,_fol632,_fol633,_fol634>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol624,
				       _fol630)
				  -| ['compiler_generated'] ) ->
			      %% Line 2380
			      ( apply ( 'rukeymerge3_21_3'/11
					-| ['compiler_generated'] )
				    (_fol623, _fol624, _fol625, _fol626, _fol627, _fol628, _fol629, ( [_fol634|_fol633]
												      -| ['compiler_generated'] ), _fol630, _fol631, _fol632)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2381
			( <_fol635,( _X_E1
				     -| ['compiler_generated'] ),_fol636,_fol637,_fol638,_fol639,_fol640,_fol641,_fol642,_fol643,_fol644,_fol645> when ( 'true'
																			 -| ['compiler_generated'] ) ->
			      %% Line 2382
			      ( apply ( 'rukeymerge3_1'/11
					-| ['compiler_generated'] )
				    (_fol635, _fol637, _fol636, _fol637, _fol638, _fol639, _fol640, ( [_fol636|( [_fol645|_fol644]
														 -| ['compiler_generated'] )]
												      -| ['compiler_generated'] ), _fol641, _fol642, _fol643)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2364
	  <I,E1,H1,T1,[],_X_H2M,E2M,M,E3,H3,T3>
	      when call 'erlang':'=='
		    (E1,
		     E2M) ->
	      %% Line 2365
	      apply 'rukeymerge2_1'/6
		  (I, T1, E3, T3, [H1|M], H3)
	  %% Line 2366
	  <I,E1,H1,T1,[],H2M,_X_E2M,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2367
	      apply 'rukeymerge2_2'/8
		  (I, T1, E1, T3, [H2M|M], E3, H3, H1)
	  %% Line 2368
	  <I,_X_E1,H1,T1,[],H2M,_X_E2M,M,E3,H3,T3> when 'true' ->
	      %% Line 2369
	      apply 'rukeymerge2_1'/6
		  (I, T1, E3, T3, [H1|[H2M|M]], H3)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'rukeymerge3_2',11}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_12b'/12 =
    %% Line 2372
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M>
	      when %% Line 2373
		call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2374
	      apply 'rukeymerge3_12_3'/11
		  (I, E1, H1, T1, E2, H2, T2, [H2M|M], E3, H3, T3)
	  %% Line 2375
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> when 'true' ->
	      %% Line 2376
	      apply 'rukeymerge3_2'/11
		  (I, E1, H1, T1, T2, H2, E2, [H2M|M], E3, H3, T3)
	end
'rukeymerge3_21b'/12 =
    %% Line 2379
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2380
	      apply 'rukeymerge3_21_3'/11
		  (I, E1, H1, T1, E2, H2, T2, [H2M|M], E3, H3, T3)
	  %% Line 2381
	  <I,_X_E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> when 'true' ->
	      %% Line 2382
	      apply 'rukeymerge3_1'/11
		  (I, T1, H1, T1, E2, H2, T2, [H1|[H2M|M]], E3, H3, T3)
	end
'rukeymerge3_12_3'/11 =
    %% Line 2385
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,H3M,[H3|T3]> when 'true' ->
	      %% Line 2386
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2387
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2388
		    apply 'rukeymerge3_12_3'/11
			(I, E1, H1, T1, E2, H2, T2, [H3M|M], E3, H3, T3)
		%% Line 2389
		<E3>
		    when call 'erlang':'=='
			  (E2,
			   E3M) ->
		    %% Line 2390
		    apply 'rukeymerge3_2'/11
			(I, E1, H1, T1, T2, H2, E2, M, E3, H3, T3)
		%% Line 2391
		<E3> when 'true' ->
		    %% Line 2392
		    apply 'rukeymerge3_2'/11
			(I, E1, H1, T1, T2, H2, E2, [H3M|M], E3, H3, T3)
	      end
	  %% Line 2394
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,_X_H3M,[]>
	      when call 'erlang':'=='
		    (E2,
		     E3M) ->
	      %% Line 2395
	      apply 'rukeymerge2_2'/8
		  (I, T1, E1, T2, M, E2, H2, H1)
	  %% Line 2396
	  <I,E1,H1,T1,E2,H2,T2,M,_X_E3M,H3M,[]> when 'true' ->
	      %% Line 2397
	      apply 'rukeymerge2_2'/8
		  (I, T1, E1, T2, [H3M|M], E2, H2, H1)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'rukeymerge3_12_3',11}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_21_3'/11 =
    %% Line 2400
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,H3M,[H3|T3]> when 'true' ->
	      %% Line 2401
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2402
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2403
		    apply 'rukeymerge3_21_3'/11
			(I, E1, H1, T1, E2, H2, T2, [H3M|M], E3, H3, T3)
		%% Line 2404
		<E3>
		    when call 'erlang':'=='
			  (E1,
			   E3M) ->
		    %% Line 2405
		    apply 'rukeymerge3_1'/11
			(I, T1, H1, T1, E2, H2, T2, [H1|M], E3, H3, T3)
		%% Line 2406
		<E3> when 'true' ->
		    %% Line 2407
		    apply 'rukeymerge3_1'/11
			(I, T1, H1, T1, E2, H2, T2, [H1|[H3M|M]], E3, H3, T3)
	      end
	  %% Line 2409
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,_X_H3M,[]>
	      when call 'erlang':'=='
		    (E1,
		     E3M) ->
	      %% Line 2410
	      apply 'rukeymerge2_1'/6
		  (I, T1, E2, T2, [H1|M], H2)
	  %% Line 2411
	  <I,_X_E1,H1,T1,E2,H2,T2,M,_X_E3M,H3M,[]> when 'true' ->
	      %% Line 2412
	      apply 'rukeymerge2_1'/6
		  (I, T1, E2, T2, [H1|[H3M|M]], H2)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'rukeymerge3_21_3',11}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge2_1'/7 =
    %% Line 2417
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],E2,HdM,T2,M,H2> when 'true' ->
	      %% Line 2418
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2419
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2420
		    apply 'ukeymerge2_1'/7
			(I, T1, E2, E1, T2, [H1|M], H2)
		%% Line 2421
		<E1>
		    when call 'erlang':'=='
			  (E2,
			   HdM) ->
		    %% Line 2422
		    apply 'ukeymerge2_2'/6
			(I, T1, E1, H1, T2, M)
		%% Line 2423
		<E1> when 'true' ->
		    %% Line 2424
		    apply 'ukeymerge2_2'/6
			(I, T1, E1, H1, T2, [H2|M])
	      end
	  %% Line 2426
	  <_X_I,[],E2,HdM,T2,M,_X_H2>
	      when call 'erlang':'=='
		    (E2,
		     HdM) ->
	      %% Line 2427
	      call 'lists':'reverse'
		  (T2, M)
	  %% Line 2428
	  <_X_I,[],_X_E2,_X_HdM,T2,M,H2> when 'true' ->
	      %% Line 2429
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'ukeymerge2_1',7}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge2_2'/6 =
    %% Line 2431
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,T1,E1,H1,[H2|T2],M> when 'true' ->
	      %% Line 2432
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2433
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2434
		    apply 'ukeymerge2_1'/7
			(I, T1, E2, E1, T2, [H1|M], H2)
		%% Line 2435
		<_X_E2> when 'true' ->
		    %% Line 2436
		    apply 'ukeymerge2_2'/6
			(I, T1, E1, H1, T2, [H2|M])
	      end
	  %% Line 2438
	  <_X_I,T1,_X_E1,H1,[],M> when 'true' ->
	      %% Line 2439
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ukeymerge2_2',6}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge2_1'/6 =
    %% Line 2443
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],E2,T2,M,H2> when 'true' ->
	      %% Line 2444
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2445
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2446
		    apply 'rukeymerge2_2'/8
			(I, T1, E1, T2, M, E2, H2, H1)
		%% Line 2447
		<_X_E1> when 'true' ->
		    %% Line 2448
		    apply 'rukeymerge2_1'/6
			(I, T1, E2, T2, [H1|M], H2)
	      end
	  %% Line 2450
	  <_X_I,[],_X_E2,T2,M,H2> when 'true' ->
	      %% Line 2451
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rukeymerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge2_2'/8 =
    %% Line 2453
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,T1,E1,[H2|T2],M,E2M,H2M,H1> when 'true' ->
	      %% Line 2454
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2455
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2456
		    apply 'rukeymerge2_2'/8
			(I, T1, E1, T2, [H2M|M], E2, H2, H1)
		%% Line 2457
		<E2>
		    when call 'erlang':'=='
			  (E1,
			   E2M) ->
		    %% Line 2458
		    apply 'rukeymerge2_1'/6
			(I, T1, E2, T2, [H1|M], H2)
		%% Line 2459
		<E2> when 'true' ->
		    %% Line 2460
		    apply 'rukeymerge2_1'/6
			(I, T1, E2, T2, [H1|[H2M|M]], H2)
	      end
	  %% Line 2462
	  <_X_I,T1,E1,[],M,E2M,_X_H2M,H1>
	      when call 'erlang':'=='
		    (E1,
		     E2M) ->
	      %% Line 2463
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  %% Line 2464
	  <_X_I,T1,_X_E1,[],M,_X_E2M,H2M,H1> when 'true' ->
	      %% Line 2465
	      call 'lists':'reverse'
		  (T1, [H1|[H2M|M]])
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'rukeymerge2_2',8}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_1'/6 =
    %% Line 2470
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs> when 'true' ->
	      %% Line 2471
	      case apply Fun
		       (Y, Z) of
		%% Line 2472
		<'true'> when 'true' ->
		    %% Line 2473
		    apply 'fsplit_1'/6
			(Z, Y, Fun, L, [X|R], Rs)
		%% Line 2474
		<'false'> when 'true' ->
		    %% Line 2475
		    case apply Fun
			     (X, Z) of
		      %% Line 2476
		      <'true'> when 'true' ->
			  %% Line 2477
			  apply 'fsplit_1'/6
			      (Y, Z, Fun, L, [X|R], Rs)
		      %% Line 2478
		      <'false'>
			  when call 'erlang':'=:='
				(R,
				 []) ->
			  %% Line 2479
			  apply 'fsplit_1'/6
			      (Y, X, Fun, L, [Z|[]], Rs)
		      %% Line 2480
		      <'false'> when 'true' ->
			  %% Line 2481
			  apply 'fsplit_1_1'/7
			      (Y, X, Fun, L, R, Rs, Z)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2484
	  <Y,X,Fun,[],R,Rs> when 'true' ->
	      %% Line 2485
	      apply 'rfmergel'/4
		  ([[Y|[X|R]]|Rs], [], Fun, 'asc')
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'fsplit_1',6}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_1_1'/7 =
    %% Line 2487
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 2488
	      case apply Fun
		       (Y, Z) of
		%% Line 2489
		<'true'> when 'true' ->
		    %% Line 2490
		    apply 'fsplit_1_1'/7
			(Z, Y, Fun, L, [X|R], Rs, S)
		%% Line 2491
		<'false'> when 'true' ->
		    %% Line 2492
		    case apply Fun
			     (X, Z) of
		      %% Line 2493
		      <'true'> when 'true' ->
			  %% Line 2494
			  apply 'fsplit_1_1'/7
			      (Y, Z, Fun, L, [X|R], Rs, S)
		      %% Line 2495
		      <'false'> when 'true' ->
			  %% Line 2496
			  case apply Fun
				   (S, Z) of
			    %% Line 2497
			    <'true'> when 'true' ->
				%% Line 2498
				apply 'fsplit_1'/6
				    (Z, S, Fun, L, [], [[Y|[X|R]]|Rs])
			    %% Line 2499
			    <'false'> when 'true' ->
				%% Line 2500
				apply 'fsplit_1'/6
				    (S, Z, Fun, L, [], [[Y|[X|R]]|Rs])
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2504
	  <Y,X,Fun,[],R,Rs,S> when 'true' ->
	      %% Line 2505
	      apply 'rfmergel'/4
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], Fun, 'asc')
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'fsplit_1_1',7}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_2'/6 =
    %% Line 2508
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs> when 'true' ->
	      %% Line 2509
	      case apply Fun
		       (Y, Z) of
		%% Line 2510
		<'false'> when 'true' ->
		    %% Line 2511
		    apply 'fsplit_2'/6
			(Z, Y, Fun, L, [X|R], Rs)
		%% Line 2512
		<'true'> when 'true' ->
		    %% Line 2513
		    case apply Fun
			     (X, Z) of
		      %% Line 2514
		      <'false'> when 'true' ->
			  %% Line 2515
			  apply 'fsplit_2'/6
			      (Y, Z, Fun, L, [X|R], Rs)
		      %% Line 2516
		      <'true'>
			  when call 'erlang':'=:='
				(R,
				 []) ->
			  %% Line 2517
			  apply 'fsplit_2'/6
			      (Y, X, Fun, L, [Z|[]], Rs)
		      %% Line 2518
		      <'true'> when 'true' ->
			  %% Line 2519
			  apply 'fsplit_2_1'/7
			      (Y, X, Fun, L, R, Rs, Z)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2522
	  <Y,X,Fun,[],R,Rs> when 'true' ->
	      %% Line 2523
	      apply 'fmergel'/4
		  ([[Y|[X|R]]|Rs], [], Fun, 'desc')
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'fsplit_2',6}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_2_1'/7 =
    %% Line 2525
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 2526
	      case apply Fun
		       (Y, Z) of
		%% Line 2527
		<'false'> when 'true' ->
		    %% Line 2528
		    apply 'fsplit_2_1'/7
			(Z, Y, Fun, L, [X|R], Rs, S)
		%% Line 2529
		<'true'> when 'true' ->
		    %% Line 2530
		    case apply Fun
			     (X, Z) of
		      %% Line 2531
		      <'false'> when 'true' ->
			  %% Line 2532
			  apply 'fsplit_2_1'/7
			      (Y, Z, Fun, L, [X|R], Rs, S)
		      %% Line 2533
		      <'true'> when 'true' ->
			  %% Line 2534
			  case apply Fun
				   (S, Z) of
			    %% Line 2535
			    <'false'> when 'true' ->
				%% Line 2536
				apply 'fsplit_2'/6
				    (Z, S, Fun, L, [], [[Y|[X|R]]|Rs])
			    %% Line 2537
			    <'true'> when 'true' ->
				%% Line 2538
				apply 'fsplit_2'/6
				    (S, Z, Fun, L, [], [[Y|[X|R]]|Rs])
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2542
	  <Y,X,Fun,[],R,Rs,S> when 'true' ->
	      %% Line 2543
	      apply 'fmergel'/4
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], Fun, 'desc')
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'fsplit_2_1',7}}] )
	    -| ['compiler_generated'] )
	end
'fmergel'/4 =
    %% Line 2545
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[T1|[[H2|T2]|L]],Acc,Fun,'asc'> when 'true' ->
	      let <_cor4> =
		  %% Line 2546
		  apply 'fmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 2546
		  apply 'fmergel'/4
		      (L, [_cor4|Acc], Fun, 'asc')
	  %% Line 2547
	  <[[H2|T2]|[T1|L]],Acc,Fun,'desc'> when 'true' ->
	      let <_cor5> =
		  %% Line 2548
		  apply 'fmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 2548
		  apply 'fmergel'/4
		      (L, [_cor5|Acc], Fun, 'desc')
	  %% Line 2549
	  <[L|[]],[],_X_Fun,_X_O> when 'true' ->
	      %% Line 2550
	      L
	  %% Line 2551
	  <[L|[]],Acc,Fun,O> when 'true' ->
	      let <_cor6> =
		  %% Line 2552
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2552
		  apply 'rfmergel'/4
		      ([_cor6|Acc], [], Fun, O)
	  %% Line 2553
	  <[],Acc,Fun,O> when 'true' ->
	      %% Line 2554
	      apply 'rfmergel'/4
		  (Acc, [], Fun, O)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'fmergel',4}}] )
	    -| ['compiler_generated'] )
	end
'rfmergel'/4 =
    %% Line 2556
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[[H2|T2]|[T1|L]],Acc,Fun,'asc'> when 'true' ->
	      let <_cor4> =
		  %% Line 2557
		  apply 'rfmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 2557
		  apply 'rfmergel'/4
		      (L, [_cor4|Acc], Fun, 'asc')
	  %% Line 2558
	  <[T1|[[H2|T2]|L]],Acc,Fun,'desc'> when 'true' ->
	      let <_cor5> =
		  %% Line 2559
		  apply 'rfmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 2559
		  apply 'rfmergel'/4
		      (L, [_cor5|Acc], Fun, 'desc')
	  %% Line 2560
	  <[L|[]],Acc,Fun,O> when 'true' ->
	      let <_cor6> =
		  %% Line 2561
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2561
		  apply 'fmergel'/4
		      ([_cor6|Acc], [], Fun, O)
	  %% Line 2562
	  <[],Acc,Fun,O> when 'true' ->
	      %% Line 2563
	      apply 'fmergel'/4
		  (Acc, [], Fun, O)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rfmergel',4}}] )
	    -| ['compiler_generated'] )
	end
'fmerge2_1'/5 =
    %% Line 2568
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,Fun,T2,M> when 'true' ->
	      %% Line 2569
	      case apply Fun
		       (H1, H2) of
		%% Line 2570
		<'true'> when 'true' ->
		    %% Line 2571
		    apply 'fmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		%% Line 2572
		<'false'> when 'true' ->
		    %% Line 2573
		    apply 'fmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2575
	  <[],H2,_X_Fun,T2,M> when 'true' ->
	      %% Line 2576
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'fmerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'fmerge2_2'/5 =
    %% Line 2578
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <H1,T1,Fun,[H2|T2],M> when 'true' ->
	      %% Line 2579
	      case apply Fun
		       (H1, H2) of
		%% Line 2580
		<'true'> when 'true' ->
		    %% Line 2581
		    apply 'fmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		%% Line 2582
		<'false'> when 'true' ->
		    %% Line 2583
		    apply 'fmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2585
	  <H1,T1,_X_Fun,[],M> when 'true' ->
	      %% Line 2586
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'fmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'rfmerge2_1'/5 =
    %% Line 2590
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,Fun,T2,M> when 'true' ->
	      %% Line 2591
	      case apply Fun
		       (H1, H2) of
		%% Line 2592
		<'true'> when 'true' ->
		    %% Line 2593
		    apply 'rfmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		%% Line 2594
		<'false'> when 'true' ->
		    %% Line 2595
		    apply 'rfmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2597
	  <[],H2,_X_Fun,T2,M> when 'true' ->
	      %% Line 2598
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rfmerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'rfmerge2_2'/5 =
    %% Line 2600
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <H1,T1,Fun,[H2|T2],M> when 'true' ->
	      %% Line 2601
	      case apply Fun
		       (H1, H2) of
		%% Line 2602
		<'true'> when 'true' ->
		    %% Line 2603
		    apply 'rfmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		%% Line 2604
		<'false'> when 'true' ->
		    %% Line 2605
		    apply 'rfmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2607
	  <H1,T1,_X_Fun,[],M> when 'true' ->
	      %% Line 2608
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rfmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'ufsplit_1'/6 =
    %% Line 2613
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs> when 'true' ->
	      %% Line 2614
	      case apply Fun
		       (Y, Z) of
		%% Line 2615
		<'true'> when 'true' ->
		    %% Line 2616
		    case apply Fun
			     (Z, Y) of
		      %% Line 2617
		      <'true'> when 'true' ->
			  %% Line 2618
			  apply 'ufsplit_1'/6
			      (Y, X, Fun, L, R, Rs)
		      %% Line 2619
		      <'false'> when 'true' ->
			  %% Line 2620
			  apply 'ufsplit_1'/6
			      (Z, Y, Fun, L, [X|R], Rs)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		%% Line 2622
		<'false'> when 'true' ->
		    %% Line 2623
		    case apply Fun
			     (X, Z) of
		      %% Line 2624
		      <'true'> when 'true' ->
			  %% Line 2625
			  case apply Fun
				   (Z, X) of
			    %% Line 2626
			    <'true'> when 'true' ->
				%% Line 2627
				apply 'ufsplit_1'/6
				    (Y, X, Fun, L, R, Rs)
			    %% Line 2628
			    <'false'> when 'true' ->
				%% Line 2629
				apply 'ufsplit_1'/6
				    (Y, Z, Fun, L, [X|R], Rs)
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2631
		      <'false'>
			  when call 'erlang':'=:='
				(R,
				 []) ->
			  %% Line 2632
			  apply 'ufsplit_1'/6
			      (Y, X, Fun, L, [Z|[]], Rs)
		      %% Line 2633
		      <'false'> when 'true' ->
			  %% Line 2634
			  apply 'ufsplit_1_1'/7
			      (Y, X, Fun, L, R, Rs, Z)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2637
	  <Y,X,Fun,[],R,Rs> when 'true' ->
	      %% Line 2638
	      apply 'rufmergel'/3
		  ([[Y|[X|R]]|Rs], [], Fun)
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'ufsplit_1',6}}] )
	    -| ['compiler_generated'] )
	end
'ufsplit_1_1'/7 =
    %% Line 2641
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 2642
	      case apply Fun
		       (Y, Z) of
		%% Line 2643
		<'true'> when 'true' ->
		    %% Line 2644
		    case apply Fun
			     (Z, Y) of
		      %% Line 2645
		      <'true'> when 'true' ->
			  %% Line 2646
			  apply 'ufsplit_1_1'/7
			      (Y, X, Fun, L, R, Rs, S)
		      %% Line 2647
		      <'false'> when 'true' ->
			  %% Line 2648
			  apply 'ufsplit_1_1'/7
			      (Z, Y, Fun, L, [X|R], Rs, S)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor7})
			-| ['compiler_generated'] )
		    end
		%% Line 2650
		<'false'> when 'true' ->
		    %% Line 2651
		    case apply Fun
			     (X, Z) of
		      %% Line 2652
		      <'true'> when 'true' ->
			  %% Line 2653
			  case apply Fun
				   (Z, X) of
			    %% Line 2654
			    <'true'> when 'true' ->
				%% Line 2655
				apply 'ufsplit_1_1'/7
				    (Y, X, Fun, L, R, Rs, S)
			    %% Line 2656
			    <'false'> when 'true' ->
				%% Line 2657
				apply 'ufsplit_1_1'/7
				    (Y, Z, Fun, L, [X|R], Rs, S)
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2659
		      <'false'> when 'true' ->
			  %% Line 2660
			  case apply Fun
				   (S, Z) of
			    %% Line 2661
			    <'true'> when 'true' ->
				%% Line 2662
				case apply Fun
					 (Z, S) of
				  %% Line 2663
				  <'true'> when 'true' ->
				      %% Line 2664
				      apply 'ufsplit_1_1'/7
					  (Y, X, Fun, L, R, Rs, S)
				  %% Line 2665
				  <'false'> when 'true' ->
				      %% Line 2666
				      apply 'ufsplit_1'/6
					  (Z, S, Fun, L, [], [[Y|[X|R]]|Rs])
				  ( <_cor9> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor9})
				    -| ['compiler_generated'] )
				end
			    %% Line 2668
			    <'false'> when 'true' ->
				%% Line 2669
				apply 'ufsplit_1'/6
				    (S, Z, Fun, L, [], [[Y|[X|R]]|Rs])
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor10})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2673
	  <Y,X,Fun,[],R,Rs,S> when 'true' ->
	      %% Line 2674
	      apply 'rufmergel'/3
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], Fun)
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'ufsplit_1_1',7}}] )
	    -| ['compiler_generated'] )
	end
'ufsplit_2'/4 =
    %% Line 2677
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Y,[Z|L],Fun,R> when 'true' ->
	      %% Line 2678
	      case apply Fun
		       (Y, Z) of
		%% Line 2679
		<'true'> when 'true' ->
		    %% Line 2680
		    case apply Fun
			     (Z, Y) of
		      %% Line 2681
		      <'true'> when 'true' ->
			  %% Line 2682
			  apply 'ufsplit_2'/4
			      (Y, L, Fun, R)
		      %% Line 2683
		      <'false'> when 'true' ->
			  let <_cor4> =
			      %% Line 2684
			      call 'lists':'reverse'
				  (R, [])
			  in  %% Line 2684
			      apply 'ufsplit_1'/6
				  (Z, Y, Fun, L, [], [_cor4|[]])
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		%% Line 2686
		<'false'> when 'true' ->
		    %% Line 2687
		    apply 'ufsplit_2'/4
			(Z, L, Fun, [Y|R])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2689
	  <Y,[],_X_Fun,R> when 'true' ->
	      %% Line 2690
	      [Y|R]
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ufsplit_2',4}}] )
	    -| ['compiler_generated'] )
	end
'ufmergel'/3 =
    %% Line 2692
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[H1|T1]|[T2|L]],Acc,Fun> when 'true' ->
	      let <_cor3> =
		  %% Line 2693
		  apply 'ufmerge2_2'/5
		      (H1, T1, Fun, T2, [])
	      in  %% Line 2693
		  apply 'ufmergel'/3
		      (L, [_cor3|Acc], Fun)
	  %% Line 2694
	  <[L|[]],[],_X_Fun> when 'true' ->
	      %% Line 2695
	      L
	  %% Line 2696
	  <[L|[]],Acc,Fun> when 'true' ->
	      let <_cor4> =
		  %% Line 2697
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2697
		  apply 'rufmergel'/3
		      ([_cor4|Acc], [], Fun)
	  %% Line 2698
	  <[],Acc,Fun> when 'true' ->
	      %% Line 2699
	      apply 'rufmergel'/3
		  (Acc, [], Fun)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'ufmergel',3}}] )
	    -| ['compiler_generated'] )
	end
'rufmergel'/3 =
    %% Line 2701
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[H2|T2]|[T1|L]],Acc,Fun> when 'true' ->
	      let <_cor3> =
		  %% Line 2702
		  apply 'rufmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 2702
		  apply 'rufmergel'/3
		      (L, [_cor3|Acc], Fun)
	  %% Line 2703
	  <[L|[]],Acc,Fun> when 'true' ->
	      let <_cor4> =
		  %% Line 2704
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2704
		  apply 'ufmergel'/3
		      ([_cor4|Acc], [], Fun)
	  %% Line 2705
	  <[],Acc,Fun> when 'true' ->
	      %% Line 2706
	      apply 'ufmergel'/3
		  (Acc, [], Fun)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'rufmergel',3}}] )
	    -| ['compiler_generated'] )
	end
'ufmerge2_1'/6 =
    %% Line 2712
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,Fun,T2,M,HdM> when 'true' ->
	      %% Line 2713
	      case apply Fun
		       (H1, H2) of
		%% Line 2714
		<'true'> when 'true' ->
		    %% Line 2715
		    apply 'ufmerge2_1'/6
			(T1, H2, Fun, T2, [H1|M], H1)
		%% Line 2716
		<'false'> when 'true' ->
		    %% Line 2717
		    case apply Fun
			     (H2, HdM) of
		      %% Line 2718
		      <'true'> when 'true' ->
			  %% Line 2719
			  apply 'ufmerge2_2'/5
			      (H1, T1, Fun, T2, M)
		      %% Line 2720
		      <'false'> when 'true' ->
			  %% Line 2721
			  apply 'ufmerge2_2'/5
			      (H1, T1, Fun, T2, [H2|M])
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2724
	  <[],H2,Fun,T2,M,HdM> when 'true' ->
	      %% Line 2725
	      case apply Fun
		       (H2, HdM) of
		%% Line 2726
		<'true'> when 'true' ->
		    %% Line 2727
		    call 'lists':'reverse'
			(T2, M)
		%% Line 2728
		<'false'> when 'true' ->
		    %% Line 2729
		    call 'lists':'reverse'
			(T2, [H2|M])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'ufmerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'ufmerge2_2'/5 =
    %% Line 2732
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <H1,T1,Fun,[H2|T2],M> when 'true' ->
	      %% Line 2733
	      case apply Fun
		       (H1, H2) of
		%% Line 2734
		<'true'> when 'true' ->
		    %% Line 2735
		    apply 'ufmerge2_1'/6
			(T1, H2, Fun, T2, [H1|M], H1)
		%% Line 2736
		<'false'> when 'true' ->
		    %% Line 2737
		    apply 'ufmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2739
	  <H1,T1,_X_Fun,[],M> when 'true' ->
	      %% Line 2740
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'ufmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'rufmerge2_1'/5 =
    %% Line 2744
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,Fun,T2,M> when 'true' ->
	      %% Line 2745
	      case apply Fun
		       (H1, H2) of
		%% Line 2746
		<'true'> when 'true' ->
		    %% Line 2747
		    apply 'rufmerge2_2'/6
			(H1, T1, Fun, T2, M, H2)
		%% Line 2748
		<'false'> when 'true' ->
		    %% Line 2749
		    apply 'rufmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2751
	  <[],H2,_X_Fun,T2,M> when 'true' ->
	      %% Line 2752
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rufmerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'rufmerge2_2'/6 =
    %% Line 2755
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <H1,T1,Fun,[H2|T2],M,H2M> when 'true' ->
	      %% Line 2756
	      case apply Fun
		       (H1, H2) of
		%% Line 2757
		<'true'> when 'true' ->
		    %% Line 2758
		    apply 'rufmerge2_2'/6
			(H1, T1, Fun, T2, [H2M|M], H2)
		%% Line 2759
		<'false'> when 'true' ->
		    %% Line 2760
		    case apply Fun
			     (H2M, H1) of
		      %% Line 2761
		      <'true'> when 'true' ->
			  %% Line 2762
			  apply 'rufmerge2_1'/5
			      (T1, H2, Fun, T2, [H1|M])
		      %% Line 2763
		      <'false'> when 'true' ->
			  %% Line 2764
			  apply 'rufmerge2_1'/5
			      (T1, H2, Fun, T2, [H1|[H2M|M]])
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2767
	  <H1,T1,Fun,[],M,H2M> when 'true' ->
	      %% Line 2768
	      case apply Fun
		       (H2M, H1) of
		%% Line 2769
		<'true'> when 'true' ->
		    %% Line 2770
		    call 'lists':'reverse'
			(T1, [H1|M])
		%% Line 2771
		<'false'> when 'true' ->
		    %% Line 2772
		    call 'lists':'reverse'
			(T1, [H1|[H2M|M]])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'rufmerge2_2',6}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('test_lists')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('test_lists', _cor0)
end